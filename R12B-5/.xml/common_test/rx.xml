<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>rx</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>rx.xml</file></header>
<module>rx</module>
<modulesummary/>
<description>
</description>
<funcs>
<func>
<name>t() -&gt; ok</name>
<fsummary>For debugging only.</fsummary>

<desc><marker id="t-0"/>

<p>For debugging only.</p>
</desc></func>
<func>
<name>match(Str, RegExp) -&gt; nomatch | [string()]</name>
<fsummary>This function tries to match the Posix regular expression
  RegExp with the contents of Str.</fsummary>
<type>
<v>Str = string() | [string | binary] | binary</v><v>RegExp = string() | binary</v></type>
<desc><marker id="match-2"/>

<p>This function tries to match the Posix regular expression
  <c>RegExp</c> with the contents of <c>Str</c>. It returns
  a list of matched strings if a match was found and
  <c>nomatch</c> otherwise. The list of matched strings looks
  like this: <c>[FullMatch, SubMatch1, SubMatch2, ...]</c>
  where <c>FullMatch</c> is the string matched by the whole
  regular expression and <c>SubMatchN</c> is the string that  
matched subexpression no N. Subexpressions are denoted with '(' ')'  
in the regular expression</p>
 
  <p>Example:
  </p><pre>
  match("abc01xyz02rst23", "abc[0-9][0-9]"),
  returns  ["abc01"]
 
  match("abc01xyz02rst23", "([a-z]+[0-9]+)([a-z]+[0-9]+)([a-z]+[0-9]+)"),
  returns ["abc01xyz02rst23","abc01","xyz02","rst23"]
  </pre>
 
</desc></func>
<func>
<name>match_pos(Str, RegExp) -&gt; nomatch | [{Start, End}]</name>
<fsummary>This function is equivalent to match/2, but it
  returns a list of positions instead for a list of strings.</fsummary>
<type>
<v>Start = integer()</v><v>End = integer()</v></type>
<desc><marker id="match_pos-2"/>

<p>This function is equivalent to <c>match/2</c>, but it
  returns a list of positions instead for a list of strings.</p>
</desc></func>
<func>
<name>lmatch(RestLines::Lines, RegExp) -&gt; nomatch | {[string()], Rest}</name>
<fsummary>Performs match/2 on each string in Lines.</fsummary>
<type>
<v>Lines = [Str]</v><v>Rest = [Str]</v><v>Str = string() | [string | binary] | binary</v><v>RegExp = string() | binary</v></type>
<desc><marker id="lmatch-2"/>

<p>Performs match/2 on each string in <c>Lines</c>. The
  first match found is returned along with the rest of the
  <c>Lines</c>. If no match is found, <c>nomatch</c> is
  returned.
 </p>
<p><em>See also:</em> <seealso marker="#match-2">match/2</seealso>.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>