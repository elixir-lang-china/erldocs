<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ct_snmp</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ct_snmp.xml</file></header>
<module>ct_snmp</module>
<modulesummary>Common Test specific layer on top of the OTPs snmp.</modulesummary>
<description>
<p>Common Test specific layer on top of the OTPs snmp</p>
  
   <p>Application to make snmp configuration easier for the test case   
writer. Many test cases can use default values for everything and   
then no snmp-configuration files needs to be supplied at all. When   
it is necessary to change some configuration it can be done for   
the subset of snmp-configuration files that are relevant, and   
still all this can be put in to the common-test configuration file   
or for the more specialized configuration parameters a "simple   
snmp-configuration file" can be placed in the test suites data   
directory. ct_snmp will also perform a type check on all supplied   
configuration. In the manager case the common_test application   
also will keep track of some manager information so that the   
test case write does not have to keep track of as much input   
parameters as if using the OTPs snmp manager directly.</p>
  
  
   <p> The following parameters are configurable </p>
  
   <pre>
   {snmp,
          %%% Manager config
          [{start_manager, boolean()}    % Optional - default is true
          {users, [{user_name(), [call_back_module(), user_data()]}]}, %% Optional
          {usm_users, [{usm_user_name(), usm_config()}]},%% Optional - snmp v3 only
          % managed_agents is optional
          {managed_agents,[{agent_name(), [user_name(), agent_ip(), agent_port(), [agent_config()]]}]},
          {max_msg_size, integer()},     % Optional - default is 484
          {mgr_port, integer()},         % Optional - default is 5000
          {engine _id, string()},        % Optional - default is "mgrEngine"
  
          %%% Agent config
          {start_agent, boolean()},      % Optional - default is false
          {agent_sysname, string()},     % Optional - default is "ct_test"
          {agent_manager_ip, manager_ip()}, % Optional - default is localhost
          {agent_vsns, list()},          % Optional - default is [v2]
          {agent_trap_udp, integer()},   % Optional - default is 5000
          {agent_udp, integer()},        % Optional - default is 4000
          {agent_notify_type, atom()},   % Optional - default is trap
          {agent_sec_type, sec_type()},  % Optional - default is none
          {agent_passwd, string()},      % Optional - default is ""
          {agent_engine_id, string()},   % Optional - default is "agentEngine"
          {agent_max_msg_size, string()},% Optional - default is 484
  
          %% The following parameters represents the snmp configuration files
          %% context.conf, standard.conf, community.conf, vacm.conf,
          %% usm.conf, notify.conf, target_addr.conf and target_params.conf.
          %% Note all values in agent.conf can be altered by the parametes
          %% above. All these configuration files have default values set
          %% up by the snmp application. These values can be overridden by
          %% suppling a list of valid configuration values or a file located
          %% in the test suites data dir that can produce a list
          %% of valid configuration values if you apply file:consult/1 to the
          %% file.
          {agent_contexts, [term()] | {data_dir_file, rel_path()}}, % Optional
          {agent_community, [term()] | {data_dir_file, rel_path()}},% Optional
          {agent_sysinfo,  [term()] | {data_dir_file, rel_path()}}, % Optional
          {agent_vacm, [term()] | {data_dir_file, rel_path()}},     % Optional
          {agent_usm, [term()] | {data_dir_file, rel_path()}},      % Optional
          {agent_notify_def, [term()] | {data_dir_file, rel_path()}},% Optional
          {agent_target_address_def, [term()] | {data_dir_file, rel_path()}},% Optional
          {agent_target_param_def, [term()] | {data_dir_file, rel_path()}},% Optional
         ]}.
   </pre>
  
   <p>The <c>ConfName</c> parameter in the functions
      should be the name you allocated in your test suite using
    <c>require</c> statement. Example:</p>
   <pre> suite() -&gt; [{require, ConfName,{snmp,[users, managed_agents]}}].</pre>
   <p>or</p>
   <pre>  ct:require(ConfName,{snmp,[users, managed_agents]}).</pre>
  
   <p> Note that Usm users are needed for snmp v3 configuration and are
   not to be confused with users.</p>
  
   <p> Snmp traps, inform and report messages are handled by the
   user callback module. For more information about this see
   the snmp application. </p>
   <p> Note: It is recommended to use the .hrl-files created by the
   Erlang/OTP mib-compiler to define the oids.
   Ex for the getting the erlang node name from the erlNodeTable
   in the OTP-MIB </p>
   <pre>Oid = ?erlNodeEntry ++ [?erlNodeName, 1] </pre></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>agent_config() = {Item, Value}</c></tag>
<item><marker id="type-agent_config"/> </item>
<tag><c>agent_ip() = ip()</c></tag>
<item><marker id="type-agent_ip"/> </item>
<tag><c>agent_name() = atom()</c></tag>
<item><marker id="type-agent_name"/> </item>
<tag><c>agent_port() = integer()</c></tag>
<item><marker id="type-agent_port"/> </item>
<tag><c>call_back_module() = atom()</c></tag>
<item><marker id="type-call_back_module"/> </item>
<tag><c>error_index() = integer()</c></tag>
<item><marker id="type-error_index"/> </item>
<tag><c>error_status() = noError | atom()</c></tag>
<item><marker id="type-error_status"/> </item>
<tag><c>ip() = string() | {integer(), integer(), integer(), integer()}</c></tag>
<item><marker id="type-ip"/> </item>
<tag><c>manager_ip() = ip()</c></tag>
<item><marker id="type-manager_ip"/> </item>
<tag><c>oid() = [byte()]</c></tag>
<item><marker id="type-oid"/> </item>
<tag><c>oids() = [oid()]</c></tag>
<item><marker id="type-oids"/> </item>
<tag><c>rel_path() = string()</c></tag>
<item><marker id="type-rel_path"/> </item>
<tag><c>sec_type() = none | minimum | semi</c></tag>
<item><marker id="type-sec_type"/> </item>
<tag><c>snmpreply() = {error_status(), error_index(), varbinds()}</c></tag>
<item><marker id="type-snmpreply"/> </item>
<tag><c>user_data() = term()</c></tag>
<item><marker id="type-user_data"/> </item>
<tag><c>user_name() = atom()</c></tag>
<item><marker id="type-user_name"/> </item>
<tag><c>usm_config() = string()</c></tag>
<item><marker id="type-usm_config"/> </item>
<tag><c>usm_user_name() = string()</c></tag>
<item><marker id="type-usm_user_name"/> </item>
<tag><c>value_type() = o('OBJECT IDENTIFIER') | i('INTEGER') | u('Unsigned32') | g('Unsigned32') | s('OCTET STRING')</c></tag>
<item><marker id="type-value_type"/> </item>
<tag><c>var_and_val() = {oid(), value_type(), value()}</c></tag>
<item><marker id="type-var_and_val"/> </item>
<tag><c>varbind() = term()</c></tag>
<item><marker id="type-varbind"/> </item>
<tag><c>varbinds() = [varbind()]</c></tag>
<item><marker id="type-varbinds"/> </item>
<tag><c>varsandvals() = [var_and_val()]</c></tag>
<item><marker id="type-varsandvals"/> </item>
</taglist></section>
<funcs>
<func>
<name>start(Config, ConfName) -&gt; ok</name>
<fsummary>Starts an snmp manager and/or agent.</fsummary>
<type>
<v>Config = [{Key, Value}]</v><v>Key = atom()</v><v>Value = term()</v><v>ConfName = atom()</v></type>
<desc><marker id="start-2"/>

<p>Starts an snmp manager and/or agent. In the manager case also
   registrations of users and agents as specified by the
   configuration &lt;ConfName&gt; will be performed. When using snmp
   v3 also so called usm users will be registered. Note that users,
   usm_users and managed agents may also be registerd at a later time
   using ct_snmp:register_users/2, ct_snmp:register_agents/2, and
   ct_snmp:register_usm_users/2. The agent started will be
   called snmp_master_agent. Use ct_snmp:load_mibs to load mibs into the
   agent.</p>
</desc></func>
<func>
<name>stop(Config) -&gt; ok</name>
<fsummary>Stops the snmp manager and/or agent removes all files created.</fsummary>
<type>
<v>Config = [{Key, Value}]</v><v>Key = atom()</v><v>Value = term()</v><v>ConfName = atom()</v></type>
<desc><marker id="stop-1"/>

<p>Stops the snmp manager and/or agent removes all files created.</p>
</desc></func>
<func>
<name>get_values(Agent, Oids, ConfName) -&gt; SnmpReply</name>
<fsummary>Issues a synchronous snmp get request.</fsummary>
<type>
<v>Agent = agent_name()</v><v>Oids = oids()</v><v>ConfName = atom()</v><v>SnmpReply = snmpreply()</v></type>
<desc><marker id="get_values-3"/>

<p>Issues a synchronous snmp get request.</p>
</desc></func>
<func>
<name>get_next_values(Agent, Oids, ConfName) -&gt; SnmpReply</name>
<fsummary>Issues a synchronous snmp get next request.</fsummary>
<type>
<v>Agent = agent_name()</v><v>Oids = oids()</v><v>ConfName = atom()</v><v>SnmpReply = snmpreply()</v></type>
<desc><marker id="get_next_values-3"/>

<p>Issues a synchronous snmp get next request.</p>
</desc></func>
<func>
<name>set_values(Agent, VarsAndVals, ConfName, Config) -&gt; SnmpReply</name>
<fsummary>Issues a synchronous snmp set request.</fsummary>
<type>
<v>Agent = agent_name()</v><v>Oids = oids()</v><v>ConfName = atom()</v><v>Config = [{Key, Value}]</v><v>SnmpReply = snmpreply()</v></type>
<desc><marker id="set_values-4"/>

<p>Issues a synchronous snmp set request.</p>
</desc></func>
<func>
<name>set_info(Config) -&gt; [{Agent, OldVarsAndVals, NewVarsAndVals}]</name>
<fsummary>Returns a list of all successful set requests performed in
   the test case in reverse order.</fsummary>
<type>
<v>Config = [{Key, Value}]</v><v>Agent = agent_name()</v><v>OldVarsAndVals = varsandvals()</v><v>NewVarsAndVals = varsandvals()</v></type>
<desc><marker id="set_info-1"/>

<p>Returns a list of all successful set requests performed in
   the test case in reverse order. The list contains the involved
   user and agent, the value prior to the set and the new value. This
   is intended to facilitate the clean up in the end_per_testcase
   function i.e. the undoing of the set requests and its possible
   side-effects.</p>
</desc></func>
<func>
<name>register_users(ConfName, Users) -&gt; ok | {error, Reason}</name>
<fsummary>Register the manager entity (=user) responsible for specific agent(s).</fsummary>
<type>
<v>ConfName = atom()</v><v>Users = [user()]</v><v>Reason = term()</v></type>
<desc><marker id="register_users-2"/>

<p>Register the manager entity (=user) responsible for specific agent(s).
   Corresponds to making an entry in users.conf</p>
</desc></func>
<func>
<name>register_agents(ConfName, ManagedAgents) -&gt; ok | {error, Reason}</name>
<fsummary>Explicitly instruct the manager to handle this agent.</fsummary>
<type>
<v>ConfName = atom()</v><v>ManagedAgents = [agent()]</v><v>Reason = term()</v></type>
<desc><marker id="register_agents-2"/>

<p>Explicitly instruct the manager to handle this agent.
   Corresponds to making an entry in agents.conf</p>
</desc></func>
<func>
<name>register_usm_users(ConfName, UsmUsers) -&gt; ok | {error, Reason}</name>
<fsummary>Explicitly instruct the manager to handle this USM user.</fsummary>
<type>
<v>ConfName = atom()</v><v>UsmUsers = [usm_user()]</v><v>Reason = term()</v></type>
<desc><marker id="register_usm_users-2"/>

<p>Explicitly instruct the manager to handle this USM user.
   Corresponds to making an entry in usm.conf</p>
</desc></func>
<func>
<name>unregister_users(ConfName) -&gt; ok | {error, Reason}</name>
<fsummary>Removes information added when calling register_users/2.</fsummary>
<type>
<v>ConfName = atom()</v><v>Reason = term()</v></type>
<desc><marker id="unregister_users-1"/>

<p>Removes information added when calling register_users/2.</p>
</desc></func>
<func>
<name>unregister_agents(ConfName) -&gt; ok | {error, Reason}</name>
<fsummary> Removes information added when calling register_agents/2.</fsummary>
<type>
<v>ConfName = atom()</v><v>Reason = term()</v></type>
<desc><marker id="unregister_agents-1"/>

<p> Removes information added when calling register_agents/2.</p>
</desc></func>
<func>
<name>update_usm_users(ConfName, UsmUsers) -&gt; ok | {error, Reason}</name>
<fsummary> Alters information added when calling register_usm_users/2.</fsummary>
<type>
<v>ConfName = atom()</v><v>UsmUsers = usm_users()</v><v>Reason = term()</v></type>
<desc><marker id="update_usm_users-2"/>

<p> Alters information added when calling register_usm_users/2.</p>
</desc></func>
<func>
<name>load_mibs(Mibs) -&gt; ok | {error, Reason}</name>
<fsummary>Load the mibs into the agent 'snmp_master_agent'.</fsummary>
<type>
<v>Mibs = [MibName]</v><v>MibName = string()</v><v>Reason = term()</v></type>
<desc><marker id="load_mibs-1"/>

<p>Load the mibs into the agent 'snmp_master_agent'.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>