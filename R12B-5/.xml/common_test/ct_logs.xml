<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ct_logs</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ct_logs.xml</file></header>
<module>ct_logs</module>
<modulesummary>Logging functionality for Common Test Framework.</modulesummary>
<description>
<p>Logging functionality for Common Test Framework.</p>
  
   <p>This module implements
   </p><list>
   <item><p>Internal logging of activities in Common Test Framework</p></item>
   <item><p>Compilation of test results into index pages on several levels</p></item>
   </list><p>
   </p></description>
<funcs>
<func>
<name>init(Mode) -&gt; Result</name>
<fsummary>Initiate the logging mechanism (tool-internal use only).</fsummary>
<type>
<v>Mode = normal | interactive</v><v>Result = {StartTime, LogDir}</v><v>StartTime = term()</v><v>LogDir = string()</v></type>
<desc><marker id="init-1"/>

<p>Initiate the logging mechanism (tool-internal use only).</p>
  
   <p>This function is called by ct_util.erl when testing is
   started. A new directory named ct_run.&lt;timestamp&gt; is created
   and all logs are stored under this directory.</p>
  
</desc></func>
<func>
<name>close(How) -&gt; ok</name>
<fsummary>Create index pages with test results and close the CT Log
   (tool-internal use only).</fsummary>

<desc><marker id="close-1"/>

<p>Create index pages with test results and close the CT Log
   (tool-internal use only).</p>
</desc></func>
<func>
<name>set_stylesheet(TC, SSFile) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="set_stylesheet-2"/>
 </desc></func>
<func>
<name>clear_stylesheet(TC) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="clear_stylesheet-1"/>
 </desc></func>
<func>
<name>get_log_dir() -&gt; {ok, Dir} | {error, Reason}</name>
<fsummary> </fsummary>

<desc><marker id="get_log_dir-0"/>
 </desc></func>
<func>
<name>make_last_run_index() -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="make_last_run_index-0"/>
 </desc></func>
<func>
<name>init_tc() -&gt; ok</name>
<fsummary>Test case initiation (tool-internal use only).</fsummary>

<desc><marker id="init_tc-0"/>

<p>Test case initiation (tool-internal use only).</p>
  
   <p>This function is called by ct_framework:init_tc/3</p>
</desc></func>
<func>
<name>end_tc() -&gt; ok | {error, Reason}</name>
<fsummary>Test case clean up (tool-internal use only).</fsummary>

<desc><marker id="end_tc-0"/>

<p>Test case clean up (tool-internal use only).</p>
  
   <p>This function is called by ct_framework:end_tc/3</p>
</desc></func>
<func>
<name>log(Heading, Format, Args) -&gt; ok</name>
<fsummary>Log internal activity (tool-internal use only).</fsummary>

<desc><marker id="log-3"/>

<p>Log internal activity (tool-internal use only).</p>
  
   <p>This function writes an entry to the currently active log,
   i.e. either the CT log or a test case log.</p>
  
   <p><c>Heading</c> is a short string indicating what type of
   activity it is. <c>Format</c> and <c>Args</c> is the
   data to log (as in <c>io:format(Format,Args)</c>).</p>
</desc></func>
<func>
<name>start_log(Heading) -&gt; ok</name>
<fsummary>Starts the logging of an activity (tool-internal use only).</fsummary>

<desc><marker id="start_log-1"/>

<p>Starts the logging of an activity (tool-internal use only).</p>
  
   <p>This function must be used in combination with
   <c>cont_log/2</c> and <c>end_log/0</c>. The intention
   is to call <c>start_log</c> once, then <c>cont_log</c>
   any number of times and finally <c>end_log</c> once.</p>
  
   <p>For information about the parameters, see <c>log/3</c>.</p>
  
<p><em>See also:</em> <seealso marker="#cont_log-2">cont_log/2</seealso>, <seealso marker="#end_log-0">end_log/0</seealso>, <seealso marker="#log-3">log/3</seealso>.</p>
</desc></func>
<func>
<name>cont_log(Format, Args) -&gt; ok</name>
<fsummary>Adds information about an activity (tool-internal use only).</fsummary>

<desc><marker id="cont_log-2"/>

<p>Adds information about an activity (tool-internal use only).
  </p>
<p><em>See also:</em> <seealso marker="#end_log-0">end_log/0</seealso>, <seealso marker="#start_log-1">start_log/1</seealso>.</p>
</desc></func>
<func>
<name>end_log() -&gt; ok</name>
<fsummary>Ends the logging of an activity (tool-internal use only).</fsummary>

<desc><marker id="end_log-0"/>

<p>Ends the logging of an activity (tool-internal use only).
  </p>
<p><em>See also:</em> <seealso marker="#cont_log-2">cont_log/2</seealso>, <seealso marker="#start_log-1">start_log/1</seealso>.</p>
</desc></func>
<func>
<name>add_external_logs(Logs) -&gt; ok</name>
<fsummary>Print a link to each given Log in the test case   
log.</fsummary>
<type>
<v>Logs = [Log]</v><v>Log = string()</v></type>
<desc><marker id="add_external_logs-1"/>

<p>Print a link to each given <c>Log</c> in the test case   
log.</p>
  
   <p>The given <c>Logs</c> must exist in the priv dir of the
   calling test suite.</p>
</desc></func>
<func>
<name>add_link(Heading, File, Type) -&gt; ok</name>
<fsummary>Print a link to a given file stored in the priv_dir of the
   calling test suite.</fsummary>
<type>
<v>Heading = string()</v><v>File = string()</v><v>Type = string()</v></type>
<desc><marker id="add_link-3"/>

<p>Print a link to a given file stored in the priv_dir of the
   calling test suite.</p>
</desc></func>
<func>
<name>tc_log(Category, Format, Args) -&gt; ok</name>
<fsummary>Printout from a testcase.</fsummary>
<type>
<v>Category = atom()</v><v>Format = string()</v><v>Args = list()</v></type>
<desc><marker id="tc_log-3"/>

<p>Printout from a testcase.</p>
  
   <p>This function is called by <c>ct</c> when logging
   stuff directly from a testcase (i.e. not from within the CT
   framework).</p>
</desc></func>
<func>
<name>tc_print(Category, Format, Args) -&gt; ok</name>
<fsummary>Console printout from a testcase.</fsummary>
<type>
<v>Category = atom()</v><v>Format = string()</v><v>Args = list()</v></type>
<desc><marker id="tc_print-3"/>

<p>Console printout from a testcase.</p>
  
   <p>This function is called by <c>ct</c> when printing
   stuff a testcase on the user console.</p>
</desc></func>
<func>
<name>tc_pal(Category, Format, Args) -&gt; ok</name>
<fsummary>Print and log from a testcase.</fsummary>
<type>
<v>Category = atom()</v><v>Format = string()</v><v>Args = list()</v></type>
<desc><marker id="tc_pal-3"/>

<p>Print and log from a testcase.</p>
  
   <p>This function is called by <c>ct</c> when logging
   stuff directly from a testcase. The info is written both in the
   log and on the console.</p>
</desc></func>
<func>
<name>make_all_runs_index(When) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="make_all_runs_index-1"/>
 </desc></func>
<func>
<name>make_all_suites_index(When) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="make_all_suites_index-1"/>
 </desc></func>
<func>
<name>simulate() -&gt; pid()</name>
<fsummary>Simulate the logger process.</fsummary>

<desc><marker id="simulate-0"/>

<p>Simulate the logger process.</p>
  
   <p>Simulate the logger process - for use when testing code using
   ct_logs logging mechanism without using the ct
   environment. (E.g. when testing code with ts)</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>