<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>egd</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>egd.xml</file></header>
<module>egd</module>
<modulesummary>egd - erlang graphical drawer.</modulesummary>
<description>
<p>egd - erlang graphical drawer</p>
 
 </description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>color()</c></tag>
<item><marker id="type-color"/> </item>
<tag><c>egd_image()</c></tag>
<item><marker id="type-egd_image"/> </item>
<tag><c>point() = {integer(), integer()}</c></tag>
<item><marker id="type-point"/> </item>
<tag><c>render_option() = {render_engine, opaque} | {render_engine, alpha}</c></tag>
<item><marker id="type-render_option"/> </item>
</taglist></section>
<funcs>
<func>
<name>create(Width::integer(), Height::integer()) -&gt; egd_image()</name>
<fsummary>Creates an image area and returns its reference.</fsummary>

<desc><marker id="create-2"/>

<p>Creates an image area and returns its reference.</p>
</desc></func>
<func>
<name>destroy(Image::egd_image()) -&gt; ok</name>
<fsummary>Destroys the image.</fsummary>

<desc><marker id="destroy-1"/>

<p>Destroys the image.</p>
</desc></func>
<func>
<name>render(Image::egd_image()) -&gt; binary()</name>
<fsummary>Equivalent to render(Image, png, [{render_engine, opaque}]).
</fsummary>

<desc><marker id="render-1"/>
<p>Equivalent to <seealso marker="#render-3">render(Image, png, [{render_engine, opaque}])</seealso>.</p>
</desc></func>
<func>
<name>render(Image::egd_image(), Type::png | raw_bitmap) -&gt; binary()</name>
<fsummary>Equivalent to render(Image, Type, [{render_engine, opaque}]).
</fsummary>

<desc><marker id="render-2"/>
<p>Equivalent to <seealso marker="#render-3">render(Image, Type, [{render_engine, opaque}])</seealso>.</p>
</desc></func>
<func>
<name>render(Image::egd_image(), Type::png | raw_bitmap, Options::[render_option()]) -&gt; binary()</name>
<fsummary>Renders a binary from the primitives specified by egd_image().</fsummary>

<desc><marker id="render-3"/>

<p>Renders a binary from the primitives specified by egd_image(). The
  	binary can either be a raw bitmap with rgb tripplets or a binary in png
 	format.</p>
</desc></func>
<func>
<name>line(Image::egd_image(), P1::point(), P2::point, Color::color()) -&gt; ok</name>
<fsummary>Creates a line object from P1 to P2 in the image.</fsummary>

<desc><marker id="line-4"/>

<p>Creates a line object from P1 to P2 in the image.</p>
</desc></func>
<func>
<name>color(Color::{byte(), byte(), byte()}) -&gt; color()</name>
<fsummary>Creates a color reference.</fsummary>

<desc><marker id="color-1"/>

<p>Creates a color reference.</p>
</desc></func>
<func>
<name>text(Image::egd_image(), P::point(), Font::font(), Text::string(), Color::color()) -&gt; ok</name>
<fsummary>Creates a text object.</fsummary>

<desc><marker id="text-5"/>

<p>Creates a text object.</p>
</desc></func>
<func>
<name>rectangle(Image::egd_image(), P1::point(), P2::point(), Color::color()) -&gt; ok</name>
<fsummary>Creates a rectangle object.</fsummary>

<desc><marker id="rectangle-4"/>

<p>Creates a rectangle object.</p>
</desc></func>
<func>
<name>filledRectangle(Image::egd_image(), P1::point(), P2::point(), Color::color()) -&gt; ok</name>
<fsummary>Creates a filled rectangle object.</fsummary>

<desc><marker id="filledRectangle-4"/>

<p>Creates a filled rectangle object.</p>
</desc></func>
<func>
<name>filledEllipse(Image::egd_image(), P1::point(), P2::point(), Color::color()) -&gt; ok</name>
<fsummary>Creates a filled ellipse object.</fsummary>

<desc><marker id="filledEllipse-4"/>

<p>Creates a filled ellipse object.</p>
</desc></func>
<func>
<name>save(Binary::binary(), Filename::string()) -&gt; ok</name>
<fsummary>Saves the binary to file.</fsummary>

<desc><marker id="save-2"/>

<p>Saves the binary to file.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>