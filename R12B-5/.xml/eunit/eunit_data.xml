<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>eunit_data</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>eunit_data.xml</file></header>
<module>eunit_data</module>
<modulesummary>Interpretation of symbolic test representation.</modulesummary>
<description>
<p>Interpretation of symbolic test representation</p></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>appName() = atom()</c></tag>
<item><marker id="type-appName"/> </item>
<tag><c>fileName() = string()</c></tag>
<item><marker id="type-fileName"/> </item>
<tag><c>functionName() = atom()</c></tag>
<item><marker id="type-functionName"/> </item>
<tag><c>lineNumber() = integer()</c></tag>
<item><marker id="type-lineNumber"/>
<p>Proper line numbers are always &gt;= 1.
 </p>
</item>
<tag><c>moduleName() = atom()</c></tag>
<item><marker id="type-moduleName"/> </item>
<tag><c>testId() = [integer()]</c></tag>
<item><marker id="type-testId"/> </item>
<tag><c>testInfoList() = [Entry]</c></tag>
<item><marker id="type-testInfoList"/>
<list><item><c>Entry = {item, testId(), Description, testName()} | {group, testId(), Description, testInfoList}</c></item><item><c>Description = string()</c></item></list> </item>
<tag><c>testItem() = #test{} | #group{}</c></tag>
<item><marker id="type-testItem"/> </item>
<tag><c>testIterator()</c></tag>
<item><marker id="type-testIterator"/> </item>
<tag><c>testName() = {moduleName(), functionName()} | {moduleName(), functionName(), lineNumber()}</c></tag>
<item><marker id="type-testName"/> </item>
<tag><c>tests() = SimpleTest | [tests()] | moduleName() | {module, moduleName()} | {application, appName()} | {application, appName(), [term()]} | fileName() | {file, fileName()} | {string(), tests()} | {generator, () -&gt; tests()} | {generator, M::moduleName(), F::functionName()} | {spawn, tests()} | {spawn, Node::atom(), tests()} | {timeout, T::number(), tests()} | {inorder, tests()} | {inparallel, tests()} | {inparallel, N::integer(), tests()} | {with, X::any(), [AbstractTestFunction]} | {setup, Where::local | spawn | {spawn, Node::atom()}, Setup::() -&gt; R::any(), Cleanup::(R::any()) -&gt; any(), tests() | Instantiator} | {setup, Setup, Cleanup, tests() | Instantiator} | {setup, Where, Setup, tests() | Instantiator} | {setup, Setup, tests() | Instantiator} | {foreach, Where::local | spawn | {spawn, Node::atom()}, Setup::() -&gt; R::any(), Cleanup::(R::any()) -&gt; any(), [tests() | Instantiator]} | {foreach, Setup, Cleanup, [tests() | Instantiator]} | {foreach, Where, Setup, [tests() | Instantiator]} | {foreach, Setup, [tests() | Instantiator]} | {foreachx, Where::local | spawn | {spawn, Node::atom()}, SetupX::(X::any()) -&gt; R::any(), CleanupX::(X::any(), R::any()) -&gt; any(), Pairs::[{X::any(), (X::any(), R::any()) -&gt; tests()}]} | {foreachx, SetupX, CleanupX, Pairs} | {foreachx, Where, SetupX, Pairs} | {foreachx, SetupX, Pairs} | {node, Node::atom(), tests() | Instantiator} | {node, Node, Args::string(), tests() | Instantiator}</c></tag>
<item><marker id="type-tests"/>
<list><item><c>SimpleTest = TestFunction | {Line::integer(), SimpleTest}</c></item><item><c>TestFunction = () -&gt; any() | {M::moduleName(), F::functionName()}</c></item></list>
<p>AbstractTestFunction = (X::any()) -&gt; any()</p>
 
  <p>Instantiator = (R::any()) -&gt; tests()               
| {with, [AbstractTestFunction]}</p>
 
  <p>Note that <c>{string(), ...}</c> is a short-hand for <c>{string(), {...}}</c>
  if the tuple contains more than two elements.
 </p>
</item>
</taglist></section>
<funcs>
<func>
<name>iter_init(Tests::tests(), ParentID::[integer()]) -&gt; testIterator()</name>
<fsummary> </fsummary>

<desc><marker id="iter_init-2"/>
 </desc></func>
<func>
<name>iter_id(Iter::testIterator()) -&gt; [integer()]</name>
<fsummary> </fsummary>

<desc><marker id="iter_id-1"/>
 </desc></func>
<func>
<name>iter_next(I::testIterator(), H::Handler) -&gt; none | {testItem(), testIterator()}</name>
<fsummary> </fsummary>
<type>
<v>Handler = (term()) -&gt; term()</v></type>
<desc><marker id="iter_next-2"/>
 </desc></func>
<func>
<name>iter_prev(I::testIterator(), H::Handler) -&gt; none | {testItem(), testIterator()}</name>
<fsummary> </fsummary>
<type>
<v>Handler = (term()) -&gt; term()</v></type>
<desc><marker id="iter_prev-2"/>
 </desc></func>
<func>
<name>enter_context(Tests::#context{}, I::Instantiate, F::Callback) -&gt; any()</name>
<fsummary> </fsummary>
<type>
<v>Instantiate = (any()) -&gt; tests()</v><v>Callback = (tests()) -&gt; any()</v></type>
<desc><marker id="enter_context-3"/>
 </desc></func>
<func>
<name>list(T) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="list-1"/>
 </desc></func>
<func>
<name>list_size(Es) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="list_size-1"/>
 </desc></func></funcs>
<section><title>See also</title><p><seealso marker="eunit">eunit</seealso></p></section>
<authors>

<aname>Richard Carlsson</aname>
<email>richardc@it.uu.se</email></authors></erlref>