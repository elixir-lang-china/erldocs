<module name="cpu_sup">
<type>
  <name>util_cpus</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-util_cpus">util_cpus()</marker> = all | integer() | [integer()]</typehead></typedecl>
</type>
<type>
  <name>util_desc</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-util_desc">util_desc()</marker> = {<seealso marker="#type-util_cpus">util_cpus()</seealso>, <seealso marker="#type-util_value">util_value()</seealso>, <seealso marker="#type-util_value">util_value()</seealso>, []}</typehead></typedecl>
</type>
<type>
  <name>util_state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-util_state">util_state()</marker> = user | nice_user | kernel | wait | idle</typehead></typedecl>
</type>
<type>
  <name>util_value</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-util_value">util_value()</marker> = {<seealso marker="#type-util_state">util_state()</seealso>, float()} | float()</typehead></typedecl>
</type>
<spec>
  <name>avg1</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>avg1() -&gt; integer() | {error, any()}</head></clause>
  </contract>
</spec>
<spec>
  <name>avg15</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>avg15() -&gt; integer() | {error, any()}</head></clause>
  </contract>
</spec>
<spec>
  <name>avg5</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>avg5() -&gt; integer() | {error, any()}</head></clause>
  </contract>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>dummy_reply</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>nprocs</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>nprocs() -&gt; integer() | {error, any()}</head></clause>
  </contract>
</spec>
<spec>
  <name>ping</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>start</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>stop</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>util</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>util() -&gt; float()</head></clause>
  </contract>
</spec>
<spec>
  <name>util</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>util(Args :: [detailed | per_cpu]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-util_desc">util_desc()</seealso> | [<seealso marker="#type-util_desc">util_desc()</seealso>] | {error, any()}</head></clause>
  </contract>
  <anno>Args</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:16:10.</timestamp>
</module>