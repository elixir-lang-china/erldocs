<module name="edoc_specs">
<type>
  <name>entries</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-entries">entries()</marker> = [<seealso marker="#type-entry">entry()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>entry</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-entry">entry()</marker> = #entry{}</typehead></typedecl>
</type>
<type>
  <name>module_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-module_info">module_info()</marker> = #module{}</typehead></typedecl>
</type>
<type>
  <name>syntaxTree</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-syntaxTree">syntaxTree()</marker> = <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></typehead></typedecl>
</type>
<type>
  <name>tag_kind</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-tag_kind">tag_kind()</marker> = type | spec | unknown</typehead></typedecl>
</type>
<spec>
  <name>add_data</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>add_data(Entries :: <seealso marker="#type-entries">entries()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Options :: <seealso marker="proplists#type-proplist">proplists:proplist()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>File :: <seealso marker="file#type-filename">file:filename()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Module :: <seealso marker="#type-module_info">module_info()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-entries">entries()</seealso></head></clause>
  </contract>
  <anno>Entries</anno>
  <anno>File</anno>
  <anno>Module</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>docs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>docs(Forms :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CommentFun :: fun(([<seealso marker="#type-syntaxTree">syntaxTree()</seealso>], Line :: term()) -&gt; #tag{})) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>dict()</head></clause>
  </contract>
  <anno>CommentFun</anno>
  <anno>Forms</anno>
  <anno>Line</anno>
</spec>
<spec>
  <name>dummy_spec</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>dummy_spec(Form :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; #tag{}</head></clause>
  </contract>
  <anno>Form</anno>
</spec>
<spec>
  <name>is_tag</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_tag(Tag :: atom()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Tag</anno>
</spec>
<spec>
  <name>spec</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spec(Form :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, ClauseN :: integer() &gt;= 1) -&gt; #tag{}</head></clause>
  </contract>
  <anno>ClauseN</anno>
  <anno>Form</anno>
</spec>
<spec>
  <name>tag</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tag(Tag :: atom()) -&gt; <seealso marker="#type-tag_kind">tag_kind()</seealso></head></clause>
  </contract>
  <anno>Tag</anno>
</spec>
<spec>
  <name>type</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>type(Form :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, TypeDocs :: dict()) -&gt; #tag{}</head></clause>
  </contract>
  <anno>Form</anno>
  <anno>TypeDocs</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:16:56.</timestamp>
</module>