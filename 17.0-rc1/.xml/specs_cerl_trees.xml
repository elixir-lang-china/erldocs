<module name="cerl_trees">
<spec>
  <name>depth</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>depth(T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>fold</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fold(F :: fun((<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, term()) -&gt; term()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>free_variables</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>free_variables(T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt; [<seealso marker="cerl#type-var_name">cerl:var_name()</seealso>]</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>get_label</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_label(T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt; top | integer()</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>label</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>label(T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt; {<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, integer()}</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>label</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>label(T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, N :: integer()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, integer()}</head></clause>
  </contract>
  <anno>N</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(F :: fun((<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt; <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>), T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="cerl#type-cerl">cerl:cerl()</seealso></head></clause>
  </contract>
  <anno>F</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>mapfold</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>mapfold(F :: fun((<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, term()) -&gt; {<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, term()}),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S0 :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, term()}</head></clause>
  </contract>
  <anno>F</anno>
  <anno>S0</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>variables</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>variables(T :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt; [<seealso marker="cerl#type-var_name">cerl:var_name()</seealso>]</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:17:29.</timestamp>
</module>