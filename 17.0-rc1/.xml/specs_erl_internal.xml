<module name="erl_internal">
<spec>
  <name>arith_op</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>arith_op(OpName, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>OpName</typename><string>OpName = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>OpName</anno>
</spec>
<spec>
  <name>bif</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bif(Name, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>bif</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bif(Mod :: atom(), Name :: atom(), Arity :: arity()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Mod</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>bool_op</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bool_op(OpName, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>OpName</typename><string>OpName = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>OpName</anno>
</spec>
<spec>
  <name>comp_op</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>comp_op(OpName, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>OpName</typename><string>OpName = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>OpName</anno>
</spec>
<spec>
  <name>guard_bif</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>guard_bif(Name, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>list_op</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>list_op(OpName, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>OpName</typename><string>OpName = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>OpName</anno>
</spec>
<spec>
  <name>new_type_test</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new_type_test(Name :: atom(), Arity :: arity()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>old_bif</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>old_bif(Name :: atom(), Arity :: arity()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>old_type_test</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>old_type_test(Name :: atom(), Arity :: arity()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>op_type</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>op_type(OpName, Arity) -&gt; Type</head>
      <guard>
        <subtype><typename>OpName</typename><string>OpName = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
        <subtype><typename>Type</typename><string>Type = arith | bool | comp | list | send</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>OpName</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>send_op</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send_op(OpName, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>OpName</typename><string>OpName = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>OpName</anno>
</spec>
<spec>
  <name>type_test</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>type_test(Name, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Name</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:15:48.</timestamp>
</module>