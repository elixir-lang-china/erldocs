<module name="gb_trees">
<type>
  <name>iter</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-iter">iter()</marker></typehead></typedecl>
</type>
<spec>
  <name>balance</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>balance(Tree1) -&gt; Tree2</head>
      <guard>
        <subtype><typename>Tree1</typename><string>Tree1 = Tree2 = gb_tree()</string></subtype>
        <subtype><typename>Tree2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Tree1</anno>
  <anno>Tree2</anno>
</spec>
<spec>
  <name>delete</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete(Key, Tree1) -&gt; Tree2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Tree1</typename><string>Tree1 = Tree2 = gb_tree()</string></subtype>
        <subtype><typename>Tree2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree1</anno>
  <anno>Tree2</anno>
</spec>
<spec>
  <name>delete_any</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete_any(Key, Tree1) -&gt; Tree2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Tree1</typename><string>Tree1 = Tree2 = gb_tree()</string></subtype>
        <subtype><typename>Tree2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree1</anno>
  <anno>Tree2</anno>
</spec>
<spec>
  <name>empty</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>empty() -&gt; gb_tree()</head></clause>
  </contract>
</spec>
<spec>
  <name>enter</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>enter(Key, Val, Tree1) -&gt; Tree2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string/></subtype>
        <subtype><typename>Tree1</typename><string>Tree1 = Tree2 = gb_tree()</string></subtype>
        <subtype><typename>Tree2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree1</anno>
  <anno>Tree2</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>from_orddict</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_orddict(List) -&gt; Tree</head>
      <guard>
        <subtype><typename>List</typename><string>List = [{Key :: term(), Val :: term()}]</string></subtype>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
  <anno>Tree</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get(Key, Tree) -&gt; Val</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
        <subtype><typename>Val</typename><string>Val = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>insert</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>insert(Key, Val, Tree1) -&gt; Tree2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string/></subtype>
        <subtype><typename>Tree1</typename><string>Tree1 = Tree2 = gb_tree()</string></subtype>
        <subtype><typename>Tree2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree1</anno>
  <anno>Tree2</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>is_defined</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_defined(Key, Tree) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>is_empty</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_empty(Tree) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>iterator</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>iterator(Tree) -&gt; Iter</head>
      <guard>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
        <subtype><typename>Iter</typename><string>Iter = <seealso marker="#type-iter">iter()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Iter</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>keys</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>keys(Tree) -&gt; [Key]</head>
      <guard>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>largest</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>largest(Tree) -&gt; {Key, Val}</head>
      <guard>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>lookup</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup(Key, Tree) -&gt; none | {value, Val}</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string/></subtype>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(Function, Tree1) -&gt; Tree2</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = fun((K :: term(), V1 :: term()) -&gt; V2 :: term())</string></subtype>
        <subtype><typename>Tree1</typename><string>Tree1 = Tree2 = gb_tree()</string></subtype>
        <subtype><typename>Tree2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Function</anno>
  <anno>K</anno>
  <anno>Tree1</anno>
  <anno>Tree2</anno>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>next</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>next(Iter1) -&gt; none | {Key, Val, Iter2}</head>
      <guard>
        <subtype><typename>Iter1</typename><string>Iter1 = Iter2 = <seealso marker="#type-iter">iter()</seealso></string></subtype>
        <subtype><typename>Iter2</typename><string/></subtype>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Iter1</anno>
  <anno>Iter2</anno>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Tree) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>smallest</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>smallest(Tree) -&gt; {Key, Val}</head>
      <guard>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>take_largest</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>take_largest(Tree1) -&gt; {Key, Val, Tree2}</head>
      <guard>
        <subtype><typename>Tree1</typename><string>Tree1 = Tree2 = gb_tree()</string></subtype>
        <subtype><typename>Tree2</typename><string/></subtype>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree1</anno>
  <anno>Tree2</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>take_smallest</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>take_smallest(Tree1) -&gt; {Key, Val, Tree2}</head>
      <guard>
        <subtype><typename>Tree1</typename><string>Tree1 = Tree2 = gb_tree()</string></subtype>
        <subtype><typename>Tree2</typename><string/></subtype>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree1</anno>
  <anno>Tree2</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_list(Tree) -&gt; [{Key, Val}]</head>
      <guard>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>update</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update(Key, Val, Tree1) -&gt; Tree2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string/></subtype>
        <subtype><typename>Tree1</typename><string>Tree1 = Tree2 = gb_tree()</string></subtype>
        <subtype><typename>Tree2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tree1</anno>
  <anno>Tree2</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>values</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>values(Tree) -&gt; [Val]</head>
      <guard>
        <subtype><typename>Tree</typename><string>Tree = gb_tree()</string></subtype>
        <subtype><typename>Val</typename><string>Val = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Tree</anno>
  <anno>Val</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:15:49.</timestamp>
</module>