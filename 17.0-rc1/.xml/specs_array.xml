<module name="array">
<type>
  <name>array_indx</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-array_indx">array_indx()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>array_opt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-array_opt">array_opt()</marker> = {fixed, boolean()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| fixed<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {default, Value :: term()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {size, N :: integer() &gt;= 0}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| (N :: integer() &gt;= 0)</typehead></typedecl>
  <anno>N</anno>
  <anno>Value</anno>
</type>
<type>
  <name>array_opts</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-array_opts">array_opts()</marker> = <seealso marker="#type-array_opt">array_opt()</seealso> | [<seealso marker="#type-array_opt">array_opt()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>indx_pair</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-indx_pair">indx_pair()</marker> = {Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: term()}</typehead></typedecl>
  <anno>Index</anno>
  <anno>Value</anno>
</type>
<type>
  <name>indx_pairs</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-indx_pairs">indx_pairs()</marker> = [<seealso marker="#type-indx_pair">indx_pair()</seealso>]</typehead></typedecl>
</type>
<spec>
  <name>default</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>default(Array :: array()) -&gt; term()</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>fix</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fix(Array :: array()) -&gt; array()</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>foldl</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldl(Function, InitialAcc :: A, Array :: array()) -&gt; B</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: term(), Acc :: A) -&gt; B)</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>Acc</anno>
  <anno>Array</anno>
  <anno>B</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>InitialAcc</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>foldr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldr(Function, InitialAcc :: A, Array :: array()) -&gt; B</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: term(), Acc :: A) -&gt; B)</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>Acc</anno>
  <anno>Array</anno>
  <anno>B</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>InitialAcc</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>from_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_list(List :: list()) -&gt; array()</head></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>from_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>from_list(List :: list(), Default :: term()) -&gt; array()</head></clause>
  </contract>
  <anno>Default</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>from_orddict</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_orddict(Orddict :: <seealso marker="#type-indx_pairs">indx_pairs()</seealso>) -&gt; array()</head></clause>
  </contract>
  <anno>Orddict</anno>
</spec>
<spec>
  <name>from_orddict</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>from_orddict(Orddict :: <seealso marker="#type-indx_pairs">indx_pairs()</seealso>, Default :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>array()</head></clause>
  </contract>
  <anno>Default</anno>
  <anno>Orddict</anno>
</spec>
<spec>
  <name>get</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get(I :: <seealso marker="#type-array_indx">array_indx()</seealso>, Array :: array()) -&gt; term()</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>I</anno>
</spec>
<spec>
  <name>is_array</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_array(X :: term()) -&gt; boolean()</head></clause>
  </contract>
  <anno>X</anno>
</spec>
<spec>
  <name>is_fix</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_fix(Array :: array()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(Function, Array :: array()) -&gt; array()</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: term()) -&gt; term())</string></subtype>
      </guard></clause>
  </contract>
  <anno>Array</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; array()</head></clause>
  </contract>
</spec>
<spec>
  <name>new</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new(Options :: <seealso marker="#type-array_opts">array_opts()</seealso>) -&gt; array()</head></clause>
  </contract>
  <anno>Options</anno>
</spec>
<spec>
  <name>new</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new(Size :: integer() &gt;= 0, Options :: <seealso marker="#type-array_opts">array_opts()</seealso>) -&gt; array()</head></clause>
  </contract>
  <anno>Options</anno>
  <anno>Size</anno>
</spec>
<spec>
  <name>relax</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>relax(Array :: array()) -&gt; array()</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>reset</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reset(I :: <seealso marker="#type-array_indx">array_indx()</seealso>, Array :: array()) -&gt; array()</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>I</anno>
</spec>
<spec>
  <name>resize</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>resize(Array :: array()) -&gt; array()</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>resize</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>resize(Size :: integer() &gt;= 0, Array :: array()) -&gt; array()</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Size</anno>
</spec>
<spec>
  <name>set</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>set(I :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: term(), Array :: array()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>array()</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>I</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Array :: array()) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>sparse_foldl</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sparse_foldl(Function, InitialAcc :: A, Array :: array()) -&gt; B</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: term(), Acc :: A) -&gt; B)</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>Acc</anno>
  <anno>Array</anno>
  <anno>B</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>InitialAcc</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>sparse_foldr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sparse_foldr(Function, InitialAcc :: A, Array :: array()) -&gt; B</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: term(), Acc :: A) -&gt; B)</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>Acc</anno>
  <anno>Array</anno>
  <anno>B</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>InitialAcc</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>sparse_map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sparse_map(Function, Array :: array()) -&gt; array()</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: term()) -&gt; term())</string></subtype>
      </guard></clause>
  </contract>
  <anno>Array</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>sparse_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sparse_size(Array :: array()) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>sparse_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sparse_to_list(Array :: array()) -&gt; list()</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>sparse_to_orddict</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sparse_to_orddict(Array :: array()) -&gt; <seealso marker="#type-indx_pairs">indx_pairs()</seealso></head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_list(Array :: array()) -&gt; list()</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>to_orddict</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_orddict(Array :: array()) -&gt; <seealso marker="#type-indx_pairs">indx_pairs()</seealso></head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:15:47.</timestamp>
</module>