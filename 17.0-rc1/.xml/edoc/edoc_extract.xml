<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>edoc_extract</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>edoc_extract.xml</file></header>
<module>edoc_extract</module>
<modulesummary>EDoc documentation extraction.</modulesummary>
<description>
<p>EDoc documentation extraction.</p></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>edoc_env() = edoc_env() (see module edoc_lib)</c></tag>
<item><marker id="type-edoc_env"/> </item>
<tag><c>t() = t1()</c></tag>
<item><marker id="type-t"/>
<p>Some docs of t/0;
    Further docs of t/0.
  The same thing using -type:
    -type t() :: t1(). % Some docs of t/0;
    Further docs of t/0.</p>
</item>
</taglist></section>
<funcs>
<func>
<name>source(File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ModuleName, edoc_module() (see module edoc)}</name>
<fsummary>Like source/5, but reads the syntax tree and the
  comments from the specified file.</fsummary>
<type>
<v>ModuleName = atom()</v><v>[term()]</v></type>
<desc><marker id="source-3"/>

<p>Like <seealso marker="#source-5">source/5</seealso>, but reads the syntax tree and the
  comments from the specified file.
 </p>
<p><em>See also:</em> <seealso marker="#source-4">source/4</seealso>, <seealso marker="edoc#read_comments-2">edoc:read_comments/2</seealso>, <seealso marker="edoc#read_source-2">edoc:read_source/2</seealso>.</p>
</desc></func>
<func>
<name>source(Forms, Comments::[comment() (see module edoc)], File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ModuleName, edoc_module() (see module edoc)}</name>
<fsummary>Like source/4, but first inserts the given comments in
  the syntax trees.</fsummary>
<type>
<v>Forms = syntaxTree() | [syntaxTree()]</v><v>ModuleName = atom()</v></type>
<desc><marker id="source-5"/>

<p>Like <seealso marker="#source-4">source/4</seealso>, but first inserts the given comments in
  the syntax trees. The syntax trees must contain valid position
  information. (Cf. <seealso marker="edoc#read_comments-2">edoc:read_comments/2</seealso>.)
 </p>
<p><em>See also:</em> <seealso marker="http://www.erlang.org/edoc/doc/syntax_tools/doc/erl_recomment.xml">//syntax_tools/erl_recomment</seealso>, <seealso marker="#source-3">source/3</seealso>, <seealso marker="#source-4">source/4</seealso>, <seealso marker="edoc#read_comments-2">edoc:read_comments/2</seealso>, <seealso marker="edoc#read_source-2">edoc:read_source/2</seealso>.</p>
</desc></func>
<func>
<name>source(Forms, File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ModuleName, edoc_module() (see module edoc)}</name>
<fsummary>Extracts EDoc documentation from commented source code syntax
  trees.</fsummary>
<type>
<v>Forms = syntaxTree() | [syntaxTree()]</v><v>ModuleName = atom()</v></type>
<desc><marker id="source-4"/>

<p>Extracts EDoc documentation from commented source code syntax
  trees. The given <c>Forms</c> must be a single syntax tree of
  type <c>form_list</c>, or a list of syntax trees representing
  "program forms" (cf. <seealso marker="edoc#read_source-2">edoc:read_source/2</seealso>.
  <c>Env</c> is an environment created by <seealso marker="edoc_lib#get_doc_env-4">edoc_lib:get_doc_env/4</seealso>. The <c>File</c> argument is used for  
error reporting and output file name generation only.</p>
 
  <p>See <seealso marker="edoc#get_doc-2">edoc:get_doc/2</seealso> for descriptions of the <c>def</c>,
  <c>hidden</c>, <c>private</c>, and <c>todo</c> options.
 </p>
<p><em>See also:</em> <seealso marker="http://www.erlang.org/edoc/doc/syntax_tools/doc/erl_recomment.xml">//syntax_tools/erl_recomment</seealso>, <seealso marker="#source-5">source/5</seealso>, <seealso marker="edoc#read_comments-2">edoc:read_comments/2</seealso>, <seealso marker="edoc#read_source-2">edoc:read_source/2</seealso>.</p>
</desc></func>
<func>
<name>header(File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ok, Tags} | {error, Reason}</name>
<fsummary>Similar to header/5, but reads the syntax tree and the
  comments from the specified file.</fsummary>
<type>
<v>Tags = [term()]</v><v>Reason = term()</v></type>
<desc><marker id="header-3"/>

<p>Similar to <seealso marker="#header-5">header/5</seealso>, but reads the syntax tree and the
  comments from the specified file.
 </p>
<p><em>See also:</em> <seealso marker="#header-4">header/4</seealso>, <seealso marker="edoc#read_comments-2">edoc:read_comments/2</seealso>, <seealso marker="edoc#read_source-2">edoc:read_source/2</seealso>.</p>
</desc></func>
<func>
<name>header(Forms, Comments::[comment() (see module edoc)], File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ok, Tags} | {error, Reason}</name>
<fsummary>Similar to header/4, but first inserts the given
  comments in the syntax trees.</fsummary>
<type>
<v>Forms = syntaxTree() | [syntaxTree()]</v><v>Tags = [term()]</v><v>Reason = term()</v></type>
<desc><marker id="header-5"/>

<p>Similar to <seealso marker="#header-4">header/4</seealso>, but first inserts the given
  comments in the syntax trees. The syntax trees must contain valid
  position information. (Cf. <seealso marker="edoc#read_comments-2">edoc:read_comments/2</seealso>.)
 </p>
<p><em>See also:</em> <seealso marker="http://www.erlang.org/edoc/doc/syntax_tools/doc/erl_recomment.xml">//syntax_tools/erl_recomment</seealso>, <seealso marker="#header-3">header/3</seealso>, <seealso marker="#header-4">header/4</seealso>.</p>
</desc></func>
<func>
<name>header(Forms, File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ok, Tags} | {error, Reason}</name>
<fsummary>Extracts EDoc documentation from commented header file syntax
  trees.</fsummary>
<type>
<v>Forms = syntaxTree() | [syntaxTree()]</v><v>Tags = [term()]</v><v>Reason = term()</v></type>
<desc><marker id="header-4"/>

<p>Extracts EDoc documentation from commented header file syntax
  trees. Similar to <seealso marker="#source-5">source/5</seealso>, but ignores any documentation
  that occurs before a module declaration or a function definition.
  (Warning messages are printed if content may be ignored.) <c>Env</c> is
  assumed to already be set up with a suitable module context.
 </p>
<p><em>See also:</em> <seealso marker="http://www.erlang.org/edoc/doc/syntax_tools/doc/erl_recomment.xml">//syntax_tools/erl_recomment</seealso>, <seealso marker="#header-5">header/5</seealso>.</p>
</desc></func>
<func>
<name>file(File::filename(), Context, Env::edoc_env(), Options::proplist()) -&gt; {ok, Tags} | {error, Reason}</name>
<fsummary>Reads a text file and returns the list of tags in the file.</fsummary>
<type>
<v>Context = overview | package</v><v>Tags = [term()]</v><v>Reason = term()</v></type>
<desc><marker id="file-4"/>

<p>Reads a text file and returns the list of tags in the file. Any
  lines of text before the first tag are ignored. <c>Env</c> is an
  environment created by <seealso marker="edoc_lib#get_doc_env-4">edoc_lib:get_doc_env/4</seealso>. Upon error,
  <c>Reason</c> is an atom returned from the call to <url href="http://www.erlang.org/edoc/doc/kernel/doc/file.xml#read_file-1">//kernel/file:read_file/1</url> or the atom 'invalid_unicode'.</p>
 
  <p>See <seealso marker="#text-4">text/4</seealso> for options.</p>
</desc></func>
<func>
<name>text(Text::string(), Context, Env::edoc_env(), Options::proplist()) -&gt; Tags</name>
<fsummary>Returns the list of tags in the text.</fsummary>
<type>
<v>Context = overview | package</v><v>Tags = [term()]</v></type>
<desc><marker id="text-4"/>

<p>Returns the list of tags in the text. Any lines of text before
  the first tag are ignored. <c>Env</c> is an environment created by <seealso marker="edoc_lib#get_doc_env-4">edoc_lib:get_doc_env/4</seealso>.</p>
 
  <p>See <seealso marker="#source-4">source/4</seealso> for a description of the <c>def</c> option.</p>
</desc></func></funcs>
<section><title>See also</title><p><seealso marker="edoc">edoc</seealso></p></section>
<authors>

<aname>Richard Carlsson</aname>
<email>carlsson.richard@gmail.com</email></authors></erlref>