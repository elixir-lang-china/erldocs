<module name="core_lint">
<type>
  <name>err_desc</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-err_desc">err_desc()</marker> = invalid_attributes<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| invalid_exports<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {arg_mismatch, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {bittype_unit, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {illegal_expr, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {illegal_guard, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {illegal_pattern, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {illegal_try, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {not_bs_pattern, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {not_pattern, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {not_var, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {pattern_mismatch, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {return_mismatch, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {undefined_function, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {duplicate_var, <seealso marker="cerl#type-var_name">cerl:var_name()</seealso>, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {unbound_var, <seealso marker="cerl#type-var_name">cerl:var_name()</seealso>, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {undefined_function, <seealso marker="#type-fa">fa()</seealso>, <seealso marker="#type-fa">fa()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {tail_segment_not_at_end, <seealso marker="#type-fa">fa()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>error</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-error">error()</marker> = {none, module(), <seealso marker="#type-err_desc">err_desc()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>fa</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-fa">fa()</marker> = {atom(), arity()}</typehead></typedecl>
</type>
<type>
  <name>ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ret">ret()</marker> = {ok, [{module(), [<seealso marker="#type-warning">warning()</seealso>, ...]}]}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {error,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{module(), [<seealso marker="#type-error">error()</seealso>, ...]}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{module(), [<seealso marker="#type-warning">warning()</seealso>, ...]}]}</typehead></typedecl>
</type>
<type>
  <name>warning</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-warning">warning()</marker> = {module(), term()}</typehead></typedecl>
</type>
<spec>
  <name>format_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error(X1 :: <seealso marker="#type-err_desc">err_desc()</seealso>) -&gt; [char() | list()]</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module(M :: <seealso marker="cerl#type-c_module">cerl:c_module()</seealso>) -&gt; <seealso marker="#type-ret">ret()</seealso></head></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>module</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>module(C_module :: <seealso marker="cerl#type-c_module">cerl:c_module()</seealso>, Opts :: [<seealso marker="compile#type-option">compile:option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-ret">ret()</seealso></head></clause>
  </contract>
  <anno>C_module</anno>
  <anno>Opts</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:17:29.</timestamp>
</module>