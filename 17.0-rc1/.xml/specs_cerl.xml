<module name="cerl">
<type>
  <name>c_alias</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_alias">c_alias()</marker> = #c_alias{}</typehead></typedecl>
</type>
<type>
  <name>c_apply</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_apply">c_apply()</marker> = #c_apply{}</typehead></typedecl>
</type>
<type>
  <name>c_binary</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_binary">c_binary()</marker> = #c_binary{}</typehead></typedecl>
</type>
<type>
  <name>c_bitstr</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_bitstr">c_bitstr()</marker> = #c_bitstr{}</typehead></typedecl>
</type>
<type>
  <name>c_call</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_call">c_call()</marker> = #c_call{}</typehead></typedecl>
</type>
<type>
  <name>c_case</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_case">c_case()</marker> = #c_case{}</typehead></typedecl>
</type>
<type>
  <name>c_catch</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_catch">c_catch()</marker> = #c_catch{}</typehead></typedecl>
</type>
<type>
  <name>c_clause</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_clause">c_clause()</marker> = #c_clause{}</typehead></typedecl>
</type>
<type>
  <name>c_cons</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_cons">c_cons()</marker> = #c_cons{}</typehead></typedecl>
</type>
<type>
  <name>c_fun</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_fun">c_fun()</marker> = #c_fun{}</typehead></typedecl>
</type>
<type>
  <name>c_lct</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_lct">c_lct()</marker> = <seealso marker="#type-c_literal">c_literal()</seealso> | <seealso marker="#type-c_cons">c_cons()</seealso> | <seealso marker="#type-c_tuple">c_tuple()</seealso></typehead></typedecl>
</type>
<type>
  <name>c_let</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_let">c_let()</marker> = #c_let{}</typehead></typedecl>
</type>
<type>
  <name>c_letrec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_letrec">c_letrec()</marker> = #c_letrec{}</typehead></typedecl>
</type>
<type>
  <name>c_literal</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_literal">c_literal()</marker> = #c_literal{}</typehead></typedecl>
</type>
<type>
  <name>c_map</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_map">c_map()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#c_map{anno = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>var = #c_var{anno = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>name = undefined | <seealso marker="cerl#type-var_name">cerl:var_name()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| #c_literal{},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>es = undefined<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| [#c_map_pair{anno = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>op = undefined<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| #c_literal{val = assoc}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| #c_literal{val = exact},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>key = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>val = any()}]}</typehead></typedecl>
</type>
<type>
  <name>c_map_pair</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_map_pair">c_map_pair()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#c_map_pair{anno = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>op = undefined<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| #c_literal{val = assoc}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| #c_literal{val = exact},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>key = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>val = any()}</typehead></typedecl>
</type>
<type>
  <name>c_module</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_module">c_module()</marker> = #c_module{}</typehead></typedecl>
</type>
<type>
  <name>c_primop</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_primop">c_primop()</marker> = #c_primop{}</typehead></typedecl>
</type>
<type>
  <name>c_receive</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_receive">c_receive()</marker> = #c_receive{}</typehead></typedecl>
</type>
<type>
  <name>c_seq</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_seq">c_seq()</marker> = #c_seq{}</typehead></typedecl>
</type>
<type>
  <name>c_try</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_try">c_try()</marker> = #c_try{}</typehead></typedecl>
</type>
<type>
  <name>c_tuple</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_tuple">c_tuple()</marker> = #c_tuple{}</typehead></typedecl>
</type>
<type>
  <name>c_values</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_values">c_values()</marker> = #c_values{}</typehead></typedecl>
</type>
<type>
  <name>c_var</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-c_var">c_var()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#c_var{anno = any(), name = undefined | <seealso marker="cerl#type-var_name">cerl:var_name()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>cerl</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cerl">cerl()</marker> = <seealso marker="#type-c_alias">c_alias()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_apply">c_apply()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_binary">c_binary()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_bitstr">c_bitstr()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_call">c_call()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_case">c_case()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_catch">c_catch()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_clause">c_clause()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_cons">c_cons()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_fun">c_fun()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_let">c_let()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_letrec">c_letrec()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_literal">c_literal()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_map">c_map()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_map_pair">c_map_pair()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_module">c_module()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_primop">c_primop()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_receive">c_receive()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_seq">c_seq()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_try">c_try()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_tuple">c_tuple()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_values">c_values()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-c_var">c_var()</seealso></typehead></typedecl>
</type>
<type>
  <name>ctype</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ctype">ctype()</marker> = alias<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| apply<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| binary<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| bitrst<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| call<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| 'case'<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| 'catch'<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| clause<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| cons<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| 'fun'<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| 'let'<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| letrec<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| literal<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| map<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| module<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| primop<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| 'receive'<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| seq<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| 'try'<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| tuple<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| values<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| var</typehead></typedecl>
</type>
<type>
  <name>dtype</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dtype">dtype()</marker> = cons | tuple | {atomic, <seealso marker="#type-value">value()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>value</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-value">value()</marker> = integer() | float() | atom() | []</typehead></typedecl>
</type>
<type>
  <name>var_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-var_name">var_name()</marker> = integer() | atom() | {atom(), integer()}</typehead></typedecl>
</type>
<spec>
  <name>abstract</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>abstract(T :: term()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>add_ann</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>add_ann(Terms :: [term()], Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Terms</anno>
</spec>
<spec>
  <name>alias_pat</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>alias_pat(Node :: <seealso marker="#type-c_alias">c_alias()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>alias_var</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>alias_var(Node :: <seealso marker="#type-c_alias">c_alias()</seealso>) -&gt; <seealso marker="#type-c_var">c_var()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>ann_abstract</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_abstract(As :: [term()], T :: term()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>ann_c_alias</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_alias(As :: [term()], Var :: <seealso marker="#type-c_var">c_var()</seealso>, Pattern :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_alias">c_alias()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Pattern</anno>
  <anno>Var</anno>
</spec>
<spec>
  <name>ann_c_apply</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_apply(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Operator :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_apply">c_apply()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>As</anno>
  <anno>Operator</anno>
</spec>
<spec>
  <name>ann_c_atom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_atom(As :: [term()], Name :: atom() | string()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>ann_c_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_binary(As :: [term()], Segments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_binary">c_binary()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Segments</anno>
</spec>
<spec>
  <name>ann_c_bitstr</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>ann_c_bitstr(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Flags :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_bitstr">c_bitstr()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Flags</anno>
  <anno>Size</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>ann_c_bitstr</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>ann_c_bitstr(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Val :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Unit :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Flags :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_bitstr">c_bitstr()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Flags</anno>
  <anno>Size</anno>
  <anno>Type</anno>
  <anno>Unit</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>ann_c_call</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>ann_c_call(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Module :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_call">c_call()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>As</anno>
  <anno>Module</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>ann_c_case</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_case(As :: [term()], Expr :: <seealso marker="#type-cerl">cerl()</seealso>, Clauses :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_case">c_case()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Clauses</anno>
  <anno>Expr</anno>
</spec>
<spec>
  <name>ann_c_catch</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_catch(As :: [term()], Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-c_catch">c_catch()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Body</anno>
</spec>
<spec>
  <name>ann_c_char</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_char(As :: [term()], Value :: char()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>ann_c_clause</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_clause(As :: [term()], Patterns :: [<seealso marker="#type-cerl">cerl()</seealso>], Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_clause">c_clause()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Body</anno>
  <anno>Patterns</anno>
</spec>
<spec>
  <name>ann_c_clause</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>ann_c_clause(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Patterns :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Guard :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_clause">c_clause()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Body</anno>
  <anno>Guard</anno>
  <anno>Patterns</anno>
</spec>
<spec>
  <name>ann_c_cons</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_cons(As :: [term()], C_literal :: <seealso marker="#type-cerl">cerl()</seealso>, Tail :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_literal">c_literal()</seealso> | <seealso marker="#type-c_cons">c_cons()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>C_literal</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>ann_c_cons_skel</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_cons_skel(As :: [term()], Head :: <seealso marker="#type-cerl">cerl()</seealso>, Tail :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_cons">c_cons()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Head</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>ann_c_float</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_float(As :: [term()], Value :: float()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>ann_c_fname</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_fname(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Atom :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: integer() &gt;= 0) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_var">c_var()</seealso></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>As</anno>
  <anno>Atom</anno>
</spec>
<spec>
  <name>ann_c_fun</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_fun(As :: [term()], Variables :: [<seealso marker="#type-cerl">cerl()</seealso>], Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_fun">c_fun()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Body</anno>
  <anno>Variables</anno>
</spec>
<spec>
  <name>ann_c_int</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_int(As :: [term()], Value :: integer()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>ann_c_let</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>ann_c_let(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Variables :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Argument :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_let">c_let()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>As</anno>
  <anno>Body</anno>
  <anno>Variables</anno>
</spec>
<spec>
  <name>ann_c_letrec</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_letrec(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Defs :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_letrec">c_letrec()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Body</anno>
  <anno>Defs</anno>
</spec>
<spec>
  <name>ann_c_map</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>ann_c_map_pair</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>ann_c_map_pair(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Op :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>K :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>V :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_map_pair">c_map_pair()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>K</anno>
  <anno>Op</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>ann_c_module</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>ann_c_module(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Exports :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Es :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_module">c_module()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Es</anno>
  <anno>Exports</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>ann_c_module</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>ann_c_module(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Exports :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Attrs :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Es :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_module">c_module()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Attrs</anno>
  <anno>Es</anno>
  <anno>Exports</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>ann_c_nil</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ann_c_nil(As :: [term()]) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>As</anno>
</spec>
<spec>
  <name>ann_c_primop</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_primop(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_primop">c_primop()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>As</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>ann_c_receive</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_receive(As :: [term()], Clauses :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_receive">c_receive()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Clauses</anno>
</spec>
<spec>
  <name>ann_c_receive</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>ann_c_receive(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Clauses :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Action :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_receive">c_receive()</seealso></head></clause>
  </contract>
  <anno>Action</anno>
  <anno>As</anno>
  <anno>Clauses</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>ann_c_seq</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_c_seq(As :: [term()], Argument :: <seealso marker="#type-cerl">cerl()</seealso>, Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_seq">c_seq()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>As</anno>
  <anno>Body</anno>
</spec>
<spec>
  <name>ann_c_string</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_string(As :: [term()], Value :: string()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>ann_c_try</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>ann_c_try(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Expr :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Vs :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Evs :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Handler :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_try">c_try()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Body</anno>
  <anno>Evs</anno>
  <anno>Expr</anno>
  <anno>Handler</anno>
  <anno>Vs</anno>
</spec>
<spec>
  <name>ann_c_tuple</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_tuple(As :: [term()], Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_tuple">c_tuple()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Es</anno>
</spec>
<spec>
  <name>ann_c_tuple_skel</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_tuple_skel(As :: [term()], Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_tuple">c_tuple()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Es</anno>
</spec>
<spec>
  <name>ann_c_values</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_values(As :: [term()], Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_values">c_values()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Es</anno>
</spec>
<spec>
  <name>ann_c_var</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_c_var(As :: [term()], Name :: <seealso marker="#type-var_name">var_name()</seealso>) -&gt; <seealso marker="#type-c_var">c_var()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>ann_make_data</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_make_data(As :: [term()], X2 :: <seealso marker="#type-dtype">dtype()</seealso>, Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_lct">c_lct()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Es</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>ann_make_data_skel</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_make_data_skel(As :: [term()], X2 :: <seealso marker="#type-dtype">dtype()</seealso>, Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_lct">c_lct()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Es</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>ann_make_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ann_make_list(As :: [term()], List :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>ann_make_list</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_make_list(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>T :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tail :: <seealso marker="#type-cerl">cerl()</seealso> | none) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>T</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>ann_make_tree</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ann_make_tree(As :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: <seealso marker="#type-ctype">ctype()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X3 :: [[<seealso marker="#type-cerl">cerl()</seealso>], ...]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>X2</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>apply_args</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>apply_args(Node :: <seealso marker="#type-c_apply">c_apply()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>apply_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>apply_arity(Node :: <seealso marker="#type-c_apply">c_apply()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>apply_op</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>apply_op(Node :: <seealso marker="#type-c_apply">c_apply()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>atom_lit</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_lit(Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; nonempty_string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>atom_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_name(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>atom_val</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_val(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>binary_segments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_segments(Node :: <seealso marker="#type-c_binary">c_binary()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>bitstr_bitsize</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstr_bitsize(Node :: <seealso marker="#type-c_bitstr">c_bitstr()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>all | any | utf | integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>bitstr_flags</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstr_flags(Node :: <seealso marker="#type-c_bitstr">c_bitstr()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>bitstr_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstr_size(Node :: <seealso marker="#type-c_bitstr">c_bitstr()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>bitstr_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstr_type(Node :: <seealso marker="#type-c_bitstr">c_bitstr()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>bitstr_unit</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstr_unit(Node :: <seealso marker="#type-c_bitstr">c_bitstr()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>bitstr_val</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstr_val(Node :: <seealso marker="#type-c_bitstr">c_bitstr()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>c_alias</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_alias(Var :: <seealso marker="#type-c_var">c_var()</seealso>, Pattern :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-c_alias">c_alias()</seealso></head></clause>
  </contract>
  <anno>Pattern</anno>
  <anno>Var</anno>
</spec>
<spec>
  <name>c_apply</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_apply(Operator :: <seealso marker="#type-cerl">cerl()</seealso>, Arguments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_apply">c_apply()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Operator</anno>
</spec>
<spec>
  <name>c_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_atom(Name :: atom() | string()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>c_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_binary(Segments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_binary">c_binary()</seealso></head></clause>
  </contract>
  <anno>Segments</anno>
</spec>
<spec>
  <name>c_bitstr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>c_bitstr(Val :: <seealso marker="#type-cerl">cerl()</seealso>, Type :: <seealso marker="#type-cerl">cerl()</seealso>, Flags :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_bitstr">c_bitstr()</seealso></head></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Type</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>c_bitstr</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>c_bitstr(Val :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Flags :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_bitstr">c_bitstr()</seealso></head></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Size</anno>
  <anno>Type</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>c_bitstr</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>c_bitstr(Val :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Unit :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Flags :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_bitstr">c_bitstr()</seealso></head></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Size</anno>
  <anno>Type</anno>
  <anno>Unit</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>c_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>c_call(Module :: <seealso marker="#type-cerl">cerl()</seealso>, Name :: <seealso marker="#type-cerl">cerl()</seealso>, Arguments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_call">c_call()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Module</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>c_case</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_case(Expr :: <seealso marker="#type-cerl">cerl()</seealso>, Clauses :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_case">c_case()</seealso></head></clause>
  </contract>
  <anno>Clauses</anno>
  <anno>Expr</anno>
</spec>
<spec>
  <name>c_catch</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_catch(Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-c_catch">c_catch()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
</spec>
<spec>
  <name>c_char</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_char(Value :: integer() &gt;= 0) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>Value</anno>
</spec>
<spec>
  <name>c_clause</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_clause(Patterns :: [<seealso marker="#type-cerl">cerl()</seealso>], Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-c_clause">c_clause()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Patterns</anno>
</spec>
<spec>
  <name>c_clause</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>c_clause(Patterns :: [<seealso marker="#type-cerl">cerl()</seealso>], Guard :: <seealso marker="#type-cerl">cerl()</seealso>, Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_clause">c_clause()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Guard</anno>
  <anno>Patterns</anno>
</spec>
<spec>
  <name>c_cons</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_cons(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>, Tail :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_literal">c_literal()</seealso> | <seealso marker="#type-c_cons">c_cons()</seealso></head></clause>
  </contract>
  <anno>C_literal</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>c_cons_skel</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_cons_skel(Head :: <seealso marker="#type-cerl">cerl()</seealso>, Tail :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-c_cons">c_cons()</seealso></head></clause>
  </contract>
  <anno>Head</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>c_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_float(Value :: float()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>Value</anno>
</spec>
<spec>
  <name>c_fname</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_fname(Atom :: atom(), Arity :: integer() &gt;= 0) -&gt; <seealso marker="#type-c_var">c_var()</seealso></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Atom</anno>
</spec>
<spec>
  <name>c_fun</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_fun(Variables :: [<seealso marker="#type-cerl">cerl()</seealso>], Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-c_fun">c_fun()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Variables</anno>
</spec>
<spec>
  <name>c_int</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_int(Value :: integer()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>Value</anno>
</spec>
<spec>
  <name>c_let</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>c_let(Variables :: [<seealso marker="#type-cerl">cerl()</seealso>], Argument :: <seealso marker="#type-cerl">cerl()</seealso>, Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_let">c_let()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>Body</anno>
  <anno>Variables</anno>
</spec>
<spec>
  <name>c_letrec</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_letrec(Defs :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}], Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-c_letrec">c_letrec()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Defs</anno>
</spec>
<spec>
  <name>c_module</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>c_module(Name :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Exports :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Es :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_module">c_module()</seealso></head></clause>
  </contract>
  <anno>Es</anno>
  <anno>Exports</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>c_module</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>c_module(Name :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Exports :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Attrs :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Es :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_module">c_module()</seealso></head></clause>
  </contract>
  <anno>Attrs</anno>
  <anno>Es</anno>
  <anno>Exports</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>c_nil</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>c_nil() -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>c_primop</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_primop(Name :: <seealso marker="#type-cerl">cerl()</seealso>, Arguments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_primop">c_primop()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>c_receive</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_receive(Clauses :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_receive">c_receive()</seealso></head></clause>
  </contract>
  <anno>Clauses</anno>
</spec>
<spec>
  <name>c_receive</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>c_receive(Clauses :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Action :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_receive">c_receive()</seealso></head></clause>
  </contract>
  <anno>Action</anno>
  <anno>Clauses</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>c_seq</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c_seq(Argument :: <seealso marker="#type-cerl">cerl()</seealso>, Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-c_seq">c_seq()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>Body</anno>
</spec>
<spec>
  <name>c_string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_string(Value :: string()) -&gt; <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>Value</anno>
</spec>
<spec>
  <name>c_try</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>c_try(Expr :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Vs :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Evs :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Handler :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_try">c_try()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Evs</anno>
  <anno>Expr</anno>
  <anno>Handler</anno>
  <anno>Vs</anno>
</spec>
<spec>
  <name>c_tuple</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_tuple(Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_tuple">c_tuple()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>Es</anno>
</spec>
<spec>
  <name>c_tuple_skel</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_tuple_skel(Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_tuple">c_tuple()</seealso></head></clause>
  </contract>
  <anno>Es</anno>
</spec>
<spec>
  <name>c_values</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_values(Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_values">c_values()</seealso></head></clause>
  </contract>
  <anno>Es</anno>
</spec>
<spec>
  <name>c_var</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c_var(Name :: <seealso marker="#type-var_name">var_name()</seealso>) -&gt; <seealso marker="#type-c_var">c_var()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>call_args</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>call_args(Node :: <seealso marker="#type-c_call">c_call()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>call_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>call_arity(Node :: <seealso marker="#type-c_call">c_call()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>call_module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>call_module(Node :: <seealso marker="#type-c_call">c_call()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>call_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>call_name(Node :: <seealso marker="#type-c_call">c_call()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>case_arg</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>case_arg(Node :: <seealso marker="#type-c_case">c_case()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>case_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>case_arity(Node :: <seealso marker="#type-c_case">c_case()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>case_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>case_clauses(Node :: <seealso marker="#type-c_case">c_case()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>catch_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>catch_body(Node :: <seealso marker="#type-c_catch">c_catch()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>char_lit</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>char_lit(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; nonempty_string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>char_val</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>char_val(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; char()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>clause_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clause_arity(Node :: <seealso marker="#type-c_clause">c_clause()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>clause_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clause_body(Node :: <seealso marker="#type-c_clause">c_clause()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>clause_guard</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clause_guard(Node :: <seealso marker="#type-c_clause">c_clause()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>clause_pats</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clause_pats(Node :: <seealso marker="#type-c_clause">c_clause()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>clause_vars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clause_vars(Clause :: <seealso marker="#type-c_clause">c_clause()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Clause</anno>
</spec>
<spec>
  <name>concrete</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>concrete(C_literal :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; term()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>cons_hd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cons_hd(C_cons :: <seealso marker="#type-c_cons">c_cons()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>C_cons</anno>
</spec>
<spec>
  <name>cons_tl</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cons_tl(C_cons :: <seealso marker="#type-c_cons">c_cons()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>C_cons</anno>
</spec>
<spec>
  <name>copy_ann</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>copy_ann(Source :: <seealso marker="#type-cerl">cerl()</seealso>, Target :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Source</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>data_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>data_arity(C_literal :: <seealso marker="#type-c_lct">c_lct()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>data_es</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>data_es(C_literal :: <seealso marker="#type-c_lct">c_lct()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>data_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>data_type(C_literal :: <seealso marker="#type-c_lct">c_lct()</seealso>) -&gt; <seealso marker="#type-dtype">dtype()</seealso></head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>float_lit</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float_lit(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>float_val</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float_val(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; float()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>fname_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fname_arity(C_var :: <seealso marker="#type-c_var">c_var()</seealso>) -&gt; byte()</head></clause>
  </contract>
  <anno>C_var</anno>
</spec>
<spec>
  <name>fname_id</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fname_id(C_var :: <seealso marker="#type-c_var">c_var()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>C_var</anno>
</spec>
<spec>
  <name>fold_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fold_literal(Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>from_records</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_records(Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>fun_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fun_arity(Node :: <seealso marker="#type-c_fun">c_fun()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>fun_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fun_body(Node :: <seealso marker="#type-c_fun">c_fun()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>fun_vars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fun_vars(Node :: <seealso marker="#type-c_fun">c_fun()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>get_ann</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_ann(Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; [term()]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>int_lit</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>int_lit(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>int_val</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>int_val(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; integer()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>is_c_alias</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_alias(C_alias :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_alias</anno>
</spec>
<spec>
  <name>is_c_apply</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_apply(C_apply :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_apply</anno>
</spec>
<spec>
  <name>is_c_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_atom(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>is_c_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_binary(C_binary :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_binary</anno>
</spec>
<spec>
  <name>is_c_bitstr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_bitstr(C_bitstr :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_bitstr</anno>
</spec>
<spec>
  <name>is_c_call</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_call(C_call :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_call</anno>
</spec>
<spec>
  <name>is_c_case</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_case(C_case :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_case</anno>
</spec>
<spec>
  <name>is_c_catch</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_catch(C_catch :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_catch</anno>
</spec>
<spec>
  <name>is_c_char</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_char(C_literal :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>is_c_clause</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_clause(C_clause :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_clause</anno>
</spec>
<spec>
  <name>is_c_cons</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_cons(C_cons :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_cons</anno>
</spec>
<spec>
  <name>is_c_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_float(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>is_c_fname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_fname(C_var :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_var</anno>
</spec>
<spec>
  <name>is_c_fun</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_fun(C_fun :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_fun</anno>
</spec>
<spec>
  <name>is_c_int</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_int(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>is_c_let</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_let(C_let :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_let</anno>
</spec>
<spec>
  <name>is_c_letrec</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_letrec(C_letrec :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_letrec</anno>
</spec>
<spec>
  <name>is_c_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_list(C_cons :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_cons</anno>
</spec>
<spec>
  <name>is_c_module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_module(C_module :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_module</anno>
</spec>
<spec>
  <name>is_c_nil</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_nil(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>is_c_primop</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_primop(C_primop :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_primop</anno>
</spec>
<spec>
  <name>is_c_receive</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_receive(C_receive :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_receive</anno>
</spec>
<spec>
  <name>is_c_seq</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_seq(C_seq :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_seq</anno>
</spec>
<spec>
  <name>is_c_string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_string(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>is_c_try</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_try(C_try :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_try</anno>
</spec>
<spec>
  <name>is_c_tuple</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_tuple(C_tuple :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_tuple</anno>
</spec>
<spec>
  <name>is_c_values</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_values(C_values :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_values</anno>
</spec>
<spec>
  <name>is_c_var</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_c_var(C_var :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_var</anno>
</spec>
<spec>
  <name>is_data</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_data(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>is_leaf</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_leaf(Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>is_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_literal(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>is_literal_term</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_literal_term(T :: term()) -&gt; boolean()</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>is_print_char</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_print_char(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>is_print_string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_print_string(C_literal :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C_literal</anno>
</spec>
<spec>
  <name>let_arg</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>let_arg(Node :: <seealso marker="#type-c_let">c_let()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>let_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>let_arity(Node :: <seealso marker="#type-c_let">c_let()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>let_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>let_body(Node :: <seealso marker="#type-c_let">c_let()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>let_vars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>let_vars(Node :: <seealso marker="#type-c_let">c_let()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>letrec_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>letrec_body(Node :: <seealso marker="#type-c_letrec">c_letrec()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>letrec_defs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>letrec_defs(Node :: <seealso marker="#type-c_letrec">c_letrec()</seealso>) -&gt; [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>letrec_vars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>letrec_vars(Node :: <seealso marker="#type-c_letrec">c_letrec()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>list_elements</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_elements(C_cons :: <seealso marker="#type-c_cons">c_cons()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>C_cons</anno>
</spec>
<spec>
  <name>list_length</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_length(L :: <seealso marker="#type-c_cons">c_cons()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>L</anno>
</spec>
<spec>
  <name>make_data</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>make_data(CType :: <seealso marker="#type-dtype">dtype()</seealso>, Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_lct">c_lct()</seealso></head></clause>
  </contract>
  <anno>CType</anno>
  <anno>Es</anno>
</spec>
<spec>
  <name>make_data_skel</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>make_data_skel(CType :: <seealso marker="#type-dtype">dtype()</seealso>, Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_lct">c_lct()</seealso></head></clause>
  </contract>
  <anno>CType</anno>
  <anno>Es</anno>
</spec>
<spec>
  <name>make_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>make_list(List :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>make_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>make_list(List :: [<seealso marker="#type-cerl">cerl()</seealso>], Tail :: <seealso marker="#type-cerl">cerl()</seealso> | none) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>List</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>make_tree</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>make_tree(Type :: <seealso marker="#type-ctype">ctype()</seealso>, Gs :: [[<seealso marker="#type-cerl">cerl()</seealso>], ...]) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Gs</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>map_es</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_es(C_map :: <seealso marker="#type-c_map">c_map()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>C_map</anno>
</spec>
<spec>
  <name>map_pair_key</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>map_pair_op</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>map_pair_val</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>meta</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>meta(Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>module_attrs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_attrs(Node :: <seealso marker="#type-c_module">c_module()</seealso>) -&gt; [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>module_defs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_defs(Node :: <seealso marker="#type-c_module">c_module()</seealso>) -&gt; [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>module_exports</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_exports(Node :: <seealso marker="#type-c_module">c_module()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>module_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_name(Node :: <seealso marker="#type-c_module">c_module()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>module_vars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_vars(Node :: <seealso marker="#type-c_module">c_module()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>pat_list_vars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pat_list_vars(Ps :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Ps</anno>
</spec>
<spec>
  <name>pat_vars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pat_vars(Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>primop_args</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>primop_args(Node :: <seealso marker="#type-c_primop">c_primop()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>primop_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>primop_arity(Node :: <seealso marker="#type-c_primop">c_primop()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>primop_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>primop_name(Node :: <seealso marker="#type-c_primop">c_primop()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>receive_action</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>receive_action(Node :: <seealso marker="#type-c_receive">c_receive()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>receive_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>receive_clauses(Node :: <seealso marker="#type-c_receive">c_receive()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>receive_timeout</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>receive_timeout(Node :: <seealso marker="#type-c_receive">c_receive()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>seq_arg</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>seq_arg(Node :: <seealso marker="#type-c_seq">c_seq()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>seq_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>seq_body(Node :: <seealso marker="#type-c_seq">c_seq()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>set_ann</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_ann(Node :: <seealso marker="#type-cerl">cerl()</seealso>, List :: [term()]) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>List</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>string_lit</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>string_lit(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; nonempty_string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>string_val</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>string_val(Node :: <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>subtrees</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>subtrees(T :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; [[<seealso marker="#type-cerl">cerl()</seealso>]]</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>to_records</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_records(Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>try_arg</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>try_arg(Node :: <seealso marker="#type-c_try">c_try()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>try_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>try_body(Node :: <seealso marker="#type-c_try">c_try()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>try_evars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>try_evars(Node :: <seealso marker="#type-c_try">c_try()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>try_handler</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>try_handler(Node :: <seealso marker="#type-c_try">c_try()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>try_vars</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>try_vars(Node :: <seealso marker="#type-c_try">c_try()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>tuple_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_arity(C_tuple :: <seealso marker="#type-c_tuple">c_tuple()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head></clause>
  </contract>
  <anno>C_tuple</anno>
</spec>
<spec>
  <name>tuple_es</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_es(C_tuple :: <seealso marker="#type-c_tuple">c_tuple()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>C_tuple</anno>
</spec>
<spec>
  <name>type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>type(C_alias :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-ctype">ctype()</seealso></head></clause>
  </contract>
  <anno>C_alias</anno>
</spec>
<spec>
  <name>unfold_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unfold_literal(Node :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_alias</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_alias(Node :: <seealso marker="#type-c_alias">c_alias()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Var :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pattern :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_alias">c_alias()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Pattern</anno>
  <anno>Var</anno>
</spec>
<spec>
  <name>update_c_apply</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_apply(Node :: <seealso marker="#type-c_apply">c_apply()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Operator :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_apply">c_apply()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Node</anno>
  <anno>Operator</anno>
</spec>
<spec>
  <name>update_c_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_c_binary(Node :: <seealso marker="#type-c_binary">c_binary()</seealso>, Segments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_binary">c_binary()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Segments</anno>
</spec>
<spec>
  <name>update_c_bitstr</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>update_c_bitstr(Node :: <seealso marker="#type-c_bitstr">c_bitstr()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Flags :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_bitstr">c_bitstr()</seealso></head></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Node</anno>
  <anno>Size</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>update_c_bitstr</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>update_c_bitstr(Node :: <seealso marker="#type-c_bitstr">c_bitstr()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Val :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Unit :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Flags :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_bitstr">c_bitstr()</seealso></head></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Node</anno>
  <anno>Size</anno>
  <anno>Type</anno>
  <anno>Unit</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>update_c_call</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>update_c_call(Node :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Module :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_call">c_call()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Module</anno>
  <anno>Name</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_case</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_case(Node :: <seealso marker="#type-c_case">c_case()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Expr :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Clauses :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_case">c_case()</seealso></head></clause>
  </contract>
  <anno>Clauses</anno>
  <anno>Expr</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_catch</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_c_catch(Node :: <seealso marker="#type-c_catch">c_catch()</seealso>, Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt; <seealso marker="#type-c_catch">c_catch()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_clause</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>update_c_clause(Node :: <seealso marker="#type-c_clause">c_clause()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Patterns :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Guard :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_clause">c_clause()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Guard</anno>
  <anno>Node</anno>
  <anno>Patterns</anno>
</spec>
<spec>
  <name>update_c_cons</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_cons(Node :: <seealso marker="#type-c_literal">c_literal()</seealso> | <seealso marker="#type-c_cons">c_cons()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>C_literal :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tail :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_literal">c_literal()</seealso> | <seealso marker="#type-c_cons">c_cons()</seealso></head></clause>
  </contract>
  <anno>C_literal</anno>
  <anno>Node</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>update_c_cons_skel</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_cons_skel(Node :: <seealso marker="#type-c_cons">c_cons()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Head :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tail :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_cons">c_cons()</seealso></head></clause>
  </contract>
  <anno>Head</anno>
  <anno>Node</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>update_c_fname</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_c_fname(C_var :: <seealso marker="#type-c_var">c_var()</seealso>, Atom :: atom()) -&gt; <seealso marker="#type-c_var">c_var()</seealso></head></clause>
  </contract>
  <anno>Atom</anno>
  <anno>C_var</anno>
</spec>
<spec>
  <name>update_c_fname</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_fname(Node :: <seealso marker="#type-c_var">c_var()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Atom :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: integer()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_var">c_var()</seealso></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Atom</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_fun</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_fun(Node :: <seealso marker="#type-c_fun">c_fun()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Variables :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_fun">c_fun()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Node</anno>
  <anno>Variables</anno>
</spec>
<spec>
  <name>update_c_let</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>update_c_let(Node :: <seealso marker="#type-c_let">c_let()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Variables :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Argument :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_let">c_let()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>Body</anno>
  <anno>Node</anno>
  <anno>Variables</anno>
</spec>
<spec>
  <name>update_c_letrec</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_letrec(Node :: <seealso marker="#type-c_letrec">c_letrec()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Defs :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_letrec">c_letrec()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Defs</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_map</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>update_c_map_pair</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>update_c_module</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>update_c_module(Node :: <seealso marker="#type-c_module">c_module()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Exports :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Attrs :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Es :: [{<seealso marker="#type-cerl">cerl()</seealso>, <seealso marker="#type-cerl">cerl()</seealso>}]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_module">c_module()</seealso></head></clause>
  </contract>
  <anno>Attrs</anno>
  <anno>Es</anno>
  <anno>Exports</anno>
  <anno>Name</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_primop</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_primop(Node :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_primop">c_primop()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Name</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_receive</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>update_c_receive(Node :: <seealso marker="#type-c_receive">c_receive()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Clauses :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Action :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_receive">c_receive()</seealso></head></clause>
  </contract>
  <anno>Action</anno>
  <anno>Clauses</anno>
  <anno>Node</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>update_c_seq</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_c_seq(Node :: <seealso marker="#type-c_seq">c_seq()</seealso>, Argument :: <seealso marker="#type-cerl">cerl()</seealso>, Body :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_seq">c_seq()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>Body</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_try</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>update_c_try(Node :: <seealso marker="#type-c_try">c_try()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Expr :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Vs :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Evs :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Handler :: <seealso marker="#type-cerl">cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_try">c_try()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Evs</anno>
  <anno>Expr</anno>
  <anno>Handler</anno>
  <anno>Node</anno>
  <anno>Vs</anno>
</spec>
<spec>
  <name>update_c_tuple</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_c_tuple(Node :: <seealso marker="#type-c_tuple">c_tuple()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso>, Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_tuple">c_tuple()</seealso> | <seealso marker="#type-c_literal">c_literal()</seealso></head></clause>
  </contract>
  <anno>Es</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_tuple_skel</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_c_tuple_skel(Old :: <seealso marker="#type-c_tuple">c_tuple()</seealso>, Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_tuple">c_tuple()</seealso></head></clause>
  </contract>
  <anno>Es</anno>
  <anno>Old</anno>
</spec>
<spec>
  <name>update_c_values</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_c_values(Node :: <seealso marker="#type-c_values">c_values()</seealso>, Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-c_values">c_values()</seealso></head></clause>
  </contract>
  <anno>Es</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_c_var</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_c_var(Node :: <seealso marker="#type-c_var">c_var()</seealso>, Name :: <seealso marker="#type-var_name">var_name()</seealso>) -&gt; <seealso marker="#type-c_var">c_var()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_data</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_data(Node :: <seealso marker="#type-cerl">cerl()</seealso>, CType :: <seealso marker="#type-dtype">dtype()</seealso>, Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_lct">c_lct()</seealso></head></clause>
  </contract>
  <anno>CType</anno>
  <anno>Es</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_data_skel</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_data_skel(Node :: <seealso marker="#type-cerl">cerl()</seealso>, CType :: <seealso marker="#type-dtype">dtype()</seealso>, Es :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-c_lct">c_lct()</seealso></head></clause>
  </contract>
  <anno>CType</anno>
  <anno>Es</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_list(Node :: <seealso marker="#type-cerl">cerl()</seealso>, List :: [<seealso marker="#type-cerl">cerl()</seealso>]) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>List</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_list</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_list(Node :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>List :: [<seealso marker="#type-cerl">cerl()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tail :: <seealso marker="#type-cerl">cerl()</seealso> | none) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>List</anno>
  <anno>Node</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>update_tree</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_tree(Node :: <seealso marker="#type-cerl">cerl()</seealso>, Gs :: [[<seealso marker="#type-cerl">cerl()</seealso>], ...]) -&gt; <seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Gs</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>update_tree</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_tree(Node :: <seealso marker="#type-cerl">cerl()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-ctype">ctype()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Gs :: [[<seealso marker="#type-cerl">cerl()</seealso>], ...]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-cerl">cerl()</seealso></head></clause>
  </contract>
  <anno>Gs</anno>
  <anno>Node</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>values_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>values_arity(Node :: <seealso marker="#type-c_values">c_values()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>values_es</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>values_es(Node :: <seealso marker="#type-c_values">c_values()</seealso>) -&gt; [<seealso marker="#type-cerl">cerl()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>var_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>var_name(Node :: <seealso marker="#type-c_var">c_var()</seealso>) -&gt; <seealso marker="#type-var_name">var_name()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:17:29.</timestamp>
</module>