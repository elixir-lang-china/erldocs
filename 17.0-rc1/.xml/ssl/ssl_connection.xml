<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ssl_connection</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ssl_connection.xml</file></header>
<module>ssl_connection</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>certdb_ref() = reference()</c></tag>
<item><marker id="type-certdb_ref"/> </item>
<tag><c>cipher() = null | rc4_128 | idea_cbc | des40_cbc | des_cbc | '3des_ede_cbc' | aes_128_cbc | aes_256_cbc</c></tag>
<item><marker id="type-cipher"/> </item>
<tag><c>ciphers() = [erl_cipher_suite()] | string()</c></tag>
<item><marker id="type-ciphers"/> </item>
<tag><c>connect_option() = socket_connect_option() | ssl_option() | transport_option()</c></tag>
<item><marker id="type-connect_option"/> </item>
<tag><c>db_handle() = term()</c></tag>
<item><marker id="type-db_handle"/> </item>
<tag><c>der_encoded() = binary()</c></tag>
<item><marker id="type-der_encoded"/> </item>
<tag><c>erl_cipher_suite() = {key_algo(), cipher(), hash()}</c></tag>
<item><marker id="type-erl_cipher_suite"/> </item>
<tag><c>gen_fsm_state_return() = {next_state, state_name(), term()} | {next_state, state_name(), term(), timeout()} | {stop, term(), term()}</c></tag>
<item><marker id="type-gen_fsm_state_return"/> </item>
<tag><c>hash() = null | sha | md5 | sha224 | sha256 | sha384 | sha512</c></tag>
<item><marker id="type-hash"/> </item>
<tag><c>host() = ip_address() (see module inet) | hostname() (see module inet)</c></tag>
<item><marker id="type-host"/> </item>
<tag><c>key_algo() = null | rsa | dhe_rsa | dhe_dss | ecdhe_ecdsa | ecdh_ecdsa | ecdh_rsa | srp_rsa | srp_dss | psk | dhe_psk | rsa_psk | dh_anon | ecdh_anon | srp_anon</c></tag>
<item><marker id="type-key_algo"/> </item>
<tag><c>listen_option() = socket_listen_option() | ssl_option() | transport_option()</c></tag>
<item><marker id="type-listen_option"/> </item>
<tag><c>oid() = tuple()</c></tag>
<item><marker id="type-oid"/> </item>
<tag><c>path() = string()</c></tag>
<item><marker id="type-path"/> </item>
<tag><c>prf_random() = client_random | server_random</c></tag>
<item><marker id="type-prf_random"/> </item>
<tag><c>public_key_info() = {oid(), #'RSAPublicKey'{} | integer() | #'ECPoint'{}, public_key_params()}</c></tag>
<item><marker id="type-public_key_info"/> </item>
<tag><c>public_key_params() = #'Dss-Parms'{} | {namedCurve, oid()} | #'ECParameters'{} | term()</c></tag>
<item><marker id="type-public_key_params"/> </item>
<tag><c>reason() = term()</c></tag>
<item><marker id="type-reason"/> </item>
<tag><c>socket_connect_option() = connect_option() (see module gen_tcp)</c></tag>
<item><marker id="type-socket_connect_option"/> </item>
<tag><c>socket_listen_option() = listen_option() (see module gen_tcp)</c></tag>
<item><marker id="type-socket_listen_option"/> </item>
<tag><c>ssl_imp() = new | old</c></tag>
<item><marker id="type-ssl_imp"/> </item>
<tag><c>ssl_option() = {verify, verify_type()} | {verify_fun, {function(), InitialUserState::term()}} | {fail_if_no_peer_cert, boolean()} | {depth, integer()} | {cert, Der::binary()} | {certfile, path()} | {key, Der::binary()} | {keyfile, path()} | {password, string()} | {cacerts, [Der::binary()]} | {cacertfile, path()} | {dh, Der::binary()} | {dhfile, path()} | {user_lookup_fun, {function(), InitialUserState::term()}} | {psk_identity, string()} | {srp_identity, {string(), string()}} | {ciphers, ciphers()} | {ssl_imp, ssl_imp()} | {reuse_sessions, boolean()} | {reuse_session, function()} | {hibernate_after, integer() | undefined} | {next_protocols_advertised, [binary()]} | {client_preferred_next_protocols, binary(), client | server, [binary()]}</c></tag>
<item><marker id="type-ssl_option"/> </item>
<tag><c>sslsocket() = #sslsocket{}</c></tag>
<item><marker id="type-sslsocket"/> </item>
<tag><c>state_name() = hello | abbreviated | certify | cipher | connection</c></tag>
<item><marker id="type-state_name"/> </item>
<tag><c>tls_atom_version() = sslv3 | tlsv1 | 'tlsv1.1' | 'tlsv1.2'</c></tag>
<item><marker id="type-tls_atom_version"/> </item>
<tag><c>tls_handshake_history() = {[binary()], [binary()]}</c></tag>
<item><marker id="type-tls_handshake_history"/> </item>
<tag><c>tls_version() = {integer(), integer()}</c></tag>
<item><marker id="type-tls_version"/> </item>
<tag><c>transport_option() = {cb_info, {CallbackModule::atom(), DataTag::atom(), ClosedTag::atom(), ErrTag::atom()}}</c></tag>
<item><marker id="type-transport_option"/> </item>
<tag><c>verify_type() = verify_none | verify_peer</c></tag>
<item><marker id="type-verify_type"/> </item>
</taglist></section>
<funcs>
<func>
<name>connect(Connection::tls_connection | dtls_connection, Host::host(), Port::port_number() (see module inet), Socket::port(), Options::{#ssl_options{protocol=undefined | tls | dtls, versions=undefined | ['tlsv1.2' | 'tlsv1.1' | tlsv1 | sslv3] | ['dtlsv1.2' | dtlsv1], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded(), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded()}, password=undefined | string(), cacerts=undefined | [der_encoded()], cacertfile=undefined | binary(), dh=undefined | der_encoded(), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), debug=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}, #socket_options{}}, User::pid(), CbInfo::tuple(), Timeout::timeout()) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="connect-8"/>
 </desc></func>
<func>
<name>ssl_accept(Connection::tls_connection | dtls_connection, Port::port_number() (see module inet), Socket::port(), Opts::{#ssl_options{protocol=undefined | tls | dtls, versions=undefined | ['tlsv1.2' | 'tlsv1.1' | tlsv1 | sslv3] | ['dtlsv1.2' | dtlsv1], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded(), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded()}, password=undefined | string(), cacerts=undefined | [der_encoded()], cacertfile=undefined | binary(), dh=undefined | der_encoded(), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), debug=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}, #socket_options{}}, User::pid(), CbInfo::tuple(), Timeout::timeout()) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="ssl_accept-7"/>
 </desc></func>
<func>
<name>handshake(Sslsocket::#sslsocket{}, Timeout::timeout()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="handshake-2"/>
 </desc></func>
<func>
<name>socket_control(Connection::tls_connection | dtls_connection, Socket::port(), Pid::pid(), Transport::atom()) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="socket_control-4"/>
 </desc></func>
<func>
<name>send(Pid::pid(), Data::iodata()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="send-2"/>
 </desc></func>
<func>
<name>recv(Pid::pid(), Length::integer(), Timeout::timeout()) -&gt; {ok, binary() | list()} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="recv-3"/>
 </desc></func>
<func>
<name>close(ConnectionPid::pid()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="close-1"/>
 </desc></func>
<func>
<name>shutdown(ConnectionPid::pid(), How::atom()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="shutdown-2"/>
 </desc></func>
<func>
<name>new_user(ConnectionPid::pid(), User::pid()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="new_user-2"/>
 </desc></func>
<func>
<name>negotiated_next_protocol(ConnectionPid::pid()) -&gt; {ok, binary()} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="negotiated_next_protocol-1"/>
 </desc></func>
<func>
<name>get_opts(ConnectionPid::pid(), OptTags::list()) -&gt; {ok, list()} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="get_opts-2"/>
 </desc></func>
<func>
<name>set_opts(ConnectionPid::pid(), Options::list()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="set_opts-2"/>
 </desc></func>
<func>
<name>info(ConnectionPid::pid()) -&gt; {ok, {atom(), tuple()}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="info-1"/>
 </desc></func>
<func>
<name>session_info(ConnectionPid::pid()) -&gt; {ok, list()} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="session_info-1"/>
 </desc></func>
<func>
<name>peer_certificate(ConnectionPid::pid()) -&gt; {ok, binary() | undefined} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="peer_certificate-1"/>
 </desc></func>
<func>
<name>renegotiation(ConnectionPid::pid()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="renegotiation-1"/>
 </desc></func>
<func>
<name>prf(ConnectionPid::pid(), Secret::binary() | master_secret, Label::binary(), Seed::binary() | prf_random() (see module ssl), WantedLength::non_neg_integer()) -&gt; {ok, binary()} | {error, reason()} | {'EXIT', term()}</name>
<fsummary> </fsummary>

<desc><marker id="prf-5"/>
 </desc></func>
<func>
<name>handle_session(Server_hello, Version, NewId, ConnectionStates, NextProtocol, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_session-6"/>
 </desc></func>
<func>
<name>hello(Hello_request::start | #hello_request{} | #server_hello{} | term(), State::#state{role=undefined | client | server, user_application=undefined | {Monitor::reference(), User::pid()}, transport_cb=undefined | atom(), protocol_cb=undefined | tls_connection | dtls_connection, data_tag=undefined | atom(), close_tag=undefined | atom(), error_tag=undefined | atom(), host=undefined | string() | ip_address() (see module inet), port=undefined | integer(), socket=undefined | port(), ssl_options=undefined | #ssl_options{protocol=undefined | tls | dtls, versions=undefined | ['tlsv1.2' | 'tlsv1.1' | tlsv1 | sslv3] | ['dtlsv1.2' | dtlsv1], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded(), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded()}, password=undefined | string(), cacerts=undefined | [der_encoded()], cacertfile=undefined | binary(), dh=undefined | der_encoded(), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), debug=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}, socket_options=undefined | #socket_options{}, connection_states=undefined | #connection_states{}, protocol_buffers=undefined | term(), tls_handshake_history=undefined | tls_handshake_history(), cert_db=undefined | reference(), session=undefined | #session{}, session_cache=undefined | db_handle(), session_cache_cb=undefined | atom(), negotiated_version=undefined | tls_version(), client_certificate_requested=boolean(), key_algorithm=undefined | key_algo(), hashsign_algorithm=any(), cert_hashsign_algorithm=any(), public_key_info=undefined | public_key_info(), private_key=undefined | private_key() (see module public_key), diffie_hellman_params=any(), diffie_hellman_keys=any(), psk_identity=undefined | binary(), srp_params=undefined | #srp_user{generator=undefined | binary(), prime=undefined | binary(), salt=undefined | binary(), verifier=undefined | binary()}, srp_keys=undefined | {PublicKey::binary(), PrivateKey::binary()}, premaster_secret=undefined | binary(), file_ref_db=undefined | db_handle(), cert_db_ref=undefined | certdb_ref(), bytes_to_read=undefined | integer(), user_data_buffer=undefined | binary(), renegotiation=undefined | {boolean(), From::term() | internal | peer}, start_or_recv_from=undefined | term(), timer=undefined | reference(), send_queue=undefined | queue(), terminated=boolean(), allow_renegotiate=boolean(), expecting_next_protocol_negotiation=boolean(), next_protocol=undefined | binary(), client_ecc=any()}, Connection::tls_connection | dtls_connection) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="hello-3"/>
 </desc></func>
<func>
<name>abbreviated(Hello_request::#hello_request{} | #finished{} | term(), State::#state{role=undefined | client | server, user_application=undefined | {Monitor::reference(), User::pid()}, transport_cb=undefined | atom(), protocol_cb=undefined | tls_connection | dtls_connection, data_tag=undefined | atom(), close_tag=undefined | atom(), error_tag=undefined | atom(), host=undefined | string() | ip_address() (see module inet), port=undefined | integer(), socket=undefined | port(), ssl_options=undefined | #ssl_options{protocol=undefined | tls | dtls, versions=undefined | ['tlsv1.2' | 'tlsv1.1' | tlsv1 | sslv3] | ['dtlsv1.2' | dtlsv1], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded(), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded()}, password=undefined | string(), cacerts=undefined | [der_encoded()], cacertfile=undefined | binary(), dh=undefined | der_encoded(), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), debug=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}, socket_options=undefined | #socket_options{}, connection_states=undefined | #connection_states{}, protocol_buffers=undefined | term(), tls_handshake_history=undefined | tls_handshake_history(), cert_db=undefined | reference(), session=undefined | #session{}, session_cache=undefined | db_handle(), session_cache_cb=undefined | atom(), negotiated_version=undefined | tls_version(), client_certificate_requested=boolean(), key_algorithm=undefined | key_algo(), hashsign_algorithm=any(), cert_hashsign_algorithm=any(), public_key_info=undefined | public_key_info(), private_key=undefined | private_key() (see module public_key), diffie_hellman_params=any(), diffie_hellman_keys=any(), psk_identity=undefined | binary(), srp_params=undefined | #srp_user{generator=undefined | binary(), prime=undefined | binary(), salt=undefined | binary(), verifier=undefined | binary()}, srp_keys=undefined | {PublicKey::binary(), PrivateKey::binary()}, premaster_secret=undefined | binary(), file_ref_db=undefined | db_handle(), cert_db_ref=undefined | certdb_ref(), bytes_to_read=undefined | integer(), user_data_buffer=undefined | binary(), renegotiation=undefined | {boolean(), From::term() | internal | peer}, start_or_recv_from=undefined | term(), timer=undefined | reference(), send_queue=undefined | queue(), terminated=boolean(), allow_renegotiate=boolean(), expecting_next_protocol_negotiation=boolean(), next_protocol=undefined | binary(), client_ecc=any()}, Connection::tls_connection | dtls_connection) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="abbreviated-3"/>
 </desc></func>
<func>
<name>certify(Hello_request::#hello_request{} | #certificate{} | #server_key_exchange{} | #certificate_request{} | #server_hello_done{} | #client_key_exchange{} | term(), State::#state{role=undefined | client | server, user_application=undefined | {Monitor::reference(), User::pid()}, transport_cb=undefined | atom(), protocol_cb=undefined | tls_connection | dtls_connection, data_tag=undefined | atom(), close_tag=undefined | atom(), error_tag=undefined | atom(), host=undefined | string() | ip_address() (see module inet), port=undefined | integer(), socket=undefined | port(), ssl_options=undefined | #ssl_options{protocol=undefined | tls | dtls, versions=undefined | ['tlsv1.2' | 'tlsv1.1' | tlsv1 | sslv3] | ['dtlsv1.2' | dtlsv1], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded(), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded()}, password=undefined | string(), cacerts=undefined | [der_encoded()], cacertfile=undefined | binary(), dh=undefined | der_encoded(), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), debug=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}, socket_options=undefined | #socket_options{}, connection_states=undefined | #connection_states{}, protocol_buffers=undefined | term(), tls_handshake_history=undefined | tls_handshake_history(), cert_db=undefined | reference(), session=undefined | #session{}, session_cache=undefined | db_handle(), session_cache_cb=undefined | atom(), negotiated_version=undefined | tls_version(), client_certificate_requested=boolean(), key_algorithm=undefined | key_algo(), hashsign_algorithm=any(), cert_hashsign_algorithm=any(), public_key_info=undefined | public_key_info(), private_key=undefined | private_key() (see module public_key), diffie_hellman_params=any(), diffie_hellman_keys=any(), psk_identity=undefined | binary(), srp_params=undefined | #srp_user{generator=undefined | binary(), prime=undefined | binary(), salt=undefined | binary(), verifier=undefined | binary()}, srp_keys=undefined | {PublicKey::binary(), PrivateKey::binary()}, premaster_secret=undefined | binary(), file_ref_db=undefined | db_handle(), cert_db_ref=undefined | certdb_ref(), bytes_to_read=undefined | integer(), user_data_buffer=undefined | binary(), renegotiation=undefined | {boolean(), From::term() | internal | peer}, start_or_recv_from=undefined | term(), timer=undefined | reference(), send_queue=undefined | queue(), terminated=boolean(), allow_renegotiate=boolean(), expecting_next_protocol_negotiation=boolean(), next_protocol=undefined | binary(), client_ecc=any()}, Connection::tls_connection | dtls_connection) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="certify-3"/>
 </desc></func>
<func>
<name>cipher(Hello_request::#hello_request{} | #certificate_verify{} | #finished{} | term(), State::#state{role=undefined | client | server, user_application=undefined | {Monitor::reference(), User::pid()}, transport_cb=undefined | atom(), protocol_cb=undefined | tls_connection | dtls_connection, data_tag=undefined | atom(), close_tag=undefined | atom(), error_tag=undefined | atom(), host=undefined | string() | ip_address() (see module inet), port=undefined | integer(), socket=undefined | port(), ssl_options=undefined | #ssl_options{protocol=undefined | tls | dtls, versions=undefined | ['tlsv1.2' | 'tlsv1.1' | tlsv1 | sslv3] | ['dtlsv1.2' | dtlsv1], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded(), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded()}, password=undefined | string(), cacerts=undefined | [der_encoded()], cacertfile=undefined | binary(), dh=undefined | der_encoded(), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), debug=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}, socket_options=undefined | #socket_options{}, connection_states=undefined | #connection_states{}, protocol_buffers=undefined | term(), tls_handshake_history=undefined | tls_handshake_history(), cert_db=undefined | reference(), session=undefined | #session{}, session_cache=undefined | db_handle(), session_cache_cb=undefined | atom(), negotiated_version=undefined | tls_version(), client_certificate_requested=boolean(), key_algorithm=undefined | key_algo(), hashsign_algorithm=any(), cert_hashsign_algorithm=any(), public_key_info=undefined | public_key_info(), private_key=undefined | private_key() (see module public_key), diffie_hellman_params=any(), diffie_hellman_keys=any(), psk_identity=undefined | binary(), srp_params=undefined | #srp_user{generator=undefined | binary(), prime=undefined | binary(), salt=undefined | binary(), verifier=undefined | binary()}, srp_keys=undefined | {PublicKey::binary(), PrivateKey::binary()}, premaster_secret=undefined | binary(), file_ref_db=undefined | db_handle(), cert_db_ref=undefined | certdb_ref(), bytes_to_read=undefined | integer(), user_data_buffer=undefined | binary(), renegotiation=undefined | {boolean(), From::term() | internal | peer}, start_or_recv_from=undefined | term(), timer=undefined | reference(), send_queue=undefined | queue(), terminated=boolean(), allow_renegotiate=boolean(), expecting_next_protocol_negotiation=boolean(), next_protocol=undefined | binary(), client_ecc=any()}, Connection::tls_connection | dtls_connection) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="cipher-3"/>
 </desc></func>
<func>
<name>connection(Msg::term(), State::#state{role=undefined | client | server, user_application=undefined | {Monitor::reference(), User::pid()}, transport_cb=undefined | atom(), protocol_cb=undefined | tls_connection | dtls_connection, data_tag=undefined | atom(), close_tag=undefined | atom(), error_tag=undefined | atom(), host=undefined | string() | ip_address() (see module inet), port=undefined | integer(), socket=undefined | port(), ssl_options=undefined | #ssl_options{protocol=undefined | tls | dtls, versions=undefined | ['tlsv1.2' | 'tlsv1.1' | tlsv1 | sslv3] | ['dtlsv1.2' | dtlsv1], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded(), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded()}, password=undefined | string(), cacerts=undefined | [der_encoded()], cacertfile=undefined | binary(), dh=undefined | der_encoded(), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), debug=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}, socket_options=undefined | #socket_options{}, connection_states=undefined | #connection_states{}, protocol_buffers=undefined | term(), tls_handshake_history=undefined | tls_handshake_history(), cert_db=undefined | reference(), session=undefined | #session{}, session_cache=undefined | db_handle(), session_cache_cb=undefined | atom(), negotiated_version=undefined | tls_version(), client_certificate_requested=boolean(), key_algorithm=undefined | key_algo(), hashsign_algorithm=any(), cert_hashsign_algorithm=any(), public_key_info=undefined | public_key_info(), private_key=undefined | private_key() (see module public_key), diffie_hellman_params=any(), diffie_hellman_keys=any(), psk_identity=undefined | binary(), srp_params=undefined | #srp_user{generator=undefined | binary(), prime=undefined | binary(), salt=undefined | binary(), verifier=undefined | binary()}, srp_keys=undefined | {PublicKey::binary(), PrivateKey::binary()}, premaster_secret=undefined | binary(), file_ref_db=undefined | db_handle(), cert_db_ref=undefined | certdb_ref(), bytes_to_read=undefined | integer(), user_data_buffer=undefined | binary(), renegotiation=undefined | {boolean(), From::term() | internal | peer}, start_or_recv_from=undefined | term(), timer=undefined | reference(), send_queue=undefined | queue(), terminated=boolean(), allow_renegotiate=boolean(), expecting_next_protocol_negotiation=boolean(), next_protocol=undefined | binary(), client_ecc=any()}, Connection::tls_connection | dtls_connection) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="connection-3"/>
 </desc></func>
<func>
<name>handle_sync_event(X1, From, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_sync_event-4"/>
 </desc></func>
<func>
<name>handle_info(Msg, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_info-3"/>
 </desc></func>
<func>
<name>terminate(Reason, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="terminate-3"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>