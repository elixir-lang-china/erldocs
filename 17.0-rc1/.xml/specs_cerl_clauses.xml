<module name="cerl_clauses">
<type>
  <name>bindings</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-bindings">bindings()</marker> = [{<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>}]</typehead></typedecl>
</type>
<type>
  <name>expr</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-expr">expr()</marker> = any | <seealso marker="cerl#type-cerl">cerl:cerl()</seealso></typehead></typedecl>
</type>
<type>
  <name>match_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-match_ret">match_ret()</marker> = none | {true, <seealso marker="#type-bindings">bindings()</seealso>} | {false, <seealso marker="#type-bindings">bindings()</seealso>}</typehead></typedecl>
</type>
<spec>
  <name>any_catchall</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>any_catchall(Cs :: [<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>]) -&gt; boolean()</head></clause>
  </contract>
  <anno>Cs</anno>
</spec>
<spec>
  <name>eval_guard</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>eval_guard(E :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt; none | {value, term()}</head></clause>
  </contract>
  <anno>E</anno>
</spec>
<spec>
  <name>is_catchall</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_catchall(C :: <seealso marker="cerl#type-c_clause">cerl:c_clause()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>match</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>match(P :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, E :: <seealso marker="#type-expr">expr()</seealso>) -&gt; <seealso marker="#type-match_ret">match_ret()</seealso></head></clause>
  </contract>
  <anno>E</anno>
  <anno>P</anno>
</spec>
<spec>
  <name>match_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>match_list(Ps :: [<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>], Es :: [<seealso marker="#type-expr">expr()</seealso>]) -&gt; <seealso marker="#type-match_ret">match_ret()</seealso></head></clause>
  </contract>
  <anno>Es</anno>
  <anno>Ps</anno>
</spec>
<spec>
  <name>reduce</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>reduce(Cs :: [<seealso marker="cerl#type-c_clause">cerl:c_clause()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{true, {<seealso marker="cerl#type-c_clause">cerl:c_clause()</seealso>, <seealso marker="#type-bindings">bindings()</seealso>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{false, [<seealso marker="cerl#type-c_clause">cerl:c_clause()</seealso>]}</head></clause>
  </contract>
  <anno>Cs</anno>
</spec>
<spec>
  <name>reduce</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reduce(Cs :: [<seealso marker="cerl#type-c_clause">cerl:c_clause()</seealso>], Es :: [<seealso marker="#type-expr">expr()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{true, {<seealso marker="cerl#type-c_clause">cerl:c_clause()</seealso>, <seealso marker="#type-bindings">bindings()</seealso>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{false, [<seealso marker="cerl#type-c_clause">cerl:c_clause()</seealso>]}</head></clause>
  </contract>
  <anno>Cs</anno>
  <anno>Es</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:17:29.</timestamp>
</module>