<module name="pg">
<spec>
  <name>create</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>create(PgName) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>PgName</typename><string>PgName = term()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = already_created | term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>PgName</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>create</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>create(PgName, Node) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>PgName</typename><string>PgName = term()</string></subtype>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = already_created | term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
  <anno>PgName</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>esend</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>esend(PgName, Msg) -&gt; ok</head>
      <guard>
        <subtype><typename>PgName</typename><string>PgName = Msg = term()</string></subtype>
        <subtype><typename>Msg</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>PgName</anno>
</spec>
<spec>
  <name>join</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>join(PgName, Pid) -&gt; Members</head>
      <guard>
        <subtype><typename>PgName</typename><string>PgName = term()</string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Members</typename><string>Members = [pid()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Members</anno>
  <anno>PgName</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>master</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>master(PgName :: term()) -&gt; no_return()</head></clause>
  </contract>
  <anno>PgName</anno>
</spec>
<spec>
  <name>members</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>members(PgName) -&gt; Members</head>
      <guard>
        <subtype><typename>PgName</typename><string>PgName = term()</string></subtype>
        <subtype><typename>Members</typename><string>Members = [pid()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Members</anno>
  <anno>PgName</anno>
</spec>
<spec>
  <name>name_to_pid</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>name_to_pid(PgName :: atom()) -&gt; pid() | undefined</head></clause>
  </contract>
  <anno>PgName</anno>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send(PgName, Msg) -&gt; ok</head>
      <guard>
        <subtype><typename>PgName</typename><string>PgName = Msg = term()</string></subtype>
        <subtype><typename>Msg</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>PgName</anno>
</spec>
<spec>
  <name>standby</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>standby(PgName :: term(), Node :: node()) -&gt; ok</head></clause>
  </contract>
  <anno>Node</anno>
  <anno>PgName</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:15:50.</timestamp>
</module>