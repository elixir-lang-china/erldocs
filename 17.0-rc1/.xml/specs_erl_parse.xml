<module name="erl_parse">
<type>
  <name>abstract_clause</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-abstract_clause">abstract_clause()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>abstract_expr</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-abstract_expr">abstract_expr()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>abstract_form</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-abstract_form">abstract_form()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>error_description</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-error_description">error_description()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>error_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-error_info">error_info()</marker> = {<seealso marker="erl_scan#type-line">erl_scan:line()</seealso>, module(), <seealso marker="#type-error_description">error_description()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>pre_op</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-pre_op">pre_op()</marker> = 'catch' | '+' | '-' | 'bnot' | 'not' | '#'</typehead></typedecl>
</type>
<type>
  <name>token</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-token">token()</marker> = <seealso marker="erl_scan#type-token">erl_scan:token()</seealso></typehead></typedecl>
</type>
<type>
  <name>yecc_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-yecc_ret">yecc_ret()</marker> = {error, term()} | {ok, term()}</typehead></typedecl>
</type>
<spec>
  <name>abstract</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>abstract(Data) -&gt; AbsTerm</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = term()</string></subtype>
        <subtype><typename>AbsTerm</typename><string>AbsTerm = <seealso marker="#type-abstract_expr">abstract_expr()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>AbsTerm</anno>
  <anno>Data</anno>
</spec>
<spec>
  <name>abstract</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>abstract(Data, Options) -&gt; AbsTerm</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = term()</string></subtype>
        <subtype><typename>Options</typename><string>Options = Line | [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {line, Line} | {encoding, Encoding}</string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = latin1 | unicode | utf8</string></subtype>
        <subtype><typename>Line</typename><string>Line = <seealso marker="erl_scan#type-line">erl_scan:line()</seealso></string></subtype>
        <subtype><typename>AbsTerm</typename><string>AbsTerm = <seealso marker="#type-abstract_expr">abstract_expr()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>AbsTerm</anno>
  <anno>Data</anno>
  <anno>Encoding</anno>
  <anno>Line</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>format_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error(Message :: any()) -&gt; [char() | list()]</head></clause>
  </contract>
  <anno>Message</anno>
</spec>
<spec>
  <name>func_prec</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>func_prec() -&gt; {800, 700}</head></clause>
  </contract>
</spec>
<spec>
  <name>get_attribute</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>get_attributes</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>inop_prec</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>max_prec</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>max_prec() -&gt; 900</head></clause>
  </contract>
</spec>
<spec>
  <name>normalise</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>normalise(AbsTerm) -&gt; Data</head>
      <guard>
        <subtype><typename>AbsTerm</typename><string>AbsTerm = <seealso marker="#type-abstract_expr">abstract_expr()</seealso></string></subtype>
        <subtype><typename>Data</typename><string>Data = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>AbsTerm</anno>
  <anno>Data</anno>
</spec>
<spec>
  <name>parse</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse(Tokens :: list()) -&gt; <seealso marker="#type-yecc_ret">yecc_ret()</seealso></head></clause>
  </contract>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>parse_and_scan</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_and_scan(X1 :: {function() | {atom(), atom()}, [term()]}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {atom(), atom(), [term()]}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-yecc_ret">yecc_ret()</seealso></head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>parse_exprs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_exprs(Tokens) -&gt; {ok, ExprList} | {error, ErrorInfo}</head>
      <guard>
        <subtype><typename>Tokens</typename><string>Tokens = [<seealso marker="#type-token">token()</seealso>]</string></subtype>
        <subtype><typename>ExprList</typename><string>ExprList = [<seealso marker="#type-abstract_expr">abstract_expr()</seealso>]</string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seealso marker="#type-error_info">error_info()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorInfo</anno>
  <anno>ExprList</anno>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>parse_form</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_form(Tokens) -&gt; {ok, AbsForm} | {error, ErrorInfo}</head>
      <guard>
        <subtype><typename>Tokens</typename><string>Tokens = [<seealso marker="#type-token">token()</seealso>]</string></subtype>
        <subtype><typename>AbsForm</typename><string>AbsForm = <seealso marker="#type-abstract_form">abstract_form()</seealso></string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seealso marker="#type-error_info">error_info()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>AbsForm</anno>
  <anno>ErrorInfo</anno>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>parse_term</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_term(Tokens) -&gt; {ok, Term} | {error, ErrorInfo}</head>
      <guard>
        <subtype><typename>Tokens</typename><string>Tokens = [<seealso marker="#type-token">token()</seealso>]</string></subtype>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seealso marker="#type-error_info">error_info()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorInfo</anno>
  <anno>Term</anno>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>preop_prec</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>preop_prec(X1 :: <seealso marker="#type-pre_op">pre_op()</seealso>) -&gt; {0 | 600 | 700, 100 | 700 | 800}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>set_line</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>tokens</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tokens(AbsTerm) -&gt; Tokens</head>
      <guard>
        <subtype><typename>AbsTerm</typename><string>AbsTerm = <seealso marker="#type-abstract_expr">abstract_expr()</seealso></string></subtype>
        <subtype><typename>Tokens</typename><string>Tokens = [<seealso marker="#type-token">token()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>AbsTerm</anno>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>tokens</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>tokens(AbsTerm, MoreTokens) -&gt; Tokens</head>
      <guard>
        <subtype><typename>AbsTerm</typename><string>AbsTerm = <seealso marker="#type-abstract_expr">abstract_expr()</seealso></string></subtype>
        <subtype><typename>MoreTokens</typename><string>MoreTokens = Tokens = [<seealso marker="#type-token">token()</seealso>]</string></subtype>
        <subtype><typename>Tokens</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>AbsTerm</anno>
  <anno>MoreTokens</anno>
  <anno>Tokens</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:15:48.</timestamp>
</module>