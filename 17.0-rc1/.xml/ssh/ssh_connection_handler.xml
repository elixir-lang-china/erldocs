<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ssh_connection_handler</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ssh_connection_handler.xml</file></header>
<module>ssh_connection_handler</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>channel_id() = integer()</c></tag>
<item><marker id="type-channel_id"/> </item>
<tag><c>gen_fsm_state_return() = {next_state, state_name(), term()} | {next_state, state_name(), term(), timeout()} | {stop, term(), term()}</c></tag>
<item><marker id="type-gen_fsm_state_return"/> </item>
<tag><c>state_name() = hello | kexinit | key_exchange | new_keys | userauth | connection</c></tag>
<item><marker id="type-state_name"/> </item>
</taglist></section>
<funcs>
<func>
<name>start_connection(Role::client | server, Socket::port(), Options::proplist() (see module proplists), Timeout::timeout()) -&gt; {ok, pid()} | {error, term()}</name>
<fsummary> </fsummary>

<desc><marker id="start_connection-4"/>
 </desc></func>
<func>
<name>start_link(Role, Socket, Options) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="start_link-3"/>
 </desc></func>
<func>
<name>init(X1) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="init-1"/>
 </desc></func>
<func>
<name>open_channel(ConnectionHandler::pid(), ChannelType::string(), ChannelSpecificData::iodata(), InitialWindowSize::integer(), MaxPacketSize::integer(), Timeout::timeout()) -&gt; {open, channel_id()} | {open_error, term(), string(), string()}</name>
<fsummary> </fsummary>

<desc><marker id="open_channel-6"/>
 </desc></func>
<func>
<name>request(ConnectionHandler::pid(), ChannelPid::pid(), ChannelId::channel_id(), Type::string(), X5::boolean(), Data::iodata(), Timeout::timeout()) -&gt; success | failure | ok | {error, term()}</name>
<fsummary> </fsummary>

<desc><marker id="request-7"/>
 </desc></func>
<func>
<name>request(ConnectionHandler::pid(), ChannelId::channel_id(), Type::string(), X4::boolean(), Data::iodata(), Timeout::timeout()) -&gt; success | failure | {error, timeout}</name>
<fsummary> </fsummary>

<desc><marker id="request-6"/>
 </desc></func>
<func>
<name>reply_request(ConnectionHandler::pid(), Status::success | failure, ChannelId::channel_id()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="reply_request-3"/>
 </desc></func>
<func>
<name>global_request(ConnectionHandler::pid(), Type::string(), Reply::boolean(), Data::iolist()) -&gt; ok | error</name>
<fsummary> </fsummary>

<desc><marker id="global_request-4"/>
 </desc></func>
<func>
<name>send(ConnectionHandler::pid(), ChannelId::channel_id(), Type::integer(), Data::iolist(), Timeout::timeout()) -&gt; ok | {error, timeout} | {error, closed}</name>
<fsummary> </fsummary>

<desc><marker id="send-5"/>
 </desc></func>
<func>
<name>send_eof(ConnectionHandler::pid(), ChannelId::channel_id()) -&gt; ok | {error, closed}</name>
<fsummary> </fsummary>

<desc><marker id="send_eof-2"/>
 </desc></func>
<func>
<name>connection_info(ConnectionHandler::pid(), Options::[atom()]) -&gt; proplist() (see module proplists)</name>
<fsummary> </fsummary>

<desc><marker id="connection_info-2"/>
 </desc></func>
<func>
<name>channel_info(ConnectionHandler::pid(), ChannelId::channel_id(), Options::[atom()]) -&gt; proplist() (see module proplists)</name>
<fsummary> </fsummary>

<desc><marker id="channel_info-3"/>
 </desc></func>
<func>
<name>adjust_window(ConnectionHandler::pid(), Channel::channel_id(), Bytes::integer()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="adjust_window-3"/>
 </desc></func>
<func>
<name>renegotiate(ConnectionHandler::pid()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="renegotiate-1"/>
 </desc></func>
<func>
<name>renegotiate_data(ConnectionHandler::pid()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="renegotiate_data-1"/>
 </desc></func>
<func>
<name>close(ConnectionHandler::pid(), ChannelId::channel_id()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="close-2"/>
 </desc></func>
<func>
<name>stop(ConnectionHandler::pid()) -&gt; ok | {error, term()}</name>
<fsummary> </fsummary>

<desc><marker id="stop-1"/>
 </desc></func>
<func>
<name>info(ConnectionHandler) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="info-1"/>
 </desc></func>
<func>
<name>info(ConnectionHandler, ChannelProcess) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="info-2"/>
 </desc></func>
<func>
<name>hello(X1::socket_control | {info_line, list()} | {version_exchange, list()}, State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="hello-2"/>
 </desc></func>
<func>
<name>kexinit(X1::{#ssh_msg_kexinit{}, binary()}, State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="kexinit-2"/>
 </desc></func>
<func>
<name>key_exchange(Ssh_msg_kexdh_init::#ssh_msg_kexdh_init{} | #ssh_msg_kexdh_reply{} | #ssh_msg_kex_dh_gex_group{} | #ssh_msg_kex_dh_gex_request{} | #ssh_msg_kex_dh_gex_request{} | #ssh_msg_kex_dh_gex_reply{}, State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="key_exchange-2"/>
 </desc></func>
<func>
<name>new_keys(Ssh_msg_newkeys::#ssh_msg_newkeys{}, State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="new_keys-2"/>
 </desc></func>
<func>
<name>userauth(Ssh_msg_service_request::#ssh_msg_service_request{} | #ssh_msg_service_accept{} | #ssh_msg_userauth_request{} | #ssh_msg_userauth_info_request{} | #ssh_msg_userauth_info_response{} | #ssh_msg_userauth_success{} | #ssh_msg_userauth_failure{} | #ssh_msg_userauth_banner{}, State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="userauth-2"/>
 </desc></func>
<func>
<name>connected(Event::{#ssh_msg_kexinit{}, binary()}, State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="connected-2"/>
 </desc></func>
<func>
<name>handle_event(Ssh_msg_disconnect::#ssh_msg_disconnect{} | #ssh_msg_ignore{} | #ssh_msg_debug{} | #ssh_msg_unimplemented{} | {adjust_window, integer(), integer()} | {reply_request, success | failure, integer()} | renegotiate | data_size | {request, pid(), integer(), integer(), iolist()} | {request, integer(), integer(), iolist()}, StateName::state_name(), State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="handle_event-3"/>
 </desc></func>
<func>
<name>handle_sync_event(Request::{request, pid(), channel_id(), integer(), binary(), timeout()} | {request, channel_id(), integer(), binary(), timeout()} | {global_request, pid(), integer(), boolean(), binary()} | {eof, integer()} | {open, pid(), integer(), channel_id(), integer(), binary(), term()} | {send_window, channel_id()} | {recv_window, channel_id()} | {connection_info, [client_version | server_version | peer | sockname]} | {channel_info, channel_id(), [recv_window | send_window]} | {close, channel_id()} | stop, From::term(), StateName::state_name(), State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="handle_sync_event-4"/>
 </desc></func>
<func>
<name>handle_info(UnexpectedMessage::{atom(), port(), binary()} | {atom(), port()} | term(), Statename::state_name(), State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="handle_info-3"/>
 </desc></func>
<func>
<name>terminate(Reason::term(), StateName::state_name(), State::#state{}) -&gt; term()</name>
<fsummary> </fsummary>

<desc><marker id="terminate-3"/>
 </desc></func>
<func>
<name>code_change(OldVsn::term(), StateName::state_name(), Oldstate::term(), Extra::term()) -&gt; {ok, state_name(), #state{}}</name>
<fsummary> </fsummary>

<desc><marker id="code_change-4"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>