<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_callgraph</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_callgraph.xml</file></header>
<module>dialyzer_callgraph</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>active_digraph() = {d, digraph()} | {e, tid() (see module ets), tid() (see module ets)}</c></tag>
<item><marker id="type-active_digraph"/> </item>
<tag><c>callgraph() = #callgraph{digraph=digraph(), active_digraph=undefined | active_digraph(), esc=undefined | tid() (see module ets), letrec_map=undefined | tid() (see module ets), name_map=undefined | tid() (see module ets), rev_name_map=undefined | tid() (see module ets), rec_var_map=undefined | tid() (see module ets), self_rec=undefined | tid() (see module ets), calls=undefined | tid() (see module ets), race_detection=boolean(), race_data_server=pid()}</c></tag>
<item><marker id="type-callgraph"/> </item>
<tag><c>callgraph_edge() = {mfa_or_funlbl(), mfa_or_funlbl()}</c></tag>
<item><marker id="type-callgraph_edge"/> </item>
<tag><c>label() = non_neg_integer()</c></tag>
<item><marker id="type-label"/> </item>
<tag><c>mfa_calls() = [{mfa_or_funlbl(), mfa_or_funlbl()}]</c></tag>
<item><marker id="type-mfa_calls"/> </item>
<tag><c>mfa_or_funlbl() = label() | mfa()</c></tag>
<item><marker id="type-mfa_or_funlbl"/> </item>
<tag><c>scc() = [mfa_or_funlbl()]</c></tag>
<item><marker id="type-scc"/> </item>
</taglist></section>
<funcs>
<func>
<name>new() -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="new-0"/>
 </desc></func>
<func>
<name>delete(Callgraph::callgraph()) -&gt; true</name>
<fsummary> </fsummary>

<desc><marker id="delete-1"/>
 </desc></func>
<func>
<name>all_nodes(Callgraph::callgraph()) -&gt; [mfa()]</name>
<fsummary> </fsummary>

<desc><marker id="all_nodes-1"/>
 </desc></func>
<func>
<name>lookup_rec_var(Label::label(), Callgraph::callgraph()) -&gt; error | {ok, mfa()}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_rec_var-2"/>
 </desc></func>
<func>
<name>lookup_letrec(Label::label(), Callgraph::callgraph()) -&gt; error | {ok, label()}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_letrec-2"/>
 </desc></func>
<func>
<name>lookup_call_site(Label::label(), Callgraph::callgraph()) -&gt; error | {ok, [term()]}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_call_site-2"/>
 </desc></func>
<func>
<name>lookup_name(Label::label(), Callgraph::callgraph()) -&gt; error | {ok, mfa()}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_name-2"/>
 </desc></func>
<func>
<name>lookup_label(MFA::mfa_or_funlbl(), Callgraph::callgraph()) -&gt; error | {ok, integer()}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_label-2"/>
 </desc></func>
<func>
<name>in_neighbours(Label::mfa_or_funlbl(), Callgraph::callgraph()) -&gt; none | [mfa_or_funlbl(), ...]</name>
<fsummary> </fsummary>

<desc><marker id="in_neighbours-2"/>
 </desc></func>
<func>
<name>is_self_rec(MfaOrLabel::mfa_or_funlbl(), Callgraph::callgraph()) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="is_self_rec-2"/>
 </desc></func>
<func>
<name>is_escaping(Label::label(), Callgraph::callgraph()) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="is_escaping-2"/>
 </desc></func>
<func>
<name>add_edges(Edges::[callgraph_edge()], CG::callgraph()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="add_edges-2"/>
 </desc></func>
<func>
<name>add_edges(Edges::[callgraph_edge()], MFAs::[mfa_or_funlbl()], Callgraph::callgraph()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="add_edges-3"/>
 </desc></func>
<func>
<name>remove_external(Callgraph::callgraph()) -&gt; {callgraph(), [tuple()]}</name>
<fsummary> </fsummary>

<desc><marker id="remove_external-1"/>
 </desc></func>
<func>
<name>non_local_calls(Callgraph::callgraph()) -&gt; mfa_calls()</name>
<fsummary> </fsummary>

<desc><marker id="non_local_calls-1"/>
 </desc></func>
<func>
<name>get_depends_on(SCC::scc() | module(), Callgraph::callgraph()) -&gt; [scc()]</name>
<fsummary> </fsummary>

<desc><marker id="get_depends_on-2"/>
 </desc></func>
<func>
<name>get_required_by(SCC::scc() | module(), Callgraph::callgraph()) -&gt; [scc()]</name>
<fsummary> </fsummary>

<desc><marker id="get_required_by-2"/>
 </desc></func>
<func>
<name>modules(Callgraph::callgraph()) -&gt; [module()]</name>
<fsummary> </fsummary>

<desc><marker id="modules-1"/>
 </desc></func>
<func>
<name>module_deps(Callgraph::callgraph()) -&gt; dict()</name>
<fsummary> </fsummary>

<desc><marker id="module_deps-1"/>
 </desc></func>
<func>
<name>strip_module_deps(ModDeps::dict(), StripSet::set()) -&gt; dict()</name>
<fsummary> </fsummary>

<desc><marker id="strip_module_deps-2"/>
 </desc></func>
<func>
<name>finalize(Callgraph::callgraph()) -&gt; {[scc()], callgraph()}</name>
<fsummary> </fsummary>

<desc><marker id="finalize-1"/>
 </desc></func>
<func>
<name>reset_from_funs(Funs::[mfa_or_funlbl()], Callgraph::callgraph()) -&gt; {[scc()], callgraph()}</name>
<fsummary> </fsummary>

<desc><marker id="reset_from_funs-2"/>
 </desc></func>
<func>
<name>module_postorder_from_funs(Funs::[mfa_or_funlbl()], Callgraph::callgraph()) -&gt; {[module()], callgraph()}</name>
<fsummary> </fsummary>

<desc><marker id="module_postorder_from_funs-2"/>
 </desc></func>
<func>
<name>scan_core_tree(Tree::c_module() (see module cerl), Callgraph::callgraph()) -&gt; {[mfa_or_funlbl()], [callgraph_edge()]}</name>
<fsummary> </fsummary>

<desc><marker id="scan_core_tree-2"/>
 </desc></func>
<func>
<name>renew_race_info(Callgraph::callgraph(), RaceCode::dict(), PublicTables::[label()], NamedTables::[string()]) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="renew_race_info-4"/>
 </desc></func>
<func>
<name>renew_race_code(Races::races() (see module dialyzer_races), Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="renew_race_code-2"/>
 </desc></func>
<func>
<name>renew_race_public_tables(VarLabel::label(), Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="renew_race_public_tables-2"/>
 </desc></func>
<func>
<name>cleanup(Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="cleanup-1"/>
 </desc></func>
<func>
<name>duplicate(Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="duplicate-1"/>
 </desc></func>
<func>
<name>dispose_race_server(Callgraph::callgraph()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="dispose_race_server-1"/>
 </desc></func>
<func>
<name>get_digraph(Callgraph::callgraph()) -&gt; digraph()</name>
<fsummary> </fsummary>

<desc><marker id="get_digraph-1"/>
 </desc></func>
<func>
<name>get_named_tables(Callgraph::callgraph()) -&gt; [string()]</name>
<fsummary> </fsummary>

<desc><marker id="get_named_tables-1"/>
 </desc></func>
<func>
<name>get_public_tables(Callgraph::callgraph()) -&gt; [label()]</name>
<fsummary> </fsummary>

<desc><marker id="get_public_tables-1"/>
 </desc></func>
<func>
<name>get_race_code(Callgraph::callgraph()) -&gt; dict()</name>
<fsummary> </fsummary>

<desc><marker id="get_race_code-1"/>
 </desc></func>
<func>
<name>get_race_detection(Callgraph::callgraph()) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="get_race_detection-1"/>
 </desc></func>
<func>
<name>get_behaviour_api_calls(Callgraph::callgraph()) -&gt; [{mfa(), mfa()}]</name>
<fsummary> </fsummary>

<desc><marker id="get_behaviour_api_calls-1"/>
 </desc></func>
<func>
<name>race_code_new(Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="race_code_new-1"/>
 </desc></func>
<func>
<name>put_digraph(Digraph::digraph(), Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="put_digraph-2"/>
 </desc></func>
<func>
<name>put_race_code(RaceCode::dict(), Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="put_race_code-2"/>
 </desc></func>
<func>
<name>put_race_detection(RaceDetection::boolean(), Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="put_race_detection-2"/>
 </desc></func>
<func>
<name>put_named_tables(NamedTables::[string()], Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="put_named_tables-2"/>
 </desc></func>
<func>
<name>put_public_tables(PublicTables::[label()], Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="put_public_tables-2"/>
 </desc></func>
<func>
<name>put_behaviour_api_calls(Calls::[{mfa(), mfa()}], Callgraph::callgraph()) -&gt; callgraph()</name>
<fsummary> </fsummary>

<desc><marker id="put_behaviour_api_calls-2"/>
 </desc></func>
<func>
<name>to_dot(Callgraph::callgraph(), File::filename() (see module file)) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="to_dot-2"/>
 </desc></func>
<func>
<name>to_ps(Callgraph::callgraph(), File::filename() (see module file), Args::string()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="to_ps-3"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>