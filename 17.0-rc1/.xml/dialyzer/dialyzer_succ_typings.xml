<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_succ_typings</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_succ_typings.xml</file></header>
<module>dialyzer_succ_typings</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>dataflow_init_data() = term()</c></tag>
<item><marker id="type-dataflow_init_data"/> </item>
<tag><c>dial_warn_tag() = warn_return_no_exit | warn_return_only_exit | warn_not_called | warn_non_proper_list | warn_matching | warn_opaque | warn_fun_app | warn_failing_call | warn_bin_construction | warn_contract_types | warn_contract_syntax | warn_contract_not_equal | warn_contract_subtype | warn_contract_supertype | warn_callgraph | warn_umatched_return | warn_race_condition | warn_behaviour | warn_contract_range | warn_undefined_callbacks</c></tag>
<item><marker id="type-dial_warn_tag"/> </item>
<tag><c>dial_warning() = {dial_warn_tag(), file_line(), {atom(), [term()]}}</c></tag>
<item><marker id="type-dial_warning"/> </item>
<tag><c>doc_plt() = undefined | plt() (see module dialyzer_plt)</c></tag>
<item><marker id="type-doc_plt"/> </item>
<tag><c>file_line() = {filename() (see module file), non_neg_integer()}</c></tag>
<item><marker id="type-file_line"/> </item>
<tag><c>fixpoint_init_data() = typesig_init_data() | dataflow_init_data()</c></tag>
<item><marker id="type-fixpoint_init_data"/> </item>
<tag><c>label() = non_neg_integer()</c></tag>
<item><marker id="type-label"/> </item>
<tag><c>mfa_or_funlbl() = label() | mfa()</c></tag>
<item><marker id="type-mfa_or_funlbl"/> </item>
<tag><c>parent() = none | pid()</c></tag>
<item><marker id="type-parent"/> </item>
<tag><c>scc() = [mfa_or_funlbl()] | [module()]</c></tag>
<item><marker id="type-scc"/> </item>
<tag><c>solver() = v1 | v2</c></tag>
<item><marker id="type-solver"/> </item>
<tag><c>typesig_init_data() = term()</c></tag>
<item><marker id="type-typesig_init_data"/> </item>
<tag><c>warnings_init_data() = term()</c></tag>
<item><marker id="type-warnings_init_data"/> </item>
</taglist></section>
<funcs>
<func>
<name>analyze_callgraph(Callgraph::callgraph() (see module dialyzer_callgraph), Plt::plt() (see module dialyzer_plt), Codeserver::codeserver() (see module dialyzer_codeserver)) -&gt; plt() (see module dialyzer_plt)</name>
<fsummary> </fsummary>

<desc><marker id="analyze_callgraph-3"/>
 </desc></func>
<func>
<name>analyze_callgraph(Callgraph::callgraph() (see module dialyzer_callgraph), Plt::plt() (see module dialyzer_plt), Codeserver::codeserver() (see module dialyzer_codeserver), TimingServer::timing_server() (see module dialyzer_timing), Solvers::[solver()], Parent::parent()) -&gt; plt() (see module dialyzer_plt)</name>
<fsummary> </fsummary>

<desc><marker id="analyze_callgraph-6"/>
 </desc></func>
<func>
<name>get_warnings(Callgraph::callgraph() (see module dialyzer_callgraph), Plt::plt() (see module dialyzer_plt), DocPlt::doc_plt(), Codeserver::codeserver() (see module dialyzer_codeserver), NoWarnUnused::set(), TimingServer::timing_server() (see module dialyzer_timing), Solvers::[solver()], Parent::pid()) -&gt; {[dial_warning()], plt() (see module dialyzer_plt), doc_plt()}</name>
<fsummary> </fsummary>

<desc><marker id="get_warnings-8"/>
 </desc></func>
<func>
<name>collect_warnings(M::module(), X2::warnings_init_data()) -&gt; [dial_warning()]</name>
<fsummary> </fsummary>

<desc><marker id="collect_warnings-2"/>
 </desc></func>
<func>
<name>find_depends_on(SCC::scc() | module(), X2::fixpoint_init_data()) -&gt; [scc()]</name>
<fsummary> </fsummary>

<desc><marker id="find_depends_on-2"/>
 </desc></func>
<func>
<name>find_required_by(SCC::scc() | module(), X2::fixpoint_init_data()) -&gt; [scc()]</name>
<fsummary> </fsummary>

<desc><marker id="find_required_by-2"/>
 </desc></func>
<func>
<name>lookup_names(Labels::[label()], X2::fixpoint_init_data()) -&gt; [mfa_or_funlbl()]</name>
<fsummary> </fsummary>

<desc><marker id="lookup_names-2"/>
 </desc></func>
<func>
<name>refine_one_module(M::module(), X2::dataflow_init_data()) -&gt; [label()]</name>
<fsummary> </fsummary>

<desc><marker id="refine_one_module-2"/>
 </desc></func>
<func>
<name>find_succ_types_for_scc(SCC::scc(), X2::typesig_init_data()) -&gt; [mfa_or_funlbl()]</name>
<fsummary> </fsummary>

<desc><marker id="find_succ_types_for_scc-2"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>