<module name="orddict">
<type>
  <name>orddict</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-orddict">orddict()</marker> = [{Key :: term(), Value :: term()}]</typehead></typedecl>
  <anno>Key</anno>
  <anno>Value</anno>
</type>
<spec>
  <name>append</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>append(Key, Value, Orddict1) -&gt; Orddict2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Value = term()</string></subtype>
        <subtype><typename>Value</typename><string/></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>append_list</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>append_list(Key, ValList, Orddict1) -&gt; Orddict2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>ValList</typename><string>ValList = [Value :: term()]</string></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
  <anno>ValList</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>erase</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erase(Key, Orddict1) -&gt; Orddict2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
</spec>
<spec>
  <name>fetch</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>fetch(Key, Orddict) -&gt; Value</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Value = term()</string></subtype>
        <subtype><typename>Value</typename><string/></subtype>
        <subtype><typename>Orddict</typename><string>Orddict = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Orddict</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>fetch_keys</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fetch_keys(Orddict) -&gt; Keys</head>
      <guard>
        <subtype><typename>Orddict</typename><string>Orddict = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Keys</typename><string>Keys = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Keys</anno>
  <anno>Orddict</anno>
</spec>
<spec>
  <name>filter</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>filter(Pred, Orddict1) -&gt; Orddict2</head>
      <guard>
        <subtype><typename>Pred</typename><string>Pred = fun((Key :: term(), Value :: term()) -&gt; boolean())</string></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
  <anno>Pred</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>find</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>find(Key, Orddict) -&gt; {ok, Value} | error</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Orddict</typename><string>Orddict = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Orddict</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>fold</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fold(Fun, Acc0, Orddict) -&gt; Acc1</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Key :: term(), Value :: term(), AccIn :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>AccOut :: term())</string></subtype>
        <subtype><typename>Acc0</typename><string>Acc0 = Acc1 = term()</string></subtype>
        <subtype><typename>Acc1</typename><string/></subtype>
        <subtype><typename>Orddict</typename><string>Orddict = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Acc0</anno>
  <anno>Acc1</anno>
  <anno>AccIn</anno>
  <anno>AccOut</anno>
  <anno>Fun</anno>
  <anno>Key</anno>
  <anno>Orddict</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>from_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_list(List) -&gt; Orddict</head>
      <guard>
        <subtype><typename>List</typename><string>List = [{Key :: term(), Value :: term()}]</string></subtype>
        <subtype><typename>Orddict</typename><string>Orddict = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
  <anno>Orddict</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>is_empty</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_empty(Orddict) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Orddict</typename><string>Orddict = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Orddict</anno>
</spec>
<spec>
  <name>is_key</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_key(Key, Orddict) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Orddict</typename><string>Orddict = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Orddict</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(Fun, Orddict1) -&gt; Orddict2</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Key :: term(), Value1 :: term()) -&gt; Value2 :: term())</string></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
  <anno>Value1</anno>
  <anno>Value2</anno>
</spec>
<spec>
  <name>merge</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>merge(Fun, Orddict1, Orddict2) -&gt; Orddict3</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Key :: term(), Value1 :: term(), Value2 :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: term())</string></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = Orddict3 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
        <subtype><typename>Orddict3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
  <anno>Orddict3</anno>
  <anno>Value</anno>
  <anno>Value1</anno>
  <anno>Value2</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; <seealso marker="#type-orddict">orddict()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Orddict) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Orddict</typename><string>Orddict = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Orddict</anno>
</spec>
<spec>
  <name>store</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>store(Key, Value, Orddict1) -&gt; Orddict2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Value = term()</string></subtype>
        <subtype><typename>Value</typename><string/></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_list(Orddict) -&gt; List</head>
      <guard>
        <subtype><typename>Orddict</typename><string>Orddict = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>List</typename><string>List = [{Key :: term(), Value :: term()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
  <anno>Orddict</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>update</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update(Key, Fun, Orddict1) -&gt; Orddict2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = fun((Value1 :: term()) -&gt; Value2 :: term())</string></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
  <anno>Value1</anno>
  <anno>Value2</anno>
</spec>
<spec>
  <name>update</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>update(Key, Fun, Initial, Orddict1) -&gt; Orddict2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Initial = term()</string></subtype>
        <subtype><typename>Initial</typename><string/></subtype>
        <subtype><typename>Fun</typename><string>Fun = fun((Value1 :: term()) -&gt; Value2 :: term())</string></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Initial</anno>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
  <anno>Value1</anno>
  <anno>Value2</anno>
</spec>
<spec>
  <name>update_counter</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_counter(Key, Increment, Orddict1) -&gt; Orddict2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Increment</typename><string>Increment = number()</string></subtype>
        <subtype><typename>Orddict1</typename><string>Orddict1 = Orddict2 = <seealso marker="#type-orddict">orddict()</seealso></string></subtype>
        <subtype><typename>Orddict2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Increment</anno>
  <anno>Key</anno>
  <anno>Orddict1</anno>
  <anno>Orddict2</anno>
</spec>
<timestamp>Generated by EDoc, May 5 2014, 23:15:50.</timestamp>
</module>