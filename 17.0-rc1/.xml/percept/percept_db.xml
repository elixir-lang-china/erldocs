<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>percept_db</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>percept_db.xml</file></header>
<module>percept_db</module>
<modulesummary>Percept database.</modulesummary>
<description>
<p>Percept database.</p>
 	
 </description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>activity_option() = {ts_min, timestamp()} | {ts_max, timestamp()} | {ts_exact, bool()} | {mfa, {atom(), atom(), byte()}} | {state, active | inactive} | {id, all | procs | ports | pid() | port()}</c></tag>
<item><marker id="type-activity_option"/> </item>
<tag><c>information_option() = all | procs | ports | pid() | port()</c></tag>
<item><marker id="type-information_option"/> </item>
<tag><c>scheduler_option() = {ts_min, timestamp()} | {ts_max, timestamp()} | {ts_exact, bool()} | {id, scheduler_id()}</c></tag>
<item><marker id="type-scheduler_option"/> </item>
<tag><c>system_option() = start_ts | stop_ts</c></tag>
<item><marker id="type-system_option"/> </item>
</taglist></section>
<funcs>
<func>
<name>start() -&gt; ok | {started, Pid} | {restarted, Pid}</name>
<fsummary>Starts or restarts the percept database.</fsummary>
<type>
<v>Pid = pid()</v></type>
<desc><marker id="start-0"/>

<p>Starts or restarts the percept database.</p>
</desc></func>
<func>
<name>stop() -&gt; not_started | {stopped, Pid}</name>
<fsummary>Stops the percept database.</fsummary>
<type>
<v>Pid = pid()</v></type>
<desc><marker id="stop-0"/>

<p>Stops the percept database.</p>
</desc></func>
<func>
<name>insert(Trace::tuple()) -&gt; ok</name>
<fsummary>Inserts a trace or profile message to the database.</fsummary>

<desc><marker id="insert-1"/>

<p>Inserts a trace or profile message to the database.</p>
</desc></func>
<func>
<name>select(Query::{atom(), Options}) -&gt; Result</name>
<fsummary>Synchronous call.</fsummary>

<desc><marker id="select-1"/>

<p>Synchronous call. Selects information based on a query.</p>
 
  <p>Queries:</p>
  <pre>
  {system, Option}
 	Option = system_option()
 	Result = timestamp()
  {information, Options}
 	Options = [information_option()]
 	Result = [#information{}]
  {scheduler, Options}
 	Options = [sceduler_option()]
 	Result = [#activity{}]
  {activity, Options}
 	Options = [activity_option()]
 	Result = [#activity{}]
  </pre>
  <p>
  Note: selection of Id's are always OR all other options are considered AND.
  </p>
</desc></func>
<func>
<name>select(Table::atom(), Options::list()) -&gt; Result</name>
<fsummary>Equivalent to select({Table, Options}).
</fsummary>

<desc><marker id="select-2"/>
<p>Equivalent to <seealso marker="#select-1">select({Table, Options})</seealso>.</p>
</desc></func>
<func>
<name>consolidate() -&gt; Result</name>
<fsummary>Checks timestamp and state-flow inconsistencies in the
 	the database.</fsummary>

<desc><marker id="consolidate-0"/>

<p>Checks timestamp and state-flow inconsistencies in the
 	the database.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>