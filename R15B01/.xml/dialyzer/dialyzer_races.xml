<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_races</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_races.xml</file></header>
<module>dialyzer_races</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>args() = [label_type() | [string()]]</c></tag>
<item><marker id="type-args"/> </item>
<tag><c>call() = whereis | register | unregister | ets_new | ets_lookup | ets_insert | mnesia_dirty_read1 | mnesia_dirty_read2 | mnesia_dirty_write1 | mnesia_dirty_write2 | function_call</c></tag>
<item><marker id="type-call"/> </item>
<tag><c>case_tags() = beg_case | #beg_clause{} | #end_clause{} | #end_case{}</c></tag>
<item><marker id="type-case_tags"/> </item>
<tag><c>code() = [#dep_call{} | #fun_call{} | #warn_call{} | #curr_fun{} | #let_tag{} | case_tags() | race_tag()]</c></tag>
<item><marker id="type-code"/> </item>
<tag><c>core_args() = [core_vars()] | empty</c></tag>
<item><marker id="type-core_args"/> </item>
<tag><c>core_vars() = cerl() (see module cerl) | '?no_arg' | '?bypassed'</c></tag>
<item><marker id="type-core_vars"/> </item>
<tag><c>label_type() = label() | [label()] | {label()} | '?no_label'</c></tag>
<item><marker id="type-label_type"/> </item>
<tag><c>race_tag() = whereis_register | whereis_unregister | ets_lookup_insert | mnesia_dirty_read_write</c></tag>
<item><marker id="type-race_tag"/> </item>
<tag><c>races()</c></tag>
<item><marker id="type-races"/> </item>
<tag><c>table() = {named, table_var(), [string()]} | other | no_t</c></tag>
<item><marker id="type-table"/> </item>
<tag><c>table_var() = label() | '?no_label'</c></tag>
<item><marker id="type-table_var"/> </item>
<tag><c>var_to_map1() = core_vars() | [cerl() (see module cerl)]</c></tag>
<item><marker id="type-var_to_map1"/> </item>
</taglist></section>
<funcs>
<func>
<name>store_race_call(Fun::mfa_or_funlbl() (see module dialyzer_callgraph), ArgTypes::[erl_type() (see module erl_types)], Args::[core_vars()], FileLine::file_line(), State::state() (see module dialyzer_dataflow)) -&gt; state() (see module dialyzer_dataflow)</name>
<fsummary> </fsummary>

<desc><marker id="store_race_call-5"/>
 </desc></func>
<func>
<name>race(State::state() (see module dialyzer_dataflow)) -&gt; state() (see module dialyzer_dataflow)</name>
<fsummary> </fsummary>

<desc><marker id="race-1"/>
 </desc></func>
<func>
<name>format_args(ArgList::[core_vars()], TypeList::[erl_type() (see module erl_types)], State::state() (see module dialyzer_dataflow), Call::call()) -&gt; args()</name>
<fsummary> </fsummary>

<desc><marker id="format_args-4"/>
 </desc></func>
<func>
<name>get_race_warnings(Races::races(), State::state() (see module dialyzer_dataflow)) -&gt; {races(), state() (see module dialyzer_dataflow)}</name>
<fsummary> </fsummary>

<desc><marker id="get_race_warnings-2"/>
 </desc></func>
<func>
<name>beg_clause_new(Arg::var_to_map1(), Pats::var_to_map1(), Guard::cerl() (see module cerl)) -&gt; #beg_clause{}</name>
<fsummary> </fsummary>

<desc><marker id="beg_clause_new-3"/>
 </desc></func>
<func>
<name>cleanup(Races::races()) -&gt; races()</name>
<fsummary> </fsummary>

<desc><marker id="cleanup-1"/>
 </desc></func>
<func>
<name>end_case_new(End_clause::[#end_clause{}]) -&gt; #end_case{}</name>
<fsummary> </fsummary>

<desc><marker id="end_case_new-1"/>
 </desc></func>
<func>
<name>end_clause_new(Arg::var_to_map1(), Pats::var_to_map1(), Guard::cerl() (see module cerl)) -&gt; #end_clause{}</name>
<fsummary> </fsummary>

<desc><marker id="end_clause_new-3"/>
 </desc></func>
<func>
<name>get_curr_fun(Races::races()) -&gt; mfa_or_funlbl() (see module dialyzer_callgraph)</name>
<fsummary> </fsummary>

<desc><marker id="get_curr_fun-1"/>
 </desc></func>
<func>
<name>get_curr_fun_args(Races::races()) -&gt; core_args()</name>
<fsummary> </fsummary>

<desc><marker id="get_curr_fun_args-1"/>
 </desc></func>
<func>
<name>get_new_table(Races::races()) -&gt; table()</name>
<fsummary> </fsummary>

<desc><marker id="get_new_table-1"/>
 </desc></func>
<func>
<name>get_race_analysis(Races::races()) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="get_race_analysis-1"/>
 </desc></func>
<func>
<name>get_race_list(Races::races()) -&gt; code()</name>
<fsummary> </fsummary>

<desc><marker id="get_race_list-1"/>
 </desc></func>
<func>
<name>get_race_list_size(Races::races()) -&gt; non_neg_integer()</name>
<fsummary> </fsummary>

<desc><marker id="get_race_list_size-1"/>
 </desc></func>
<func>
<name>let_tag_new(Var::var_to_map1(), Arg::var_to_map1()) -&gt; #let_tag{}</name>
<fsummary> </fsummary>

<desc><marker id="let_tag_new-2"/>
 </desc></func>
<func>
<name>new() -&gt; races()</name>
<fsummary> </fsummary>

<desc><marker id="new-0"/>
 </desc></func>
<func>
<name>put_curr_fun(CurrFun::mfa_or_funlbl() (see module dialyzer_callgraph), CurrFunLabel::label(), Races::races()) -&gt; races()</name>
<fsummary> </fsummary>

<desc><marker id="put_curr_fun-3"/>
 </desc></func>
<func>
<name>put_fun_args(Args::core_args(), Races::races()) -&gt; races()</name>
<fsummary> </fsummary>

<desc><marker id="put_fun_args-2"/>
 </desc></func>
<func>
<name>put_race_analysis(Analysis::boolean(), Races::races()) -&gt; races()</name>
<fsummary> </fsummary>

<desc><marker id="put_race_analysis-2"/>
 </desc></func>
<func>
<name>put_race_list(RaceList::code(), RaceListSize::non_neg_integer(), Races::races()) -&gt; races()</name>
<fsummary> </fsummary>

<desc><marker id="put_race_list-3"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>