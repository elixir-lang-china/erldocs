<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_dataflow</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_dataflow.xml</file></header>
<module>dialyzer_dataflow</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>state()</c></tag>
<item><marker id="type-state"/> </item>
</taglist></section>
<funcs>
<func>
<name>get_warnings(Tree::c_module() (see module cerl), Plt::plt() (see module dialyzer_plt), Callgraph::callgraph() (see module dialyzer_callgraph), Records::dict(), NoWarnUnused::set()) -&gt; {[dial_warning()], dict(), dict(), [label()], [string()]}</name>
<fsummary> </fsummary>

<desc><marker id="get_warnings-5"/>
 </desc></func>
<func>
<name>get_fun_types(Tree::c_module() (see module cerl), Plt::plt() (see module dialyzer_plt), Callgraph::callgraph() (see module dialyzer_callgraph), Records::dict()) -&gt; {dict(), dict(), [label()], [string()]}</name>
<fsummary> </fsummary>

<desc><marker id="get_fun_types-4"/>
 </desc></func>
<func>
<name>pp(File::filename() (see module file)) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="pp-1"/>
 </desc></func>
<func>
<name>get_top_level_signatures(Code::c_module() (see module cerl), Records::dict()) -&gt; [{{atom(), arity()}, erl_type() (see module erl_types)}]</name>
<fsummary> </fsummary>

<desc><marker id="get_top_level_signatures-2"/>
 </desc></func>
<func>
<name>state__add_warning(Warn::dial_warning(), State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__add_warning-2"/>
 </desc></func>
<func>
<name>state__cleanup(State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__cleanup-1"/>
 </desc></func>
<func>
<name>state__get_callgraph(State::state()) -&gt; callgraph() (see module dialyzer_callgraph)</name>
<fsummary> </fsummary>

<desc><marker id="state__get_callgraph-1"/>
 </desc></func>
<func>
<name>state__get_races(State::state()) -&gt; races() (see module dialyzer_races)</name>
<fsummary> </fsummary>

<desc><marker id="state__get_races-1"/>
 </desc></func>
<func>
<name>state__get_records(State::state()) -&gt; dict()</name>
<fsummary> </fsummary>

<desc><marker id="state__get_records-1"/>
 </desc></func>
<func>
<name>state__put_callgraph(Callgraph::callgraph() (see module dialyzer_callgraph), State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__put_callgraph-2"/>
 </desc></func>
<func>
<name>state__put_races(Races::races() (see module dialyzer_races), State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__put_races-2"/>
 </desc></func>
<func>
<name>state__records_only(State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__records_only-1"/>
 </desc></func>
<func>
<name>format_args(ArgList::[cerl() (see module cerl)], TypeList::[erl_type() (see module erl_types)], State::state()) -&gt; nonempty_string()</name>
<fsummary> </fsummary>

<desc><marker id="format_args-3"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>