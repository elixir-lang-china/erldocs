<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>tls_handshake</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>tls_handshake.xml</file></header>
<module>tls_handshake</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>db_handle() = term()</c></tag>
<item><marker id="type-db_handle"/> </item>
<tag><c>der_cert() = binary()</c></tag>
<item><marker id="type-der_cert"/> </item>
<tag><c>host() = ip_address() (see module inet) | hostname() (see module inet)</c></tag>
<item><marker id="type-host"/> </item>
<tag><c>oid() = tuple()</c></tag>
<item><marker id="type-oid"/> </item>
<tag><c>session_id() = 0 | binary()</c></tag>
<item><marker id="type-session_id"/> </item>
<tag><c>ssl_handshake() = #server_hello{} | #server_hello_done{} | #certificate{} | #certificate_request{} | #client_key_exchange{} | #finished{} | #certificate_verify{} | #hello_request{} | #next_protocol{}</c></tag>
<item><marker id="type-ssl_handshake"/> </item>
<tag><c>tls_handshake() = #client_hello{} | ssl_handshake()</c></tag>
<item><marker id="type-tls_handshake"/> </item>
<tag><c>tls_handshake_history() = {[binary()], [binary()]}</c></tag>
<item><marker id="type-tls_handshake_history"/> </item>
<tag><c>tls_version() = {integer(), integer()}</c></tag>
<item><marker id="type-tls_version"/> </item>
</taglist></section>
<funcs>
<func>
<name>client_hello(Host::host(), Port::port_number() (see module inet), Connection_states::#connection_states{}, Ssl_options::#ssl_options{}, Cache::integer(), CacheCb::atom(), Renegotiation::boolean(), OwnCert::der_cert()) -&gt; #client_hello{}</name>
<fsummary> </fsummary>

<desc><marker id="client_hello-8"/>
 </desc></func>
<func>
<name>server_hello(Session::#session{}, Version::tls_version(), Connection_states::#connection_states{}, Hello_extensions::#hello_extensions{}) -&gt; #server_hello{}</name>
<fsummary> </fsummary>

<desc><marker id="server_hello-4"/>
 </desc></func>
<func>
<name>hello(Server_hello::#server_hello{} | #client_hello{}, Ssl_options::#ssl_options{}, ConnectionStates0::#connection_states{} | {port_number() (see module inet), #session{}, db_handle(), atom(), #connection_states{}, binary() | undefined}, Renegotiation::boolean()) -&gt; {tls_version(), session_id(), #connection_states{}, binary() | undefined} | {tls_version(), {resumed | new, #session{}}, #connection_states{}, [binary()] | undefined, [oid()] | undefined, [oid()] | undefined} | #alert{}</name>
<fsummary> </fsummary>

<desc><marker id="hello-4"/>
 </desc></func>
<func>
<name>encode_handshake(Package::tls_handshake(), Version::tls_version()) -&gt; iolist()</name>
<fsummary> </fsummary>

<desc><marker id="encode_handshake-2"/>
 </desc></func>
<func>
<name>get_tls_handshake(Version::tls_version(), Data::binary(), Buffer::binary() | iolist()) -&gt; {[tls_handshake()], binary()}</name>
<fsummary> </fsummary>

<desc><marker id="get_tls_handshake-3"/>
 </desc></func>
<func>
<name>init_handshake_history() -&gt; tls_handshake_history()</name>
<fsummary> </fsummary>

<desc><marker id="init_handshake_history-0"/>
 </desc></func>
<func>
<name>update_handshake_history(Handshake::tls_handshake_history(), Data::term()) -&gt; tls_handshake_history()</name>
<fsummary> </fsummary>

<desc><marker id="update_handshake_history-2"/>
 </desc></func>
<func>
<name>decode_handshake(Version, Tag, Msg) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="decode_handshake-3"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>