<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_dataflow</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_dataflow.xml</file></header>
<module>dialyzer_dataflow</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>dial_warn_tag() = warn_return_no_exit | warn_return_only_exit | warn_not_called | warn_non_proper_list | warn_matching | warn_opaque | warn_fun_app | warn_failing_call | warn_bin_construction | warn_contract_types | warn_contract_syntax | warn_contract_not_equal | warn_contract_subtype | warn_contract_supertype | warn_callgraph | warn_umatched_return | warn_race_condition | warn_behaviour | warn_contract_range | warn_undefined_callbacks</c></tag>
<item><marker id="type-dial_warn_tag"/> </item>
<tag><c>dial_warning() = {dial_warn_tag(), file_line(), {atom(), [term()]}}</c></tag>
<item><marker id="type-dial_warning"/> </item>
<tag><c>file_line() = {filename() (see module file), non_neg_integer()}</c></tag>
<item><marker id="type-file_line"/> </item>
<tag><c>fun_types() = dict(label(), type()) (see module dict)</c></tag>
<item><marker id="type-fun_types"/> </item>
<tag><c>label() = non_neg_integer()</c></tag>
<item><marker id="type-label"/> </item>
<tag><c>nowarn() = no_warn_unused() (see module dialyzer_analysis_callgraph)</c></tag>
<item><marker id="type-nowarn"/> </item>
<tag><c>state()</c></tag>
<item><marker id="type-state"/> </item>
<tag><c>type() = erl_type() (see module erl_types)</c></tag>
<item><marker id="type-type"/> </item>
<tag><c>types() = type_table() (see module erl_types)</c></tag>
<item><marker id="type-types"/> </item>
</taglist></section>
<funcs>
<func>
<name>get_warnings(Tree::c_module() (see module cerl), Plt::plt() (see module dialyzer_plt), Callgraph::callgraph() (see module dialyzer_callgraph), Records::types(), NoWarnUnused::nowarn()) -&gt; {[dial_warning()], fun_types()}</name>
<fsummary> </fsummary>

<desc><marker id="get_warnings-5"/>
 </desc></func>
<func>
<name>get_fun_types(Tree::c_module() (see module cerl), Plt::plt() (see module dialyzer_plt), Callgraph::callgraph() (see module dialyzer_callgraph), Records::types()) -&gt; fun_types()</name>
<fsummary> </fsummary>

<desc><marker id="get_fun_types-4"/>
 </desc></func>
<func>
<name>state__add_warning(Warn::dial_warning(), State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__add_warning-2"/>
 </desc></func>
<func>
<name>state__cleanup(State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__cleanup-1"/>
 </desc></func>
<func>
<name>state__duplicate(State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__duplicate-1"/>
 </desc></func>
<func>
<name>dispose_state(State::state()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="dispose_state-1"/>
 </desc></func>
<func>
<name>state__get_callgraph(State::state()) -&gt; callgraph() (see module dialyzer_callgraph)</name>
<fsummary> </fsummary>

<desc><marker id="state__get_callgraph-1"/>
 </desc></func>
<func>
<name>state__get_races(State::state()) -&gt; races() (see module dialyzer_races)</name>
<fsummary> </fsummary>

<desc><marker id="state__get_races-1"/>
 </desc></func>
<func>
<name>state__get_records(State::state()) -&gt; types()</name>
<fsummary> </fsummary>

<desc><marker id="state__get_records-1"/>
 </desc></func>
<func>
<name>state__put_callgraph(Callgraph::callgraph() (see module dialyzer_callgraph), State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__put_callgraph-2"/>
 </desc></func>
<func>
<name>state__put_races(Races::races() (see module dialyzer_races), State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__put_races-2"/>
 </desc></func>
<func>
<name>state__records_only(State::state()) -&gt; state()</name>
<fsummary> </fsummary>

<desc><marker id="state__records_only-1"/>
 </desc></func>
<func>
<name>format_args(ArgList::[cerl() (see module cerl)], TypeList::[type()], State::state()) -&gt; nonempty_string()</name>
<fsummary> </fsummary>

<desc><marker id="format_args-3"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>