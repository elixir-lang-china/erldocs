<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_contracts</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_contracts.xml</file></header>
<module>dialyzer_contracts</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>contr_constr() = {subtype, erl_type() (see module erl_types), erl_type() (see module erl_types)}</c></tag>
<item><marker id="type-contr_constr"/> </item>
<tag><c>contract_pair() = {erl_type() (see module erl_types), [contr_constr()]}</c></tag>
<item><marker id="type-contract_pair"/> </item>
<tag><c>contracts() = dict(mfa(), file_contract() (see module dialyzer_contracts)) (see module dict)</c></tag>
<item><marker id="type-contracts"/> </item>
<tag><c>dial_warn_tag() = warn_return_no_exit | warn_return_only_exit | warn_not_called | warn_non_proper_list | warn_matching | warn_opaque | warn_fun_app | warn_failing_call | warn_bin_construction | warn_contract_types | warn_contract_syntax | warn_contract_not_equal | warn_contract_subtype | warn_contract_supertype | warn_callgraph | warn_umatched_return | warn_race_condition | warn_behaviour | warn_contract_range | warn_undefined_callbacks</c></tag>
<item><marker id="type-dial_warn_tag"/> </item>
<tag><c>dial_warning() = {dial_warn_tag(), file_line(), {atom(), [term()]}}</c></tag>
<item><marker id="type-dial_warning"/> </item>
<tag><c>file_contract() = {file_line(), #contract{contracts=[contract_pair()], args=[erl_type() (see module erl_types)], forms=[{term(), term()}]}}</c></tag>
<item><marker id="type-file_contract"/> </item>
<tag><c>file_line() = {filename() (see module file), non_neg_integer()}</c></tag>
<item><marker id="type-file_line"/> </item>
<tag><c>fun_types() = dict(label(), type_table() (see module erl_types)) (see module dict)</c></tag>
<item><marker id="type-fun_types"/> </item>
<tag><c>label() = non_neg_integer()</c></tag>
<item><marker id="type-label"/> </item>
<tag><c>opaques() = [erl_type() (see module erl_types)] | universe</c></tag>
<item><marker id="type-opaques"/> </item>
<tag><c>opaques_fun() = (module()) -&gt; opaques()</c></tag>
<item><marker id="type-opaques_fun"/> </item>
<tag><c>plt_contracts() = [{mfa(), #contract{contracts=[contract_pair()], args=[erl_type() (see module erl_types)], forms=[{term(), term()}]}}]</c></tag>
<item><marker id="type-plt_contracts"/>
<p> actually, an orddict()</p>
</item>
<tag><c>types() = type_table() (see module erl_types)</c></tag>
<item><marker id="type-types"/> </item>
</taglist></section>
<funcs>
<func>
<name>get_contract_return(Contract::#contract{contracts=[contract_pair()], args=[erl_type() (see module erl_types)], forms=[{term(), term()}]}) -&gt; erl_type() (see module erl_types)</name>
<fsummary> </fsummary>

<desc><marker id="get_contract_return-1"/>
 </desc></func>
<func>
<name>get_contract_return(Contract::#contract{contracts=[contract_pair()], args=[erl_type() (see module erl_types)], forms=[{term(), term()}]}, Args::[erl_type() (see module erl_types)]) -&gt; erl_type() (see module erl_types)</name>
<fsummary> </fsummary>

<desc><marker id="get_contract_return-2"/>
 </desc></func>
<func>
<name>get_contract_args(Contract::#contract{contracts=[contract_pair()], args=[erl_type() (see module erl_types)], forms=[{term(), term()}]}) -&gt; [erl_type() (see module erl_types)]</name>
<fsummary> </fsummary>

<desc><marker id="get_contract_args-1"/>
 </desc></func>
<func>
<name>is_overloaded(Contract::#contract{contracts=[contract_pair()], args=[erl_type() (see module erl_types)], forms=[{term(), term()}]}) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="is_overloaded-1"/>
 </desc></func>
<func>
<name>contract_to_string(Contract::#contract{contracts=[contract_pair()], args=[erl_type() (see module erl_types)], forms=[{term(), term()}]}) -&gt; string()</name>
<fsummary> </fsummary>

<desc><marker id="contract_to_string-1"/>
 </desc></func>
<func>
<name>process_contract_remote_types(CodeServer::codeserver() (see module dialyzer_codeserver)) -&gt; codeserver() (see module dialyzer_codeserver)</name>
<fsummary> </fsummary>

<desc><marker id="process_contract_remote_types-1"/>
 </desc></func>
<func>
<name>check_contracts(Contracts::[{mfa(), file_contract()}], Callgraph::callgraph() (see module dialyzer_callgraph), FunTypes::fun_types(), FindOpaques::opaques_fun()) -&gt; plt_contracts()</name>
<fsummary> </fsummary>

<desc><marker id="check_contracts-4"/>
 </desc></func>
<func>
<name>check_contract(Contract::#contract{contracts=[contract_pair()], args=[erl_type() (see module erl_types)], forms=[{term(), term()}]}, SuccType::erl_type() (see module erl_types)) -&gt; ok | {error, term()}</name>
<fsummary> </fsummary>

<desc><marker id="check_contract-2"/>
 </desc></func>
<func>
<name>contracts_without_fun(Contracts::contracts(), AllFuns0::[term()], Callgraph::callgraph() (see module dialyzer_callgraph)) -&gt; [dial_warning()]</name>
<fsummary> </fsummary>

<desc><marker id="contracts_without_fun-3"/>
 </desc></func>
<func>
<name>store_tmp_contract(MFA::mfa(), FileLine::file_line(), TypeSpec::[term()], SpecDict::contracts(), RecordsDict::types()) -&gt; contracts()</name>
<fsummary> </fsummary>

<desc><marker id="store_tmp_contract-5"/>
 </desc></func>
<func>
<name>get_invalid_contract_warnings(Modules::[module()], CodeServer::codeserver() (see module dialyzer_codeserver), Plt::plt() (see module dialyzer_plt), FindOpaques::opaques_fun()) -&gt; [dial_warning()]</name>
<fsummary> </fsummary>

<desc><marker id="get_invalid_contract_warnings-4"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>