<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_utils</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_utils.xml</file></header>
<module>dialyzer_utils</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>abstract_code() = [tuple()]</c></tag>
<item><marker id="type-abstract_code"/>
<p>  XXX: import from somewhere</p>
</item>
<tag><c>callback_dict() = dict() (see module dict)</c></tag>
<item><marker id="type-callback_dict"/> </item>
<tag><c>comp_options() = [option() (see module compile)]</c></tag>
<item><marker id="type-comp_options"/> </item>
<tag><c>get_core_from_abs_ret() = {ok, c_module() (see module cerl)} | error</c></tag>
<item><marker id="type-get_core_from_abs_ret"/> </item>
<tag><c>get_core_from_src_ret() = {ok, c_module() (see module cerl)} | {error, string()}</c></tag>
<item><marker id="type-get_core_from_src_ret"/> </item>
<tag><c>mod_or_fname() = atom() | filename() (see module file)</c></tag>
<item><marker id="type-mod_or_fname"/> </item>
<tag><c>spec_dict() = dict() (see module dict)</c></tag>
<item><marker id="type-spec_dict"/> </item>
</taglist></section>
<funcs>
<func>
<name>get_abstract_code_from_src(File::mod_or_fname()) -&gt; {ok, abstract_code()} | {error, [string()]}</name>
<fsummary> </fsummary>

<desc><marker id="get_abstract_code_from_src-1"/>
 </desc></func>
<func>
<name>get_abstract_code_from_src(File::mod_or_fname(), Opts::comp_options()) -&gt; {ok, abstract_code()} | {error, [string()]}</name>
<fsummary> </fsummary>

<desc><marker id="get_abstract_code_from_src-2"/>
 </desc></func>
<func>
<name>get_core_from_src(File::filename() (see module file)) -&gt; get_core_from_src_ret()</name>
<fsummary> </fsummary>

<desc><marker id="get_core_from_src-1"/>
 </desc></func>
<func>
<name>get_core_from_src(File::filename() (see module file), Opts::comp_options()) -&gt; get_core_from_src_ret()</name>
<fsummary> </fsummary>

<desc><marker id="get_core_from_src-2"/>
 </desc></func>
<func>
<name>get_abstract_code_from_beam(File::filename() (see module file)) -&gt; error | {ok, abstract_code()}</name>
<fsummary> </fsummary>

<desc><marker id="get_abstract_code_from_beam-1"/>
 </desc></func>
<func>
<name>get_core_from_abstract_code(AbstrCode::abstract_code()) -&gt; get_core_from_abs_ret()</name>
<fsummary> </fsummary>

<desc><marker id="get_core_from_abstract_code-1"/>
 </desc></func>
<func>
<name>get_core_from_abstract_code(AbstrCode::abstract_code(), Opts::comp_options()) -&gt; get_core_from_abs_ret()</name>
<fsummary> </fsummary>

<desc><marker id="get_core_from_abstract_code-2"/>
 </desc></func>
<func>
<name>get_record_and_type_info(AbstractCode::abstract_code()) -&gt; {ok, dict() (see module dict)} | {error, string()}</name>
<fsummary> </fsummary>

<desc><marker id="get_record_and_type_info-1"/>
 </desc></func>
<func>
<name>process_record_remote_types(CServer::codeserver() (see module dialyzer_codeserver)) -&gt; codeserver() (see module dialyzer_codeserver)</name>
<fsummary> </fsummary>

<desc><marker id="process_record_remote_types-1"/>
 </desc></func>
<func>
<name>merge_records(NewRecords::dict() (see module dict), OldRecords::dict() (see module dict)) -&gt; dict() (see module dict)</name>
<fsummary> </fsummary>

<desc><marker id="merge_records-2"/>
 </desc></func>
<func>
<name>get_spec_info(ModName::atom(), AbstractCode::abstract_code(), RecordsDict::dict() (see module dict)) -&gt; {ok, spec_dict(), callback_dict()} | {error, string()}</name>
<fsummary> </fsummary>

<desc><marker id="get_spec_info-3"/>
 </desc></func>
<func>
<name>sets_filter(Mods::[module()], ExpTypes::set() (see module sets)) -&gt; set() (see module sets)</name>
<fsummary> </fsummary>

<desc><marker id="sets_filter-2"/>
 </desc></func>
<func>
<name>src_compiler_opts() -&gt; [option() (see module compile), ...]</name>
<fsummary> </fsummary>

<desc><marker id="src_compiler_opts-0"/>
 </desc></func>
<func>
<name>format_sig(Type::erl_type() (see module erl_types)) -&gt; string()</name>
<fsummary> </fsummary>

<desc><marker id="format_sig-1"/>
 </desc></func>
<func>
<name>format_sig(Type::erl_type() (see module erl_types), RecDict::dict() (see module dict)) -&gt; string()</name>
<fsummary> </fsummary>

<desc><marker id="format_sig-2"/>
 </desc></func>
<func>
<name>pp_hook() -&gt; (cerl() (see module cerl), term(), term()) -&gt; term()</name>
<fsummary> </fsummary>

<desc><marker id="pp_hook-0"/>
 </desc></func>
<func>
<name>parallelism() -&gt; integer()</name>
<fsummary> </fsummary>

<desc><marker id="parallelism-0"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>