<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_codeserver</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_codeserver.xml</file></header>
<module>dialyzer_codeserver</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>codeserver()</c></tag>
<item><marker id="type-codeserver"/> </item>
<tag><c>contracts() = dict(mfa(), file_contract() (see module dialyzer_contracts)) (see module dict)</c></tag>
<item><marker id="type-contracts"/> </item>
<tag><c>label() = non_neg_integer()</c></tag>
<item><marker id="type-label"/> </item>
<tag><c>mod_contracts() = dict(module(), contracts()) (see module dict)</c></tag>
<item><marker id="type-mod_contracts"/> </item>
<tag><c>mod_records() = dict(module(), types()) (see module dict)</c></tag>
<item><marker id="type-mod_records"/> </item>
<tag><c>types() = type_table() (see module erl_types)</c></tag>
<item><marker id="type-types"/> </item>
</taglist></section>
<funcs>
<func>
<name>new() -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="new-0"/>
 </desc></func>
<func>
<name>delete(Codeserver::codeserver()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="delete-1"/>
 </desc></func>
<func>
<name>insert(Mod::atom(), ModCode::c_module() (see module cerl), CS::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="insert-3"/>
 </desc></func>
<func>
<name>get_temp_exported_types(Codeserver::codeserver()) -&gt; set(mfa()) (see module sets)</name>
<fsummary> </fsummary>

<desc><marker id="get_temp_exported_types-1"/>
 </desc></func>
<func>
<name>insert_temp_exported_types(Set::set(mfa()) (see module sets), CS::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="insert_temp_exported_types-2"/>
 </desc></func>
<func>
<name>insert_exports(List::[mfa()], Codeserver::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="insert_exports-2"/>
 </desc></func>
<func>
<name>is_exported(MFA::mfa(), Codeserver::codeserver()) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="is_exported-2"/>
 </desc></func>
<func>
<name>get_exported_types(Codeserver::codeserver()) -&gt; set(mfa()) (see module sets)</name>
<fsummary> </fsummary>

<desc><marker id="get_exported_types-1"/>
 </desc></func>
<func>
<name>get_exports(Codeserver::codeserver()) -&gt; set(mfa()) (see module sets)</name>
<fsummary> </fsummary>

<desc><marker id="get_exports-1"/>
 </desc></func>
<func>
<name>finalize_exported_types(Set::set(mfa()) (see module sets), CS::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="finalize_exported_types-2"/>
 </desc></func>
<func>
<name>lookup_mod_code(Mod::atom(), CS::codeserver()) -&gt; c_module() (see module cerl)</name>
<fsummary> </fsummary>

<desc><marker id="lookup_mod_code-2"/>
 </desc></func>
<func>
<name>lookup_mfa_code(MFA::mfa(), CS::codeserver()) -&gt; {c_var() (see module cerl), c_fun() (see module cerl)}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_mfa_code-2"/>
 </desc></func>
<func>
<name>get_next_core_label(Codeserver::codeserver()) -&gt; label()</name>
<fsummary> </fsummary>

<desc><marker id="get_next_core_label-1"/>
 </desc></func>
<func>
<name>set_next_core_label(NCL::label(), CS::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="set_next_core_label-2"/>
 </desc></func>
<func>
<name>lookup_mod_records(Mod::atom(), Codeserver::codeserver()) -&gt; types()</name>
<fsummary> </fsummary>

<desc><marker id="lookup_mod_records-2"/>
 </desc></func>
<func>
<name>get_records(Codeserver::codeserver()) -&gt; mod_records()</name>
<fsummary> </fsummary>

<desc><marker id="get_records-1"/>
 </desc></func>
<func>
<name>store_temp_records(Mod::module(), Dict::types(), Codeserver::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="store_temp_records-3"/>
 </desc></func>
<func>
<name>get_temp_records(Codeserver::codeserver()) -&gt; mod_records()</name>
<fsummary> </fsummary>

<desc><marker id="get_temp_records-1"/>
 </desc></func>
<func>
<name>set_temp_records(Dict::mod_records(), CS::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="set_temp_records-2"/>
 </desc></func>
<func>
<name>finalize_records(Dict::mod_records(), CS::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="finalize_records-2"/>
 </desc></func>
<func>
<name>lookup_mod_contracts(Mod::atom(), Codeserver::codeserver()) -&gt; contracts()</name>
<fsummary> </fsummary>

<desc><marker id="lookup_mod_contracts-2"/>
 </desc></func>
<func>
<name>lookup_mfa_contract(MFA::mfa(), Codeserver::codeserver()) -&gt; error | {ok, file_contract() (see module dialyzer_contracts)}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_mfa_contract-2"/>
 </desc></func>
<func>
<name>get_contracts(Codeserver::codeserver()) -&gt; mod_contracts()</name>
<fsummary> </fsummary>

<desc><marker id="get_contracts-1"/>
 </desc></func>
<func>
<name>get_callbacks(Codeserver::codeserver()) -&gt; list()</name>
<fsummary> </fsummary>

<desc><marker id="get_callbacks-1"/>
 </desc></func>
<func>
<name>store_temp_contracts(Mod::module(), SpecDict::contracts(), CallbackDict::contracts(), Codeserver::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="store_temp_contracts-4"/>
 </desc></func>
<func>
<name>get_temp_contracts(Codeserver::codeserver()) -&gt; {mod_contracts(), mod_contracts()}</name>
<fsummary> </fsummary>

<desc><marker id="get_temp_contracts-1"/>
 </desc></func>
<func>
<name>finalize_contracts(SpecDict::mod_contracts(), CallbackDict::mod_contracts(), CS::codeserver()) -&gt; codeserver()</name>
<fsummary> </fsummary>

<desc><marker id="finalize_contracts-3"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>