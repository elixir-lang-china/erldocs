<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_analysis_callgraph</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_analysis_callgraph.xml</file></header>
<module>dialyzer_analysis_callgraph</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>anal_type() = succ_typings | plt_build</c></tag>
<item><marker id="type-anal_type"/> </item>
<tag><c>compile_init_data() = #compile_init{callgraph=undefined | callgraph() (see module dialyzer_callgraph), codeserver=undefined | codeserver() (see module dialyzer_codeserver), defines=[dial_define()], include_dirs=[filename() (see module file)], start_from=start_from(), use_contracts=boolean()}</c></tag>
<item><marker id="type-compile_init_data"/> </item>
<tag><c>compile_mid_data() = {module(), cerl() (see module cerl), [mfa()], callgraph() (see module dialyzer_callgraph), codeserver() (see module dialyzer_codeserver)}</c></tag>
<item><marker id="type-compile_mid_data"/> </item>
<tag><c>compile_result() = {[{filename() (see module file), error_reason()}], [mfa()], [module()]}</c></tag>
<item><marker id="type-compile_result"/>
<p> opaque</p>
</item>
<tag><c>dial_define() = {atom(), term()}</c></tag>
<item><marker id="type-dial_define"/> </item>
<tag><c>dial_warn_tag() = warn_return_no_exit | warn_return_only_exit | warn_not_called | warn_non_proper_list | warn_matching | warn_opaque | warn_fun_app | warn_failing_call | warn_bin_construction | warn_contract_types | warn_contract_syntax | warn_contract_not_equal | warn_contract_subtype | warn_contract_supertype | warn_callgraph | warn_umatched_return | warn_race_condition | warn_behaviour | warn_contract_range | warn_undefined_callbacks</c></tag>
<item><marker id="type-dial_warn_tag"/> </item>
<tag><c>error_reason() = string()</c></tag>
<item><marker id="type-error_reason"/> </item>
<tag><c>label() = non_neg_integer()</c></tag>
<item><marker id="type-label"/> </item>
<tag><c>mfa_or_funlbl() = label() | mfa()</c></tag>
<item><marker id="type-mfa_or_funlbl"/> </item>
<tag><c>no_warn_unused() = set(mfa()) (see module sets)</c></tag>
<item><marker id="type-no_warn_unused"/> </item>
<tag><c>one_file_result() = {error, error_reason()} | {ok, [callgraph_edge() (see module dialyzer_callgraph)], [mfa_or_funlbl()], [mfa()], module()}</c></tag>
<item><marker id="type-one_file_result"/>
<p> opaque</p>
</item>
<tag><c>solver() = v1 | v2</c></tag>
<item><marker id="type-solver"/> </item>
<tag><c>start_from() = byte_code | src_code</c></tag>
<item><marker id="type-start_from"/> </item>
</taglist></section>
<funcs>
<func>
<name>start(Parent::pid(), LegalWarnings::[dial_warn_tag()], Analysis::#analysis{analysis_pid=undefined | pid(), type=anal_type(), defines=[dial_define()], doc_plt=undefined | plt() (see module dialyzer_plt), files=[filename() (see module file)], include_dirs=[filename() (see module file)], start_from=start_from(), plt=undefined | plt() (see module dialyzer_plt), use_contracts=boolean(), race_detection=boolean(), behaviours_chk=boolean(), timing=boolean() | debug, timing_server=undefined | timing_server() (see module dialyzer_timing), callgraph_file=filename() (see module file), solvers=undefined | [solver()]}) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="start-3"/>
 </desc></func>
<func>
<name>compile_init_result() -&gt; compile_result()</name>
<fsummary> </fsummary>

<desc><marker id="compile_init_result-0"/>
 </desc></func>
<func>
<name>add_to_result(File::filename() (see module file), NewData::one_file_result(), X3::compile_result(), InitData::compile_init_data()) -&gt; compile_result()</name>
<fsummary> </fsummary>

<desc><marker id="add_to_result-4"/>
 </desc></func>
<func>
<name>start_compilation(File::filename() (see module file), Compile_init::compile_init_data()) -&gt; {error, error_reason()} | {ok, integer(), compile_mid_data()}</name>
<fsummary> </fsummary>

<desc><marker id="start_compilation-2"/>
 </desc></func>
<func>
<name>continue_compilation(NextLabel::integer(), X2::compile_mid_data()) -&gt; one_file_result()</name>
<fsummary> </fsummary>

<desc><marker id="continue_compilation-2"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>