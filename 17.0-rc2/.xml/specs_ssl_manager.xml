<module name="ssl_manager">
<type>
  <name>certdb_ref</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-certdb_ref">certdb_ref()</marker> = reference()</typehead></typedecl>
</type>
<type>
  <name>db_handle</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-db_handle">db_handle()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>der_cert</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-der_cert">der_cert()</marker> = binary()</typehead></typedecl>
</type>
<type>
  <name>from</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-from">from()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>host</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-host">host()</marker> = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso> | <seealso marker="inet#type-hostname">inet:hostname()</seealso></typehead></typedecl>
</type>
<type>
  <name>issuer</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-issuer">issuer()</marker> = tuple()</typehead></typedecl>
</type>
<type>
  <name>msg</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-msg">msg()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>reason</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-reason">reason()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>reply</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-reply">reply()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>serialnumber</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-serialnumber">serialnumber()</marker> = integer()</typehead></typedecl>
</type>
<type>
  <name>session_id</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-session_id">session_id()</marker> = 0 | binary()</typehead></typedecl>
</type>
<spec>
  <name>cache_pem_file</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cache_pem_file(File :: binary(), DbHandle :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, term()} | {error, <seealso marker="#type-reason">reason()</seealso>}</head></clause>
  </contract>
  <anno>DbHandle</anno>
  <anno>File</anno>
</spec>
<spec>
  <name>clean_cert_db</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>clean_cert_db(Ref :: reference(), File :: binary()) -&gt; ok</head></clause>
  </contract>
  <anno>File</anno>
  <anno>Ref</anno>
</spec>
<spec>
  <name>clear_pem_cache</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>clear_pem_cache() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(OldVsn :: term(), State :: #state{}, Extra :: list()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, #state{}}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>OldVsn</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>connection_init</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>connection_init(Trustedcerts :: binary() | {der, list()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Role :: client | server) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-certdb_ref">certdb_ref()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-db_handle">db_handle()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-db_handle">db_handle()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-db_handle">db_handle()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-db_handle">db_handle()</seealso>}</head></clause>
  </contract>
  <anno>Role</anno>
  <anno>Trustedcerts</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(X1 :: <seealso marker="#type-msg">msg()</seealso>, From :: <seealso marker="#type-from">from()</seealso>, State :: #state{}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, <seealso marker="#type-reply">reply()</seealso>, #state{}}</head></clause>
  </contract>
  <anno>From</anno>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(X1 :: <seealso marker="#type-msg">msg()</seealso>, State :: #state{}) -&gt; {noreply, #state{}}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(Info :: <seealso marker="#type-msg">msg()</seealso>, State :: #state{}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, #state{}}</head></clause>
  </contract>
  <anno>Info</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: list()) -&gt; {ok, #state{}}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>init_session_validator</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>invalidate_session</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>invalidate_session(Port :: <seealso marker="inet#type-port_number">inet:port_number()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Session :: #session{}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Port</anno>
  <anno>Session</anno>
</spec>
<spec>
  <name>invalidate_session</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>invalidate_session(Host :: <seealso marker="#type-host">host()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Port :: <seealso marker="inet#type-port_number">inet:port_number()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Session :: #session{}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Host</anno>
  <anno>Port</anno>
  <anno>Session</anno>
</spec>
<spec>
  <name>lookup_trusted_cert</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>lookup_trusted_cert(DbHandle :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Ref :: reference(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SerialNumber :: <seealso marker="#type-serialnumber">serialnumber()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Issuer :: <seealso marker="#type-issuer">issuer()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>undefined |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {<seealso marker="#type-der_cert">der_cert()</seealso>, #'OTPCertificate'{}}}</head></clause>
  </contract>
  <anno>DbHandle</anno>
  <anno>Issuer</anno>
  <anno>Ref</anno>
  <anno>SerialNumber</anno>
</spec>
<spec>
  <name>manager_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>manager_name(X1 :: normal | dist) -&gt; atom()</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>new_session_id</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new_session_id(Port :: integer()) -&gt; <seealso marker="#type-session_id">session_id()</seealso></head></clause>
  </contract>
  <anno>Port</anno>
</spec>
<spec>
  <name>register_session</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>register_session(Port :: <seealso marker="inet#type-port_number">inet:port_number()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Session :: #session{}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Port</anno>
  <anno>Session</anno>
</spec>
<spec>
  <name>register_session</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>register_session(Host :: <seealso marker="#type-host">host()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Port :: <seealso marker="inet#type-port_number">inet:port_number()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Session :: #session{}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Host</anno>
  <anno>Port</anno>
  <anno>Session</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start_link(Opts :: list()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, pid()} | ignore | {error, term()}</head></clause>
  </contract>
  <anno>Opts</anno>
</spec>
<spec>
  <name>start_link_dist</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start_link_dist(Opts :: list()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, pid()} | ignore | {error, term()}</head></clause>
  </contract>
  <anno>Opts</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: <seealso marker="#type-reason">reason()</seealso>, State :: #state{}) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:28:06.</timestamp>
</module>