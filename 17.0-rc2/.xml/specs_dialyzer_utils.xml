<module name="dialyzer_utils">
<type>
  <name>abstract_code</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-abstract_code">abstract_code()</marker> = [tuple()]</typehead></typedecl>
</type>
<type>
  <name>callback_dict</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-callback_dict">callback_dict()</marker> = <seealso marker="dict#type-dict">dict:dict()</seealso></typehead></typedecl>
</type>
<type>
  <name>comp_options</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-comp_options">comp_options()</marker> = [<seealso marker="compile#type-option">compile:option()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>get_core_from_abs_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-get_core_from_abs_ret">get_core_from_abs_ret()</marker> = {ok, <seealso marker="cerl#type-c_module">cerl:c_module()</seealso>} | error</typehead></typedecl>
</type>
<type>
  <name>get_core_from_src_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-get_core_from_src_ret">get_core_from_src_ret()</marker> = {ok, <seealso marker="cerl#type-c_module">cerl:c_module()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {error, string()}</typehead></typedecl>
</type>
<type>
  <name>mod_or_fname</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mod_or_fname">mod_or_fname()</marker> = atom() | <seealso marker="file#type-filename">file:filename()</seealso></typehead></typedecl>
</type>
<type>
  <name>spec_dict</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-spec_dict">spec_dict()</marker> = <seealso marker="dict#type-dict">dict:dict()</seealso></typehead></typedecl>
</type>
<spec>
  <name>format_sig</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_sig(Type :: <seealso marker="erl_types#type-erl_type">erl_types:erl_type()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Type</anno>
</spec>
<spec>
  <name>format_sig</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>format_sig(Type :: <seealso marker="erl_types#type-erl_type">erl_types:erl_type()</seealso>, RecDict :: <seealso marker="dict#type-dict">dict:dict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>string()</head></clause>
  </contract>
  <anno>RecDict</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>get_abstract_code_from_beam</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_abstract_code_from_beam(File :: <seealso marker="file#type-filename">file:filename()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>error | {ok, <seealso marker="#type-abstract_code">abstract_code()</seealso>}</head></clause>
  </contract>
  <anno>File</anno>
</spec>
<spec>
  <name>get_abstract_code_from_src</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_abstract_code_from_src(File :: <seealso marker="#type-mod_or_fname">mod_or_fname()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-abstract_code">abstract_code()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, [string()]}</head></clause>
  </contract>
  <anno>File</anno>
</spec>
<spec>
  <name>get_abstract_code_from_src</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_abstract_code_from_src(File :: <seealso marker="#type-mod_or_fname">mod_or_fname()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: <seealso marker="#type-comp_options">comp_options()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-abstract_code">abstract_code()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, [string()]}</head></clause>
  </contract>
  <anno>File</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>get_core_from_abstract_code</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_core_from_abstract_code(AbstrCode :: <seealso marker="#type-abstract_code">abstract_code()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-get_core_from_abs_ret">get_core_from_abs_ret()</seealso></head></clause>
  </contract>
  <anno>AbstrCode</anno>
</spec>
<spec>
  <name>get_core_from_abstract_code</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_core_from_abstract_code(AbstrCode :: <seealso marker="#type-abstract_code">abstract_code()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: <seealso marker="#type-comp_options">comp_options()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-get_core_from_abs_ret">get_core_from_abs_ret()</seealso></head></clause>
  </contract>
  <anno>AbstrCode</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>get_core_from_src</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_core_from_src(File :: <seealso marker="file#type-filename">file:filename()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-get_core_from_src_ret">get_core_from_src_ret()</seealso></head></clause>
  </contract>
  <anno>File</anno>
</spec>
<spec>
  <name>get_core_from_src</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_core_from_src(File :: <seealso marker="file#type-filename">file:filename()</seealso>, Opts :: <seealso marker="#type-comp_options">comp_options()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-get_core_from_src_ret">get_core_from_src_ret()</seealso></head></clause>
  </contract>
  <anno>File</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>get_record_and_type_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_record_and_type_info(AbstractCode :: <seealso marker="#type-abstract_code">abstract_code()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="dict#type-dict">dict:dict()</seealso>} | {error, string()}</head></clause>
  </contract>
  <anno>AbstractCode</anno>
</spec>
<spec>
  <name>get_spec_info</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>get_spec_info(ModName :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>AbstractCode :: <seealso marker="#type-abstract_code">abstract_code()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>RecordsDict :: <seealso marker="dict#type-dict">dict:dict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-spec_dict">spec_dict()</seealso>, <seealso marker="#type-callback_dict">callback_dict()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, string()}</head></clause>
  </contract>
  <anno>AbstractCode</anno>
  <anno>ModName</anno>
  <anno>RecordsDict</anno>
</spec>
<spec>
  <name>merge_records</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>merge_records(NewRecords :: <seealso marker="dict#type-dict">dict:dict()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldRecords :: <seealso marker="dict#type-dict">dict:dict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="dict#type-dict">dict:dict()</seealso></head></clause>
  </contract>
  <anno>NewRecords</anno>
  <anno>OldRecords</anno>
</spec>
<spec>
  <name>parallelism</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>parallelism() -&gt; integer()</head></clause>
  </contract>
</spec>
<spec>
  <name>pp_hook</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>pp_hook() -&gt; fun((<seealso marker="cerl#type-cerl">cerl:cerl()</seealso>, term(), term()) -&gt; term())</head></clause>
  </contract>
</spec>
<spec>
  <name>process_record_remote_types</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>process_record_remote_types(CServer ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="dialyzer_codeserver#type-codeserver">dialyzer_codeserver:codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="dialyzer_codeserver#type-codeserver">dialyzer_codeserver:codeserver()</seealso></head></clause>
  </contract>
  <anno>CServer</anno>
</spec>
<spec>
  <name>sets_filter</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sets_filter(Mods :: [module()], ExpTypes :: <seealso marker="sets#type-set">sets:set()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="sets#type-set">sets:set()</seealso></head></clause>
  </contract>
  <anno>ExpTypes</anno>
  <anno>Mods</anno>
</spec>
<spec>
  <name>src_compiler_opts</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>src_compiler_opts() -&gt; [<seealso marker="compile#type-option">compile:option()</seealso>, ...]</head></clause>
  </contract>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:29:01.</timestamp>
</module>