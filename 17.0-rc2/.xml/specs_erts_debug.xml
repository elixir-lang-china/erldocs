<module name="erts_debug">
<type>
  <name>df_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-df_ret">df_ret()</marker> = ok<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {error, {badopen, module()}}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {undef, module()}</typehead></typedecl>
</type>
<spec>
  <name>breakpoint</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>breakpoint(MFA, Flag) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>MFA</typename><string>MFA = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Function :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: arity() | '_'}</string></subtype>
        <subtype><typename>Flag</typename><string>Flag = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Flag</anno>
  <anno>Function</anno>
  <anno>MFA</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>df</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>df(Mod :: module()) -&gt; <seealso marker="#type-df_ret">df_ret()</seealso></head></clause>
  </contract>
  <anno>Mod</anno>
</spec>
<spec>
  <name>df</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>df(Mod :: module(), Func :: atom()) -&gt; <seealso marker="#type-df_ret">df_ret()</seealso></head></clause>
  </contract>
  <anno>Func</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>df</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>df(Mod :: module(), Func :: atom(), Arity :: arity()) -&gt; <seealso marker="#type-df_ret">df_ret()</seealso></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Func</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>disassemble</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>disassemble(What) -&gt; false | undef | Result</head>
      <guard>
        <subtype><typename>What</typename><string>What = MFA | Address</string></subtype>
        <subtype><typename>Result</typename><string>Result = {Address, Code, MFA}</string></subtype>
        <subtype><typename>MFA</typename><string>MFA = mfa()</string></subtype>
        <subtype><typename>Address</typename><string>Address = integer() &gt;= 0</string></subtype>
        <subtype><typename>Code</typename><string>Code = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Code</anno>
  <anno>MFA</anno>
  <anno>Result</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>display</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>display(Term) -&gt; string()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>dist_ext_to_term</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>dist_ext_to_term(Tuple, Binary) -&gt; term()</head>
      <guard>
        <subtype><typename>Tuple</typename><string>Tuple = tuple()</string></subtype>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Tuple</anno>
</spec>
<spec>
  <name>dump_links</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>dump_links(Id) -&gt; true</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = pid() | port() | atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
</spec>
<spec>
  <name>dump_monitors</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>dump_monitors(Id) -&gt; true</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = pid() | atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
</spec>
<spec>
  <name>flat_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>flat_size(Term) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>get_internal_state</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_internal_state(W) -&gt; term()</head>
      <guard>
        <subtype><typename>W</typename><string>W = reds_left<br/><nbsp/><nbsp/>| node_and_dist_references<br/><nbsp/><nbsp/>| monitoring_nodes<br/><nbsp/><nbsp/>| next_pid<br/><nbsp/><nbsp/>| 'DbTable_words'<br/><nbsp/><nbsp/>| check_io_debug<br/><nbsp/><nbsp/>| process_info_args<br/><nbsp/><nbsp/>| processes<br/><nbsp/><nbsp/>| processes_bif_info<br/><nbsp/><nbsp/>| max_atom_out_cache_index<br/><nbsp/><nbsp/>| nbalance<br/><nbsp/><nbsp/>| available_internal_state<br/><nbsp/><nbsp/>| force_heap_frags<br/><nbsp/><nbsp/>| memory<br/><nbsp/><nbsp/>| {process_status, pid()}<br/><nbsp/><nbsp/>| {link_list, pid() | port() | node()}<br/><nbsp/><nbsp/>| {monitor_list, pid() | node()}<br/><nbsp/><nbsp/>| {channel_number, integer() &gt;= 0}<br/><nbsp/><nbsp/>| {have_pending_exit, pid() | port() | atom()}<br/><nbsp/><nbsp/>| {binary_info, binary()}<br/><nbsp/><nbsp/>| {term_to_binary_no_funs, term()}<br/><nbsp/><nbsp/>| {dist_port, port()}<br/><nbsp/><nbsp/>| {atom_out_cache_index, atom()}<br/><nbsp/><nbsp/>| {fake_scheduler_bindings,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>default_bind |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>thread_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>thread_no_node_processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_node_processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_node_thread_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>unbound}<br/><nbsp/><nbsp/>| {reader_groups_map, integer() &gt;= 0}</string></subtype>
      </guard></clause>
  </contract>
  <anno>W</anno>
</spec>
<spec>
  <name>instructions</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>instructions() -&gt; [string()]</head></clause>
  </contract>
</spec>
<spec>
  <name>lock_counters</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lock_counters(X1 :: info) -&gt; term()</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>lock_counters</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lock_counters(X1 :: clear) -&gt; ok</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>lock_counters</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lock_counters(X1 :: {copy_save, boolean()}) -&gt; boolean()</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>lock_counters</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lock_counters(X1 :: {process_locks, boolean()}) -&gt; boolean()</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>same</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>same(Term1, Term2) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term1</typename><string>Term1 = Term2 = term()</string></subtype>
        <subtype><typename>Term2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Term1</anno>
  <anno>Term2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: available_internal_state,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: boolean()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean()</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: reds_left, X2 :: integer() &gt;= 0) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>true</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: block, X2 :: integer() &gt;= 0) -&gt; true</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: sleep, X2 :: integer() &gt;= 0) -&gt; true</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: block_scheduler, X2 :: integer() &gt;= 0) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>true</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: next_pid, X2 :: integer() &gt;= 0) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>false | integer()</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: force_gc, X2 :: pid() | atom()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean()</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: send_fake_exit_signal,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: {pid() | port(), pid(), term()}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>dead | message | unaffected | exit</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: colliding_names,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: {atom(), integer() &gt;= 0}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[atom()]</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: binary_loop_limit, X2 :: default) -&gt; -1</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: binary_loop_limit,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: integer() &gt;= 0) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: re_loop_limit, X2 :: default) -&gt; -1</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: re_loop_limit, X2 :: integer() &gt;= 0) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: unicode_loop_limit, X2 :: default) -&gt; -1</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: unicode_loop_limit,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: integer() &gt;= 0) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: hipe_test_reschedule_suspend,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[]</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: hipe_test_reschedule_resume,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: pid() | port()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean()</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: test_long_gc_sleep,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: integer() &gt;= 0) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>true</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: kill_dist_connection, X2 :: port()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean()</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: not_running_optimization,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: boolean()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean()</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>set_internal_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_internal_state(X1 :: wait, X2 :: deallocations) -&gt; ok</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Term :: term()) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Term</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:28:44.</timestamp>
</module>