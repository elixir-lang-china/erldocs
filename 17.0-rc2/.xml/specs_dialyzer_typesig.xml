<module name="dialyzer_typesig">
<type>
  <name>label</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-label">label()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>prop_types</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-prop_types">prop_types()</marker> = <seealso marker="dict#type-dict">dict:dict</seealso>(<seealso marker="#type-label">label()</seealso>, <seealso marker="#type-types">types()</seealso>)</typehead></typedecl>
</type>
<type>
  <name>solver</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-solver">solver()</marker> = v1 | v2</typehead></typedecl>
</type>
<type>
  <name>types</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-types">types()</marker> = <seealso marker="erl_types#type-type_table">erl_types:type_table()</seealso></typehead></typedecl>
</type>
<type>
  <name>typesig_scc</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-typesig_scc">typesig_scc()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{mfa(), {<seealso marker="cerl#type-c_var">cerl:c_var()</seealso>, <seealso marker="cerl#type-c_fun">cerl:c_fun()</seealso>}, <seealso marker="#type-types">types()</seealso>}]</typehead></typedecl>
</type>
<spec>
  <name>analyze_scc</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>analyze_scc(SCC :: <seealso marker="#type-typesig_scc">typesig_scc()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NextLabel :: <seealso marker="#type-label">label()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CallGraph :: <seealso marker="dialyzer_callgraph#type-callgraph">dialyzer_callgraph:callgraph()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Plt :: <seealso marker="dialyzer_plt#type-plt">dialyzer_plt:plt()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>PropTypes :: <seealso marker="#type-prop_types">prop_types()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Solvers0 :: [<seealso marker="#type-solver">solver()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-prop_types">prop_types()</seealso></head></clause>
  </contract>
  <anno>CallGraph</anno>
  <anno>NextLabel</anno>
  <anno>Plt</anno>
  <anno>PropTypes</anno>
  <anno>SCC</anno>
  <anno>Solvers0</anno>
</spec>
<spec>
  <name>get_safe_underapprox</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_safe_underapprox(Pats :: [<seealso marker="cerl#type-c_values">cerl:c_values()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Guard :: <seealso marker="cerl#type-cerl">cerl:cerl()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_types#type-erl_type">erl_types:erl_type()</seealso></head></clause>
  </contract>
  <anno>Guard</anno>
  <anno>Pats</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:29:01.</timestamp>
</module>