<module name="inet_gethost_native">
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = #state{}</typehead></typedecl>
</type>
<spec>
  <name>control</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>gethostbyaddr</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>gethostbyname</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>gethostbyname</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: []) -&gt; {ok, pid(), pid()} | {error, term()}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>main_loop</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>run_once</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>server_init</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>start_raw</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>system_code_change</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>system_code_change(State :: <seealso marker="#type-state">state()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldVsn :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Extra :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>Module</anno>
  <anno>OldVsn</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>system_continue</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>system_terminate</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: term(), Pid :: pid()) -&gt; ok</head></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Reason</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:28:45.</timestamp>
</module>