<module name="dtls">
<type>
  <name>cipher</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cipher">cipher()</marker> = null<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| rc4_128<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| idea_cbc<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| des40_cbc<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| des_cbc<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| '3des_ede_cbc'<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| aes_128_cbc<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| aes_256_cbc</typehead></typedecl>
</type>
<type>
  <name>ciphers</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ciphers">ciphers()</marker> = [<seealso marker="#type-erl_cipher_suite">erl_cipher_suite()</seealso>] | string()</typehead></typedecl>
</type>
<type>
  <name>connect_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-connect_option">connect_option()</marker> = <seealso marker="#type-socket_connect_option">socket_connect_option()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-ssl_option">ssl_option()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-transport_option">transport_option()</seealso></typehead></typedecl>
</type>
<type>
  <name>erl_cipher_suite</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-erl_cipher_suite">erl_cipher_suite()</marker> = {<seealso marker="#type-key_algo">key_algo()</seealso>, <seealso marker="#type-cipher">cipher()</seealso>, <seealso marker="#type-hash">hash()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>hash</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hash">hash()</marker> = null | sha | md5 | sha224 | sha256 | sha384 | sha512</typehead></typedecl>
</type>
<type>
  <name>host</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-host">host()</marker> = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso> | <seealso marker="inet#type-hostname">inet:hostname()</seealso></typehead></typedecl>
</type>
<type>
  <name>key_algo</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-key_algo">key_algo()</marker> = null<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| rsa<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| dhe_rsa<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| dhe_dss<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| ecdhe_ecdsa<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| ecdh_ecdsa<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| ecdh_rsa<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| srp_rsa<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| srp_dss<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| psk<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| dhe_psk<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| rsa_psk<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| dh_anon<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| ecdh_anon<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| srp_anon</typehead></typedecl>
</type>
<type>
  <name>listen_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-listen_option">listen_option()</marker> = <seealso marker="#type-socket_listen_option">socket_listen_option()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-ssl_option">ssl_option()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-transport_option">transport_option()</seealso></typehead></typedecl>
</type>
<type>
  <name>path</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-path">path()</marker> = string()</typehead></typedecl>
</type>
<type>
  <name>prf_random</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-prf_random">prf_random()</marker> = client_random | server_random</typehead></typedecl>
</type>
<type>
  <name>reason</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-reason">reason()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>socket_connect_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_connect_option">socket_connect_option()</marker> = <seealso marker="gen_tcp#type-connect_option">gen_tcp:connect_option()</seealso></typehead></typedecl>
</type>
<type>
  <name>socket_listen_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_listen_option">socket_listen_option()</marker> = <seealso marker="gen_tcp#type-listen_option">gen_tcp:listen_option()</seealso></typehead></typedecl>
</type>
<type>
  <name>ssl_imp</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ssl_imp">ssl_imp()</marker> = new | old</typehead></typedecl>
</type>
<type>
  <name>ssl_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ssl_option">ssl_option()</marker> = {verify, <seealso marker="#type-verify_type">verify_type()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {verify_fun,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{function(), InitialUserState :: term()}}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {fail_if_no_peer_cert, boolean()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {depth, integer()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {cert, Der :: binary()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {certfile, <seealso marker="#type-path">path()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {key, Der :: binary()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {keyfile, <seealso marker="#type-path">path()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {password, string()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {cacerts, [Der :: binary()]}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {cacertfile, <seealso marker="#type-path">path()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {dh, Der :: binary()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {dhfile, <seealso marker="#type-path">path()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {user_lookup_fun,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{function(), InitialUserState :: term()}}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {psk_identity, string()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {srp_identity, {string(), string()}}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {ciphers, <seealso marker="#type-ciphers">ciphers()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {ssl_imp, <seealso marker="#type-ssl_imp">ssl_imp()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {reuse_sessions, boolean()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {reuse_session, function()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {hibernate_after, integer() | undefined}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {next_protocols_advertised, [binary()]}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {client_preferred_next_protocols,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>binary(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>client | server,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[binary()]}</typehead></typedecl>
  <anno>Der</anno>
  <anno>InitialUserState</anno>
</type>
<type>
  <name>sslsocket</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sslsocket">sslsocket()</marker> = #sslsocket{}</typehead></typedecl>
</type>
<type>
  <name>tls_atom_version</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-tls_atom_version">tls_atom_version()</marker> = sslv3 | tlsv1 | 'tlsv1.1' | 'tlsv1.2'</typehead></typedecl>
</type>
<type>
  <name>transport_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-transport_option">transport_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{cb_info,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{CallbackModule :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DataTag :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ClosedTag :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ErrTag :: atom()}}</typehead></typedecl>
  <anno>CallbackModule</anno>
  <anno>ClosedTag</anno>
  <anno>DataTag</anno>
  <anno>ErrTag</anno>
</type>
<type>
  <name>verify_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-verify_type">verify_type()</marker> = verify_none | verify_peer</typehead></typedecl>
</type>
<spec>
  <name>accept</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>accept(Sslsocket :: #sslsocket{}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, #sslsocket{}} | {error, <seealso marker="#type-reason">reason()</seealso>}</head></clause>
  </contract>
  <anno>Sslsocket</anno>
</spec>
<spec>
  <name>accept</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>accept(Sslsocket :: #sslsocket{}, Timeout :: timeout()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, #sslsocket{}} | {error, <seealso marker="#type-reason">reason()</seealso>}</head></clause>
  </contract>
  <anno>Sslsocket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>connect(Socket :: <seealso marker="#type-host">host()</seealso> | port(), Options :: [<seealso marker="#type-connect_option">connect_option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, #sslsocket{}} | {error, <seealso marker="#type-reason">reason()</seealso>}</head></clause>
  </contract>
  <anno>Options</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>connect(Socket :: <seealso marker="#type-host">host()</seealso> | port(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SslOptions :: [<seealso marker="#type-connect_option">connect_option()</seealso>] | <seealso marker="inet#type-port_number">inet:port_number()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: timeout() | list()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, #sslsocket{}} | {error, <seealso marker="#type-reason">reason()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
  <anno>SslOptions</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>handshake</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>handshake(Sslsocket :: #sslsocket{}) -&gt; ok | {error, <seealso marker="#type-reason">reason()</seealso>}</head></clause>
  </contract>
  <anno>Sslsocket</anno>
</spec>
<spec>
  <name>handshake</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handshake(Sslsocket :: #sslsocket{} | port(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: timeout()<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| [<seealso marker="#type-ssl_option">ssl_option()</seealso> | <seealso marker="#type-transport_option">transport_option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {ok, #sslsocket{}} | {error, <seealso marker="#type-reason">reason()</seealso>}</head></clause>
  </contract>
  <anno>Sslsocket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>handshake</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handshake(Socket :: port(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SslOptions :: [<seealso marker="#type-ssl_option">ssl_option()</seealso> | <seealso marker="#type-transport_option">transport_option()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: timeout()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, #sslsocket{}} | {error, <seealso marker="#type-reason">reason()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
  <anno>SslOptions</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>listen</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>listen(Port :: <seealso marker="inet#type-port_number">inet:port_number()</seealso>, Options :: [<seealso marker="#type-listen_option">listen_option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, #sslsocket{}} | {error, <seealso marker="#type-reason">reason()</seealso>}</head></clause>
  </contract>
  <anno>Options</anno>
  <anno>Port</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:28:05.</timestamp>
</module>