<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ssl_session</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ssl_session.xml</file></header>
<module>ssl_session</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>db_handle() = term()</c></tag>
<item><marker id="type-db_handle"/> </item>
<tag><c>host() = ip_address() (see module inet) | hostname() (see module inet)</c></tag>
<item><marker id="type-host"/> </item>
<tag><c>seconds() = integer()</c></tag>
<item><marker id="type-seconds"/> </item>
<tag><c>session_id() = 0 | binary()</c></tag>
<item><marker id="type-session_id"/> </item>
</taglist></section>
<funcs>
<func>
<name>is_new(SessionId::session_id(), ServerDecision::session_id()) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="is_new-2"/>
 </desc></func>
<func>
<name>client_id(ClientInfo::{host(), port_number() (see module inet), #ssl_options{protocol=undefined | tls | dtls, versions=undefined | ['tlsv1.2' | 'tlsv1.1' | tlsv1 | sslv3] | ['dtlsv1.2' | dtlsv1], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded() (see module public_key), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded() (see module public_key)}, password=undefined | string(), cacerts=undefined | [der_encoded() (see module public_key)], cacertfile=undefined | binary(), dh=undefined | der_encoded() (see module public_key), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), debug=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}}, Cache::db_handle(), CacheCb::atom(), OwnCert::undefined | binary()) -&gt; binary()</name>
<fsummary> </fsummary>

<desc><marker id="client_id-4"/>
 </desc></func>
<func>
<name>valid_session(Session::#session{}, LifeTime::seconds()) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="valid_session-2"/>
 </desc></func>
<func>
<name>server_id(Port, SuggestedId, SslOpts, Cert, Cache, CacheCb) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="server_id-6"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>