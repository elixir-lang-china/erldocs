<module name="filelib">
<type>
  <name>dirname</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dirname">dirname()</marker> = <seealso marker="#type-filename">filename()</seealso></typehead></typedecl>
</type>
<type>
  <name>dirname_all</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dirname_all">dirname_all()</marker> = <seealso marker="#type-filename_all">filename_all()</seealso></typehead></typedecl>
</type>
<type>
  <name>filename</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-filename">filename()</marker> = <seealso marker="file#type-name">file:name()</seealso></typehead></typedecl>
</type>
<type>
  <name>filename_all</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-filename_all">filename_all()</marker> = <seealso marker="file#type-name_all">file:name_all()</seealso></typehead></typedecl>
</type>
<spec>
  <name>compile_wildcard</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>ensure_dir</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ensure_dir(Name) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-filename_all">filename_all()</seealso> | <seealso marker="#type-dirname_all">dirname_all()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seealso marker="file#type-posix">file:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>file_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>file_size(Filename) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="#type-filename_all">filename_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
</spec>
<spec>
  <name>file_size</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>file_size(File :: <seealso marker="file#type-name">file:name()</seealso>, Mod :: atom()) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>File</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>fold_files</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>fold_files(Dir, RegExp, Recursive, Fun, AccIn) -&gt; AccOut</head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="#type-dirname">dirname()</seealso></string></subtype>
        <subtype><typename>RegExp</typename><string>RegExp = string()</string></subtype>
        <subtype><typename>Recursive</typename><string>Recursive = boolean()</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = fun((F :: <seealso marker="file#type-filename">file:filename()</seealso>, AccIn) -&gt; AccOut)</string></subtype>
        <subtype><typename>AccIn</typename><string>AccIn = AccOut = term()</string></subtype>
        <subtype><typename>AccOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>AccIn</anno>
  <anno>AccOut</anno>
  <anno>Dir</anno>
  <anno>F</anno>
  <anno>Fun</anno>
  <anno>Recursive</anno>
  <anno>RegExp</anno>
</spec>
<spec>
  <name>fold_files</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>fold_files(Dir :: <seealso marker="file#type-name">file:name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>RegExp :: string(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Recursive :: boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Fun :: fun((term(), term()) -&gt; term()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Acc :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Mod :: atom()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Acc</anno>
  <anno>Dir</anno>
  <anno>Fun</anno>
  <anno>Mod</anno>
  <anno>Recursive</anno>
  <anno>RegExp</anno>
</spec>
<spec>
  <name>is_dir</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_dir(Name) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-filename_all">filename_all()</seealso> | <seealso marker="#type-dirname_all">dirname_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>is_dir</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_dir(Dir :: <seealso marker="file#type-name_all">file:name_all()</seealso>, Mod :: atom()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>is_file</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_file(Name) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-filename_all">filename_all()</seealso> | <seealso marker="#type-dirname_all">dirname_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>is_file</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_file(File :: <seealso marker="file#type-name_all">file:name_all()</seealso>, Mod :: atom()) -&gt; boolean()</head></clause>
  </contract>
  <anno>File</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>is_regular</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_regular(Name) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-filename_all">filename_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>is_regular</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_regular(File :: <seealso marker="file#type-name_all">file:name_all()</seealso>, Mod :: atom()) -&gt; boolean()</head></clause>
  </contract>
  <anno>File</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>last_modified</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>last_modified(Name) -&gt; <seealso marker="file#type-date_time">file:date_time()</seealso> | 0</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-filename_all">filename_all()</seealso> | <seealso marker="#type-dirname_all">dirname_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>last_modified</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>last_modified(File :: <seealso marker="file#type-name_all">file:name_all()</seealso>, Mod :: atom()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="file#type-date_time">file:date_time()</seealso> | 0</head></clause>
  </contract>
  <anno>File</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>wildcard</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>wildcard(Wildcard) -&gt; [<seealso marker="file#type-filename">file:filename()</seealso>]</head>
      <guard>
        <subtype><typename>Wildcard</typename><string>Wildcard = <seealso marker="#type-filename">filename()</seealso> | <seealso marker="#type-dirname">dirname()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Wildcard</anno>
</spec>
<spec>
  <name>wildcard</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>wildcard(Wildcard, Cwd) -&gt; [<seealso marker="file#type-filename">file:filename()</seealso>]</head>
      <guard>
        <subtype><typename>Wildcard</typename><string>Wildcard = <seealso marker="#type-filename">filename()</seealso> | <seealso marker="#type-dirname">dirname()</seealso></string></subtype>
        <subtype><typename>Cwd</typename><string>Cwd = <seealso marker="#type-dirname">dirname()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cwd</anno>
  <anno>Wildcard</anno>
</spec>
<spec>
  <name>wildcard</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>wildcard(Pattern :: <seealso marker="file#type-name">file:name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Cwd :: <seealso marker="file#type-name">file:name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Mod :: atom()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="file#type-filename">file:filename()</seealso>]</head></clause>
  </contract>
  <anno>Cwd</anno>
  <anno>Mod</anno>
  <anno>Pattern</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:27:59.</timestamp>
</module>