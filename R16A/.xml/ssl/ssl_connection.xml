<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ssl_connection</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ssl_connection.xml</file></header>
<module>ssl_connection</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>gen_fsm_state_return() = {next_state, state_name(), #state{}} | {next_state, state_name(), #state{}, timeout()} | {stop, term(), #state{}}</c></tag>
<item><marker id="type-gen_fsm_state_return"/> </item>
<tag><c>state_name() = hello | abbreviated | certify | cipher | connection</c></tag>
<item><marker id="type-state_name"/> </item>
</taglist></section>
<funcs>
<func>
<name>send(Pid::pid(), Data::iodata()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="send-2"/>
 </desc></func>
<func>
<name>recv(Pid::pid(), Length::integer(), Timeout::timeout()) -&gt; {ok, binary() | list()} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="recv-3"/>
 </desc></func>
<func>
<name>connect(Host::host(), Port::port_number() (see module inet), Socket::port(), Options::{#ssl_options{}, #socket_options{}}, User::pid(), CbInfo::tuple(), Timeout::timeout()) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="connect-7"/>
 </desc></func>
<func>
<name>ssl_accept(Port::port_number() (see module inet), Socket::port(), Opts::{#ssl_options{}, #socket_options{}}, User::pid(), CbInfo::tuple(), Timeout::timeout()) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="ssl_accept-6"/>
 </desc></func>
<func>
<name>handshake(Sslsocket::#sslsocket{}, Timeout::timeout()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="handshake-2"/>
 </desc></func>
<func>
<name>socket_control(Socket::port(), Pid::pid(), CbModule::atom()) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="socket_control-3"/>
 </desc></func>
<func>
<name>close(ConnectionPid::pid()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="close-1"/>
 </desc></func>
<func>
<name>shutdown(ConnectionPid::pid(), How::atom()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="shutdown-2"/>
 </desc></func>
<func>
<name>new_user(ConnectionPid::pid(), User::pid()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="new_user-2"/>
 </desc></func>
<func>
<name>negotiated_next_protocol(ConnectionPid::pid()) -&gt; {ok, binary()} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="negotiated_next_protocol-1"/>
 </desc></func>
<func>
<name>get_opts(ConnectionPid::pid(), OptTags::list()) -&gt; {ok, list()} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="get_opts-2"/>
 </desc></func>
<func>
<name>set_opts(ConnectionPid::pid(), Options::list()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="set_opts-2"/>
 </desc></func>
<func>
<name>info(ConnectionPid::pid()) -&gt; {ok, {atom(), tuple()}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="info-1"/>
 </desc></func>
<func>
<name>session_info(ConnectionPid::pid()) -&gt; {ok, list()} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="session_info-1"/>
 </desc></func>
<func>
<name>peer_certificate(ConnectionPid::pid()) -&gt; {ok, binary() | undefined} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="peer_certificate-1"/>
 </desc></func>
<func>
<name>renegotiation(ConnectionPid::pid()) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="renegotiation-1"/>
 </desc></func>
<func>
<name>prf(ConnectionPid::pid(), Secret::binary() | master_secret, Label::binary(), Seed::binary() | prf_random() (see module ssl), WantedLength::non_neg_integer()) -&gt; {ok, binary()} | {error, reason()} | {'EXIT', term()}</name>
<fsummary> </fsummary>

<desc><marker id="prf-5"/>
 </desc></func>
<func>
<name>start_link(Role::atom(), Host::host(), Port::port_number() (see module inet), Socket::port(), Options::list(), User::pid(), CbInfo::tuple()) -&gt; {ok, pid()} | ignore | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="start_link-7"/>
 </desc></func>
<func>
<name>init(X1) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="init-1"/>
 </desc></func>
<func>
<name>hello(Hello_request::start | #hello_request{} | #client_hello{} | #server_hello{} | term(), State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="hello-2"/>
 </desc></func>
<func>
<name>abbreviated(Hello_request::#hello_request{} | #finished{} | term(), State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="abbreviated-2"/>
 </desc></func>
<func>
<name>certify(Hello_request::#hello_request{} | #certificate{} | #server_key_exchange{} | #certificate_request{} | #server_hello_done{} | #client_key_exchange{} | term(), State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="certify-2"/>
 </desc></func>
<func>
<name>cipher(Hello_request::#hello_request{} | #certificate_verify{} | #finished{} | term(), State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="cipher-2"/>
 </desc></func>
<func>
<name>connection(Hello_request::#hello_request{} | #client_hello{} | term(), State::#state{}) -&gt; gen_fsm_state_return()</name>
<fsummary> </fsummary>

<desc><marker id="connection-2"/>
 </desc></func>
<func>
<name>handle_event(Event, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_event-3"/>
 </desc></func>
<func>
<name>handle_sync_event(X1, From, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_sync_event-4"/>
 </desc></func>
<func>
<name>handle_info(Msg, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_info-3"/>
 </desc></func>
<func>
<name>terminate(Reason, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="terminate-3"/>
 </desc></func>
<func>
<name>code_change(OldVsn, StateName, State, Extra) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="code_change-4"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>