<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>edoc_specs</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>edoc_specs.xml</file></header>
<module>edoc_specs</module>
<modulesummary>EDoc interface to Erlang specifications and types.</modulesummary>
<description>
<p>EDoc interface to Erlang specifications and types.</p></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>entries() = [entry()]</c></tag>
<item><marker id="type-entries"/> </item>
<tag><c>entry() = #entry{}</c></tag>
<item><marker id="type-entry"/> </item>
<tag><c>module_info() = #module{}</c></tag>
<item><marker id="type-module_info"/> </item>
<tag><c>syntaxTree() = syntaxTree() (see module erl_syntax)</c></tag>
<item><marker id="type-syntaxTree"/> </item>
<tag><c>tag_kind() = type | spec | unknown</c></tag>
<item><marker id="type-tag_kind"/> </item>
</taglist></section>
<funcs>
<func>
<name>type(Form::syntaxTree(), TypeDocs::dict()) -&gt; #tag{}</name>
<fsummary>Convert an Erlang type to EDoc representation.</fsummary>

<desc><marker id="type-2"/>

<p>Convert an Erlang type to EDoc representation.
  TypeDocs is a dict of {Name, Doc}.
  Note: #t_typedef.name is set to {record, R} for record types.</p>
</desc></func>
<func>
<name>spec(Form::syntaxTree(), ClauseN::pos_integer()) -&gt; #tag{}</name>
<fsummary>Convert an Erlang spec to EDoc representation.</fsummary>

<desc><marker id="spec-2"/>

<p>Convert an Erlang spec to EDoc representation.</p>
</desc></func>
<func>
<name>dummy_spec(Form::syntaxTree()) -&gt; #tag{}</name>
<fsummary>Create a #tag{} record where data is a string with the name of
  the given Erlang spec and an empty list of arguments.</fsummary>

<desc><marker id="dummy_spec-1"/>

<p>Create a #tag{} record where data is a string with the name of
  the given Erlang spec and an empty list of arguments.</p>
</desc></func>
<func>
<name>docs(Forms::[syntaxTree()], CommentFun::([syntaxTree()], Line::term()) -&gt; #tag{}) -&gt; dict()</name>
<fsummary>Find comments after -type/-opaque declarations.</fsummary>

<desc><marker id="docs-2"/>

<p>Find comments after -type/-opaque declarations.
  Postcomments "inside" the type are skipped.</p>
</desc></func>
<func>
<name>add_data(Entries::entries(), Options::proplist() (see module proplists), File::filename() (see module file), Module::module_info()) -&gt; entries()</name>
<fsummary>Create tags a la EDoc for Erlang specifications and types.</fsummary>

<desc><marker id="add_data-4"/>

<p>Create tags a la EDoc for Erlang specifications and types.
  Exported types and types used (indirectly) by Erlang specs are
  added to the entries.</p>
</desc></func>
<func>
<name>is_tag(Tag::atom()) -&gt; boolean()</name>
<fsummary>Return true if Tag is one of the specification and type
  attribute tags recognized by the Erlang compiler.</fsummary>

<desc><marker id="is_tag-1"/>

<p>Return <c>true</c> if <c>Tag</c> is one of the specification and type
  attribute tags recognized by the Erlang compiler.</p>
</desc></func>
<func>
<name>tag(Tag::atom()) -&gt; tag_kind()</name>
<fsummary>Return the kind of the attribute tag.</fsummary>

<desc><marker id="tag-1"/>

<p>Return the kind of the attribute tag.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>