<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_typesig</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_typesig.xml</file></header>
<module>dialyzer_typesig</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>label() = non_neg_integer()</c></tag>
<item><marker id="type-label"/> </item>
<tag><c>solver() = v1 | v2</c></tag>
<item><marker id="type-solver"/> </item>
<tag><c>typesig_scc() = [{mfa(), {c_var() (see module cerl), c_fun() (see module cerl)}, dict()}]</c></tag>
<item><marker id="type-typesig_scc"/> </item>
</taglist></section>
<funcs>
<func>
<name>analyze_scc(SCC::typesig_scc(), NextLabel::label(), CallGraph::callgraph() (see module dialyzer_callgraph), Plt::plt() (see module dialyzer_plt), PropTypes::dict(), Solvers0::[solver()]) -&gt; dict()</name>
<fsummary> </fsummary>

<desc><marker id="analyze_scc-6"/>
 </desc></func>
<func>
<name>get_safe_underapprox(Pats::[c_values() (see module cerl)], Guard::cerl() (see module cerl)) -&gt; erl_type() (see module erl_types)</name>
<fsummary> </fsummary>

<desc><marker id="get_safe_underapprox-2"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>