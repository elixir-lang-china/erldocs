<module name="beam_dict">
<type>
  <name>atom_tab</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-atom_tab">atom_tab()</marker> = <seealso marker="gb_trees#type-tree">gb_trees:tree</seealso>(atom(), <seealso marker="#type-index">index()</seealso>)</typehead></typedecl>
</type>
<type>
  <name>bdict</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-bdict">bdict()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#asm{atoms = <seealso marker="#type-atom_tab">atom_tab()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>exports = [{<seealso marker="#type-label">label()</seealso>, arity(), <seealso marker="#type-label">label()</seealso>}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>locals = [{<seealso marker="#type-label">label()</seealso>, arity(), <seealso marker="#type-label">label()</seealso>}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>imports = <seealso marker="#type-import_tab">import_tab()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>strings = binary(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>lambdas = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>literals = <seealso marker="#type-literal_tab">literal_tab()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fnames = <seealso marker="#type-fname_tab">fname_tab()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>lines = <seealso marker="#type-line_tab">line_tab()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>num_lines = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>next_import = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>string_offset = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>next_literal = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>highest_opcode = integer() &gt;= 0}</typehead></typedecl>
</type>
<type>
  <name>fname_tab</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-fname_tab">fname_tab()</marker> = <seealso marker="gb_trees#type-tree">gb_trees:tree</seealso>(Name :: term(), <seealso marker="#type-index">index()</seealso>)</typehead></typedecl>
  <anno>Name</anno>
</type>
<type>
  <name>import_tab</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-import_tab">import_tab()</marker> = <seealso marker="gb_trees#type-tree">gb_trees:tree</seealso>(mfa(), <seealso marker="#type-index">index()</seealso>)</typehead></typedecl>
</type>
<type>
  <name>index</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-index">index()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>label</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-label">label()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>line_tab</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-line_tab">line_tab()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="gb_trees#type-tree">gb_trees:tree</seealso>({Fname :: <seealso marker="#type-index">index()</seealso>, Line :: term()}, <seealso marker="#type-index">index()</seealso>)</typehead></typedecl>
  <anno>Fname</anno>
  <anno>Line</anno>
</type>
<type>
  <name>literal_tab</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-literal_tab">literal_tab()</marker> = <seealso marker="dict#type-dict">dict:dict</seealso>(Literal :: term(), <seealso marker="#type-index">index()</seealso>)</typehead></typedecl>
  <anno>Literal</anno>
</type>
<spec>
  <name>atom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>atom(Atom :: atom(), Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt; {integer() &gt;= 1, <seealso marker="#type-bdict">bdict()</seealso>}</head></clause>
  </contract>
  <anno>Asm</anno>
  <anno>Atom</anno>
</spec>
<spec>
  <name>atom_table</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_table(Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, [[integer() &gt;= 0, ...]]}</head></clause>
  </contract>
  <anno>Asm</anno>
</spec>
<spec>
  <name>export</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>export(Func :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: arity(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Label :: <seealso marker="#type-label">label()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Dict0 :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-bdict">bdict()</seealso></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Dict0</anno>
  <anno>Func</anno>
  <anno>Label</anno>
</spec>
<spec>
  <name>export_table</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>export_table(Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, [{<seealso marker="#type-label">label()</seealso>, arity(), <seealso marker="#type-label">label()</seealso>}]}</head></clause>
  </contract>
  <anno>Asm</anno>
</spec>
<spec>
  <name>fname</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>highest_opcode</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>highest_opcode(Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Asm</anno>
</spec>
<spec>
  <name>import</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>import(Mod0 :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name0 :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: arity(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, <seealso marker="#type-bdict">bdict()</seealso>}</head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Asm</anno>
  <anno>Mod0</anno>
  <anno>Name0</anno>
</spec>
<spec>
  <name>import_table</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>import_table(Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, [{<seealso marker="#type-label">label()</seealso>, <seealso marker="#type-label">label()</seealso>, arity()}]}</head></clause>
  </contract>
  <anno>Asm</anno>
</spec>
<spec>
  <name>lambda</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>lambda(Lbl :: <seealso marker="#type-label">label()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NumFree :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, <seealso marker="#type-bdict">bdict()</seealso>}</head></clause>
  </contract>
  <anno>Asm</anno>
  <anno>Lbl</anno>
  <anno>NumFree</anno>
</spec>
<spec>
  <name>lambda_table</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lambda_table(Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt; {integer() &gt;= 0, [&lt;&lt;_:192&gt;&gt;]}</head></clause>
  </contract>
  <anno>Asm</anno>
</spec>
<spec>
  <name>line</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>line(X1 :: list(), Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt; {integer() &gt;= 0, <seealso marker="#type-bdict">bdict()</seealso>}</head></clause>
  </contract>
  <anno>Asm</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>line_table</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>line_table(Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[string()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{integer() &gt;= 0, integer() &gt;= 0}]}</head></clause>
  </contract>
  <anno>Asm</anno>
</spec>
<spec>
  <name>literal</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>literal(Lit :: term(), Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, <seealso marker="#type-bdict">bdict()</seealso>}</head></clause>
  </contract>
  <anno>Asm</anno>
  <anno>Lit</anno>
</spec>
<spec>
  <name>literal_table</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>literal_table(Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, [[binary(), ...]]}</head></clause>
  </contract>
  <anno>Asm</anno>
</spec>
<spec>
  <name>local</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>local(Func :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: arity(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Label :: <seealso marker="#type-label">label()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Dict0 :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-bdict">bdict()</seealso></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Dict0</anno>
  <anno>Func</anno>
  <anno>Label</anno>
</spec>
<spec>
  <name>local_table</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>local_table(Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, [{<seealso marker="#type-label">label()</seealso>, arity(), <seealso marker="#type-label">label()</seealso>}]}</head></clause>
  </contract>
  <anno>Asm</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; <seealso marker="#type-bdict">bdict()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>opcode</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>opcode(Op :: integer() &gt;= 0, Dict :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt; <seealso marker="#type-bdict">bdict()</seealso></head></clause>
  </contract>
  <anno>Dict</anno>
  <anno>Op</anno>
</spec>
<spec>
  <name>string</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>string(Str :: string(), Dict :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, <seealso marker="#type-bdict">bdict()</seealso>}</head></clause>
  </contract>
  <anno>Dict</anno>
  <anno>Str</anno>
</spec>
<spec>
  <name>string_table</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>string_table(Asm :: <seealso marker="#type-bdict">bdict()</seealso>) -&gt; {integer() &gt;= 0, binary()}</head></clause>
  </contract>
  <anno>Asm</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:27:24.</timestamp>
</module>