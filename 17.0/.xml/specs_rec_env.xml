<module name="rec_env">
<type>
  <name>environment</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-environment">environment()</marker> = [<seealso marker="#type-mapping">mapping()</seealso>, ...]</typehead></typedecl>
</type>
<type>
  <name>mapping</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mapping">mapping()</marker> = {map, <seealso marker="dict#type-dict">dict:dict()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {rec, <seealso marker="dict#type-dict">dict:dict()</seealso>, <seealso marker="dict#type-dict">dict:dict()</seealso>}</typehead></typedecl>
</type>
<spec>
  <name>bind</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bind(Key :: term(), Value :: term(), Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-environment">environment()</seealso></head></clause>
  </contract>
  <anno>Env</anno>
  <anno>Key</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>bind_list</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bind_list(Ks :: [term()], Vs :: [term()], Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-environment">environment()</seealso></head></clause>
  </contract>
  <anno>Env</anno>
  <anno>Ks</anno>
  <anno>Vs</anno>
</spec>
<spec>
  <name>bind_recursive</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>bind_recursive(Ks :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Vs :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>F :: fun((term(), <seealso marker="#type-environment">environment()</seealso>) -&gt; term()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-environment">environment()</seealso></head></clause>
  </contract>
  <anno>Env</anno>
  <anno>F</anno>
  <anno>Ks</anno>
  <anno>Vs</anno>
</spec>
<spec>
  <name>delete</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete(Key :: term(), Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt; <seealso marker="#type-environment">environment()</seealso></head></clause>
  </contract>
  <anno>Env</anno>
  <anno>Key</anno>
</spec>
<spec>
  <name>empty</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>empty() -&gt; <seealso marker="#type-environment">environment()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>get</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get(Key :: term(), Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt; term()</head></clause>
  </contract>
  <anno>Env</anno>
  <anno>Key</anno>
</spec>
<spec>
  <name>is_defined</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_defined(Key :: term(), Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Env</anno>
  <anno>Key</anno>
</spec>
<spec>
  <name>is_empty</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_empty(Es :: <seealso marker="#type-environment">environment()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Es</anno>
</spec>
<spec>
  <name>keys</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>keys(Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt; [term()]</head></clause>
  </contract>
  <anno>Env</anno>
</spec>
<spec>
  <name>lookup</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup(Key :: term(), Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>error | {ok, term()}</head></clause>
  </contract>
  <anno>Env</anno>
  <anno>Key</anno>
</spec>
<spec>
  <name>new_key</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new_key(Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt; integer()</head></clause>
  </contract>
  <anno>Env</anno>
</spec>
<spec>
  <name>new_key</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new_key(F :: fun((integer()) -&gt; term()), Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Env</anno>
  <anno>F</anno>
</spec>
<spec>
  <name>new_keys</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new_keys(N :: integer(), Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt; [integer()]</head></clause>
  </contract>
  <anno>Env</anno>
  <anno>N</anno>
</spec>
<spec>
  <name>new_keys</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>new_keys(N :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>F :: fun((integer()) -&gt; term()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[term()]</head></clause>
  </contract>
  <anno>Env</anno>
  <anno>F</anno>
  <anno>N</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Env</anno>
</spec>
<spec>
  <name>to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_list(Env :: <seealso marker="#type-environment">environment()</seealso>) -&gt; [{term(), term()}]</head></clause>
  </contract>
  <anno>Env</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:27:25.</timestamp>
</module>