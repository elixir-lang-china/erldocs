<module name="dialyzer_codeserver">
<type>
  <name>codeserver</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-codeserver">codeserver()</marker></typehead></typedecl>
</type>
<type>
  <name>contracts</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-contracts">contracts()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="dict#type-dict">dict:dict</seealso>(mfa(), <seealso marker="dialyzer_contracts#type-file_contract">dialyzer_contracts:file_contract()</seealso>)</typehead></typedecl>
</type>
<type>
  <name>label</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-label">label()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>mod_contracts</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mod_contracts">mod_contracts()</marker> = <seealso marker="dict#type-dict">dict:dict</seealso>(module(), <seealso marker="#type-contracts">contracts()</seealso>)</typehead></typedecl>
</type>
<type>
  <name>mod_records</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mod_records">mod_records()</marker> = <seealso marker="dict#type-dict">dict:dict</seealso>(module(), <seealso marker="#type-types">types()</seealso>)</typehead></typedecl>
</type>
<type>
  <name>types</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-types">types()</marker> = <seealso marker="erl_types#type-type_table">erl_types:type_table()</seealso></typehead></typedecl>
</type>
<spec>
  <name>delete</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>finalize_contracts</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>finalize_contracts(SpecDict :: <seealso marker="#type-mod_contracts">mod_contracts()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CallbackDict :: <seealso marker="#type-mod_contracts">mod_contracts()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CS :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>CS</anno>
  <anno>CallbackDict</anno>
  <anno>SpecDict</anno>
</spec>
<spec>
  <name>finalize_exported_types</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>finalize_exported_types(Set :: <seealso marker="sets#type-set">sets:set</seealso>(mfa()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CS :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>CS</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>finalize_records</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>finalize_records(Dict :: <seealso marker="#type-mod_records">mod_records()</seealso>, CS :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>CS</anno>
  <anno>Dict</anno>
</spec>
<spec>
  <name>get_callbacks</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_callbacks(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt; list()</head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>get_contracts</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_contracts(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt; <seealso marker="#type-mod_contracts">mod_contracts()</seealso></head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>get_exported_types</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_exported_types(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt; <seealso marker="sets#type-set">sets:set</seealso>(mfa())</head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>get_exports</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_exports(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt; <seealso marker="sets#type-set">sets:set</seealso>(mfa())</head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>get_next_core_label</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_next_core_label(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt; <seealso marker="#type-label">label()</seealso></head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>get_records</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_records(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt; <seealso marker="#type-mod_records">mod_records()</seealso></head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>get_temp_contracts</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_temp_contracts(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-mod_contracts">mod_contracts()</seealso>, <seealso marker="#type-mod_contracts">mod_contracts()</seealso>}</head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>get_temp_exported_types</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_temp_exported_types(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="sets#type-set">sets:set</seealso>(mfa())</head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>get_temp_records</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_temp_records(Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt; <seealso marker="#type-mod_records">mod_records()</seealso></head></clause>
  </contract>
  <anno>Codeserver</anno>
</spec>
<spec>
  <name>insert</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>insert(Mod :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ModCode :: <seealso marker="cerl#type-c_module">cerl:c_module()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CS :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>CS</anno>
  <anno>Mod</anno>
  <anno>ModCode</anno>
</spec>
<spec>
  <name>insert_exports</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>insert_exports(List :: [mfa()], Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>Codeserver</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>insert_temp_exported_types</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>insert_temp_exported_types(Set :: <seealso marker="sets#type-set">sets:set</seealso>(mfa()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CS :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>CS</anno>
  <anno>Set</anno>
</spec>
<spec>
  <name>is_exported</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_exported(MFA :: mfa(), Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Codeserver</anno>
  <anno>MFA</anno>
</spec>
<spec>
  <name>lookup_mfa_code</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup_mfa_code(MFA :: mfa(), CS :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="cerl#type-c_var">cerl:c_var()</seealso>, <seealso marker="cerl#type-c_fun">cerl:c_fun()</seealso>}</head></clause>
  </contract>
  <anno>CS</anno>
  <anno>MFA</anno>
</spec>
<spec>
  <name>lookup_mfa_contract</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup_mfa_contract(MFA :: mfa(), Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>error |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="dialyzer_contracts#type-file_contract">dialyzer_contracts:file_contract()</seealso>}</head></clause>
  </contract>
  <anno>Codeserver</anno>
  <anno>MFA</anno>
</spec>
<spec>
  <name>lookup_mod_code</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup_mod_code(Mod :: atom(), CS :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="cerl#type-c_module">cerl:c_module()</seealso></head></clause>
  </contract>
  <anno>CS</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>lookup_mod_contracts</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup_mod_contracts(Mod :: atom(), Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-contracts">contracts()</seealso></head></clause>
  </contract>
  <anno>Codeserver</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>lookup_mod_records</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup_mod_records(Mod :: atom(), Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-types">types()</seealso></head></clause>
  </contract>
  <anno>Codeserver</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; <seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>set_next_core_label</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_next_core_label(NCL :: <seealso marker="#type-label">label()</seealso>, CS :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>CS</anno>
  <anno>NCL</anno>
</spec>
<spec>
  <name>set_temp_records</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_temp_records(Dict :: <seealso marker="#type-mod_records">mod_records()</seealso>, CS :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>CS</anno>
  <anno>Dict</anno>
</spec>
<spec>
  <name>store_temp_contracts</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>store_temp_contracts(Mod :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SpecDict :: <seealso marker="#type-contracts">contracts()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CallbackDict :: <seealso marker="#type-contracts">contracts()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>CallbackDict</anno>
  <anno>Codeserver</anno>
  <anno>Mod</anno>
  <anno>SpecDict</anno>
</spec>
<spec>
  <name>store_temp_records</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>store_temp_records(Mod :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Dict :: <seealso marker="#type-types">types()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Codeserver :: <seealso marker="#type-codeserver">codeserver()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-codeserver">codeserver()</seealso></head></clause>
  </contract>
  <anno>Codeserver</anno>
  <anno>Dict</anno>
  <anno>Mod</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:27:10.</timestamp>
</module>