<module name="filename">
<spec>
  <name>absname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>absname(Filename) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
</spec>
<spec>
  <name>absname</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>absname(Filename, Dir) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = Dir = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
        <subtype><typename>Dir</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Filename</anno>
</spec>
<spec>
  <name>absname_join</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>absname_join(Dir, Filename) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = Filename = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
        <subtype><typename>Filename</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Filename</anno>
</spec>
<spec>
  <name>append</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>append(Dir :: <seealso marker="file#type-filename_all">file:filename_all()</seealso>, Name :: <seealso marker="file#type-name_all">file:name_all()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="file#type-filename_all">file:filename_all()</seealso></head></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>basename</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>basename(Filename) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
</spec>
<spec>
  <name>basename</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>basename(Filename, Ext) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = Ext = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
        <subtype><typename>Ext</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ext</anno>
  <anno>Filename</anno>
</spec>
<spec>
  <name>dirname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>dirname(Filename) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
</spec>
<spec>
  <name>extension</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>extension(Filename) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
</spec>
<spec>
  <name>find_src</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>find_src(Beam) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{SourceFile, Options} | {error, {ErrorReason, Module}}</head>
      <guard>
        <subtype><typename>Beam</typename><string>Beam = Module | Filename</string></subtype>
        <subtype><typename>Filename</typename><string>Filename = atom() | string()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>SourceFile</typename><string>SourceFile = string()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {i, Path :: string()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {outdir, Path :: string()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {d, atom()}</string></subtype>
        <subtype><typename>ErrorReason</typename><string>ErrorReason = non_existing | preloaded | interpreted</string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam</anno>
  <anno>ErrorReason</anno>
  <anno>Filename</anno>
  <anno>Module</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Path</anno>
  <anno>SourceFile</anno>
</spec>
<spec>
  <name>find_src</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>find_src(Beam, Rules) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{SourceFile, Options} | {error, {ErrorReason, Module}}</head>
      <guard>
        <subtype><typename>Beam</typename><string>Beam = Module | Filename</string></subtype>
        <subtype><typename>Filename</typename><string>Filename = atom() | string()</string></subtype>
        <subtype><typename>Rules</typename><string>Rules = [{BinSuffix :: string(), SourceSuffix :: string()}]</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>SourceFile</typename><string>SourceFile = string()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {i, Path :: string()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {outdir, Path :: string()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {d, atom()}</string></subtype>
        <subtype><typename>ErrorReason</typename><string>ErrorReason = non_existing | preloaded | interpreted</string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam</anno>
  <anno>BinSuffix</anno>
  <anno>ErrorReason</anno>
  <anno>Filename</anno>
  <anno>Module</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Path</anno>
  <anno>Rules</anno>
  <anno>SourceFile</anno>
  <anno>SourceSuffix</anno>
</spec>
<spec>
  <name>flatten</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>flatten(Filename) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
</spec>
<spec>
  <name>join</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>join(Components) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Components</typename><string>Components = [<seealso marker="file#type-name_all">file:name_all()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Components</anno>
</spec>
<spec>
  <name>join</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>join(Name1, Name2) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Name1</typename><string>Name1 = Name2 = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
        <subtype><typename>Name2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name1</anno>
  <anno>Name2</anno>
</spec>
<spec>
  <name>nativename</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>nativename(Path) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Path</typename><string>Path = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Path</anno>
</spec>
<spec>
  <name>pathtype</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pathtype(Path) -&gt; absolute | relative | volumerelative</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Path</anno>
</spec>
<spec>
  <name>rootname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rootname(Filename) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
</spec>
<spec>
  <name>rootname</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rootname(Filename, Ext) -&gt; <seealso marker="file#type-filename_all">file:filename_all()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = Ext = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
        <subtype><typename>Ext</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ext</anno>
  <anno>Filename</anno>
</spec>
<spec>
  <name>split</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>split(Filename) -&gt; Components</head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name_all">file:name_all()</seealso></string></subtype>
        <subtype><typename>Components</typename><string>Components = [<seealso marker="file#type-name_all">file:name_all()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Components</anno>
  <anno>Filename</anno>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:26:11.</timestamp>
</module>