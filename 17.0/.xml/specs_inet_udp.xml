<module name="inet_udp">
<spec>
  <name>close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>close(S :: <seealso marker="inet#type-socket">inet:socket()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>S</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>controlling_process</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>fdopen</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>getaddr</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>getaddr</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>getserv</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>open</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>open(Port :: term()) -&gt; {ok, <seealso marker="inet#type-socket">inet:socket()</seealso>} | {error, atom()}</head></clause>
  </contract>
  <anno>Port</anno>
</spec>
<spec>
  <name>open</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>open(Port :: term(), Opts :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="inet#type-socket">inet:socket()</seealso>} | {error, atom()}</head></clause>
  </contract>
  <anno>Opts</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:26:56.</timestamp>
</module>