<module name="dialyzer_coordinator">
<type>
  <name>collector</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-collector">collector()</marker> = pid()</typehead></typedecl>
</type>
<type>
  <name>compile_init_data</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-compile_init_data">compile_init_data()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="dialyzer_analysis_callgraph#type-compile_init_data">dialyzer_analysis_callgraph:compile_init_data()</seealso></typehead></typedecl>
</type>
<type>
  <name>compile_jobs</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-compile_jobs">compile_jobs()</marker> = [<seealso marker="file#type-filename">file:filename()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>compile_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-compile_result">compile_result()</marker> = <seealso marker="dialyzer_analysis_callgraph#type-compile_result">dialyzer_analysis_callgraph:compile_result()</seealso></typehead></typedecl>
</type>
<type>
  <name>coordinator</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-coordinator">coordinator()</marker> = {<seealso marker="#type-collector">collector()</seealso>, <seealso marker="#type-regulator">regulator()</seealso>, <seealso marker="#type-scc_to_pid">scc_to_pid()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>dataflow_init_data</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dataflow_init_data">dataflow_init_data()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="dialyzer_succ_typings#type-dataflow_init_data">dialyzer_succ_typings:dataflow_init_data()</seealso></typehead></typedecl>
</type>
<type>
  <name>dataflow_jobs</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dataflow_jobs">dataflow_jobs()</marker> = [module()]</typehead></typedecl>
</type>
<type>
  <name>dataflow_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dataflow_result">dataflow_result()</marker> = [<seealso marker="#type-mfa_or_funlbl">mfa_or_funlbl()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>dial_warn_tag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dial_warn_tag">dial_warn_tag()</marker> = warn_return_no_exit<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_return_only_exit<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_not_called<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_non_proper_list<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_matching<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_opaque<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_fun_app<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_failing_call<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_bin_construction<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_contract_types<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_contract_syntax<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_contract_not_equal<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_contract_subtype<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_contract_supertype<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_callgraph<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_umatched_return<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_race_condition<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_behaviour<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_contract_range<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_undefined_callbacks<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| warn_unknown</typehead></typedecl>
</type>
<type>
  <name>dial_warning</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dial_warning">dial_warning()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-dial_warn_tag">dial_warn_tag()</seealso>, <seealso marker="#type-file_line">file_line()</seealso>, {atom(), [term()]}}</typehead></typedecl>
</type>
<type>
  <name>file_line</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-file_line">file_line()</marker> = {<seealso marker="file#type-filename">file:filename()</seealso>, integer() &gt;= 0}</typehead></typedecl>
</type>
<type>
  <name>init_data</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-init_data">init_data()</marker> = <seealso marker="#type-compile_init_data">compile_init_data()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-typesig_init_data">typesig_init_data()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-dataflow_init_data">dataflow_init_data()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-warnings_init_data">warnings_init_data()</seealso></typehead></typedecl>
</type>
<type>
  <name>job</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-job">job()</marker> = <seealso marker="#type-scc">scc()</seealso> | module() | <seealso marker="file#type-filename">file:filename()</seealso></typehead></typedecl>
</type>
<type>
  <name>job_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-job_result">job_result()</marker> = <seealso marker="dialyzer_analysis_callgraph#type-one_file_result">dialyzer_analysis_callgraph:one_file_result()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-typesig_result">typesig_result()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-dataflow_result">dataflow_result()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-warnings_result">warnings_result()</seealso></typehead></typedecl>
</type>
<type>
  <name>label</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-label">label()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>mfa_or_funlbl</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mfa_or_funlbl">mfa_or_funlbl()</marker> = <seealso marker="#type-label">label()</seealso> | mfa()</typehead></typedecl>
</type>
<type>
  <name>mode</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mode">mode()</marker> = typesig | dataflow | compile | warnings</typehead></typedecl>
</type>
<type>
  <name>regulator</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-regulator">regulator()</marker> = pid()</typehead></typedecl>
</type>
<type>
  <name>result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-result">result()</marker> = <seealso marker="#type-compile_result">compile_result()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-typesig_result">typesig_result()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-dataflow_result">dataflow_result()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-warnings_result">warnings_result()</seealso></typehead></typedecl>
</type>
<type>
  <name>scc</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-scc">scc()</marker> = [<seealso marker="#type-mfa_or_funlbl">mfa_or_funlbl()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>scc_to_pid</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-scc_to_pid">scc_to_pid()</marker> = <seealso marker="ets#type-tid">ets:tid()</seealso> | unused</typehead></typedecl>
</type>
<type>
  <name>timing</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-timing">timing()</marker> = <seealso marker="dialyzer_timing#type-timing_server">dialyzer_timing:timing_server()</seealso></typehead></typedecl>
</type>
<type>
  <name>typesig_init_data</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-typesig_init_data">typesig_init_data()</marker> = <seealso marker="dialyzer_succ_typings#type-typesig_init_data">dialyzer_succ_typings:typesig_init_data()</seealso></typehead></typedecl>
</type>
<type>
  <name>typesig_jobs</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-typesig_jobs">typesig_jobs()</marker> = [<seealso marker="#type-scc">scc()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>typesig_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-typesig_result">typesig_result()</marker> = [<seealso marker="#type-mfa_or_funlbl">mfa_or_funlbl()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>warnings_init_data</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-warnings_init_data">warnings_init_data()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="dialyzer_succ_typings#type-warnings_init_data">dialyzer_succ_typings:warnings_init_data()</seealso></typehead></typedecl>
</type>
<type>
  <name>warnings_jobs</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-warnings_jobs">warnings_jobs()</marker> = [module()]</typehead></typedecl>
</type>
<type>
  <name>warnings_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-warnings_result">warnings_result()</marker> = [<seealso marker="#type-dial_warning">dial_warning()</seealso>]</typehead></typedecl>
</type>
<spec>
  <name>get_next_label</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_next_label(EstimatedSize :: integer(), X2 :: <seealso marker="#type-coordinator">coordinator()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()</head></clause>
  </contract>
  <anno>EstimatedSize</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>job_done</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>job_done(Job :: <seealso marker="#type-job">job()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Result :: <seealso marker="#type-job_result">job_result()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X3 :: <seealso marker="#type-coordinator">coordinator()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Job</anno>
  <anno>Result</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>parallel_job</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>parallel_job(Mode :: compile,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Jobs :: <seealso marker="#type-compile_jobs">compile_jobs()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InitData :: <seealso marker="#type-compile_init_data">compile_init_data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timing :: <seealso marker="#type-timing">timing()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-compile_result">compile_result()</seealso>, integer()}</head></clause>
  </contract>
  <anno>InitData</anno>
  <anno>Jobs</anno>
  <anno>Mode</anno>
  <anno>Timing</anno>
</spec>
<spec>
  <name>parallel_job</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>parallel_job(Mode :: typesig,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Jobs :: <seealso marker="#type-typesig_jobs">typesig_jobs()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InitData :: <seealso marker="#type-typesig_init_data">typesig_init_data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timing :: <seealso marker="#type-timing">timing()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-typesig_result">typesig_result()</seealso></head></clause>
  </contract>
  <anno>InitData</anno>
  <anno>Jobs</anno>
  <anno>Mode</anno>
  <anno>Timing</anno>
</spec>
<spec>
  <name>parallel_job</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>parallel_job(Mode :: dataflow,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Jobs :: <seealso marker="#type-dataflow_jobs">dataflow_jobs()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InitData :: <seealso marker="#type-dataflow_init_data">dataflow_init_data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timing :: <seealso marker="#type-timing">timing()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-dataflow_result">dataflow_result()</seealso></head></clause>
  </contract>
  <anno>InitData</anno>
  <anno>Jobs</anno>
  <anno>Mode</anno>
  <anno>Timing</anno>
</spec>
<spec>
  <name>parallel_job</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>parallel_job(Mode :: warnings,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Jobs :: <seealso marker="#type-warnings_jobs">warnings_jobs()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InitData :: <seealso marker="#type-warnings_init_data">warnings_init_data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timing :: <seealso marker="#type-timing">timing()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-warnings_result">warnings_result()</seealso></head></clause>
  </contract>
  <anno>InitData</anno>
  <anno>Jobs</anno>
  <anno>Mode</anno>
  <anno>Timing</anno>
</spec>
<spec>
  <name>request_activation</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>request_activation(X1 :: <seealso marker="#type-coordinator">coordinator()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>sccs_to_pids</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sccs_to_pids(SCCs :: [<seealso marker="#type-scc">scc()</seealso> | module()], X2 :: <seealso marker="#type-coordinator">coordinator()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{[<seealso marker="dialyzer_worker#type-worker">dialyzer_worker:worker()</seealso>], [<seealso marker="#type-scc">scc()</seealso> | module()]}</head></clause>
  </contract>
  <anno>SCCs</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>wait_activation</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>wait_activation() -&gt; ok</head></clause>
  </contract>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:27:11.</timestamp>
</module>