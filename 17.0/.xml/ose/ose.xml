<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ose</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ose.xml</file></header>
<module>ose</module>
<modulesummary>Interface module for OSE messaging and process monitoring from Erlang.</modulesummary>
<description>
<p>Interface module for OSE messaging and process monitoring from Erlang</p>
 
  <p>For each mailbox created through <seealso marker="#open-1">open/1</seealso> a OSE phantom process with  
that name is started. Since phantom processes are used the memory footprint  
of each mailbox is quite small.</p>
 
  <p>To receive messages you first have to subscribe to the specific message
  numbers that you are interested in with <seealso marker="#listen-2">listen/2</seealso>. The messages
  will be sent to the Erlang process that created the mailbox.
 </p></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>attach_ref()</c></tag>
<item><marker id="type-attach_ref"/>
<p>  Reference from an attach request.  This term will be included
  in the term returned when the attached mailbox disappears.</p>
</item>
<tag><c>hunt_ref()</c></tag>
<item><marker id="type-hunt_ref"/>
<p>  Reference from a hunt request.  This term will be included
  in a successful hunt response.</p>
</item>
<tag><c>mailbox()</c></tag>
<item><marker id="type-mailbox"/>
<p>  Mailbox handle.  Implemented as an erlang port.</p>
</item>
<tag><c>mailbox_id()</c></tag>
<item><marker id="type-mailbox_id"/>
<p>  Mailbox ID, this is the same as the process id of an OSE process.
  An integer.</p>
</item>
<tag><c>message_number() = 0..4294967295</c></tag>
<item><marker id="type-message_number"/>
<p>  OSE Signal number</p>
</item>
</taglist></section>
<funcs>
<func>
<name>open(Name) -&gt; Port</name>
<fsummary>Create a mailbox with the given name and return a port that handles  
the mailbox.</fsummary>
<type>
<v>Name = iodata()</v><v>Port = mailbox()</v></type>
<desc><marker id="open-1"/>

<p>Create a mailbox with the given name and return a port that handles  
the mailbox.</p>
 
  <p>An OSE phantom process with the given name will be created that will send any
  messages sent through this mailbox. Any messages sent to the new OSE process
  will automatically be converted to an Erlang message and sent to the Erlang
  process that calls this function. See <seealso marker="#listen-2">listen/2</seealso> for details about the  
format of the message sent.</p>
 
  <p>The caller gets linked to the created mailbox.</p>
 
  <p>raises: <c>badarg</c> | <c>system_limit</c>
 </p>
<p><em>See also:</em> <seealso marker="#listen-2">listen/2</seealso>.</p>
</desc></func>
<func>
<name>close(Port) -&gt; ok</name>
<fsummary>Close a mailbox.</fsummary>
<type>
<v>Port = mailbox()</v></type>
<desc><marker id="close-1"/>

<p>Close a mailbox</p>
 
  <p>This kills the OSE phantom process associated with this mailbox.</p>
 
  <p>Will also consume any <c>{'EXIT',Port,_}</c> message from the port that comes  
due to the port closing when the calling process traps exits.</p>
 
  <p>raises: <c>badarg</c></p>
</desc></func>
<func>
<name>get_id(Port) -&gt; Pid</name>
<fsummary>Get the mailbox id for the given port.</fsummary>
<type>
<v>Port = mailbox()</v><v>Pid = mailbox_id()</v></type>
<desc><marker id="get_id-1"/>

<p>Get the mailbox id for the given port.</p>
 
  <p>The mailbox id is the same as the OSE process id of the OSE phantom process  
that this mailbox represents.</p>
 
  <p>raises: <c>badarg</c></p>
</desc></func>
<func>
<name>get_name(Port, Pid) -&gt; Name | undefined</name>
<fsummary>Get the mailbox name for the given mailbox id.</fsummary>
<type>
<v>Port = mailbox()</v><v>Pid = mailbox_id()</v><v>Name = binary()</v></type>
<desc><marker id="get_name-2"/>

<p>Get the mailbox name for the given mailbox id.</p>
 
  <p>The mailbox name is the name of the OSE process with process id Pid.</p>
 
  <p>This call will fail with badarg if the underlying system does not support  
getting the name from a process id.</p>
 
  <p>raises: <c>badarg</c></p>
</desc></func>
<func>
<name>hunt(Port, HuntPath) -&gt; Ref</name>
<fsummary>Hunt for OSE process by name.</fsummary>
<type>
<v>Port = mailbox()</v><v>HuntPath = iodata()</v><v>Ref = hunt_ref()</v></type>
<desc><marker id="hunt-2"/>

<p>Hunt for OSE process by name.</p>
 
  <p>Will send <c>{mailbox_up, Port, Ref, MboxId}</c>  
to the calling process when the OSE process becomes available.</p>
 
  <p>Returns a reference term that can be used to cancel the hunt
  using <seealso marker="#dehunt-2">dehunt/2</seealso>.</p>
 
  <p>raises: <c>badarg</c>
 </p>
</desc></func>
<func>
<name>dehunt(Port, Ref) -&gt; ok</name>
<fsummary>Stop hunting for OSE process.</fsummary>
<type>
<v>Port = mailbox()</v><v>Ref = hunt_ref()</v></type>
<desc><marker id="dehunt-2"/>

<p>Stop hunting for OSE process.</p>
 
  <p>If a message for this hunt has been sent but not received  
by the calling process, it is removed from the message queue.  
Note that this only works if the same process that did  
the hunt does the dehunt.</p>
 
  <p>raises: <c>badarg</c>
 </p>
<p><em>See also:</em> <seealso marker="#hunt-2">hunt/2</seealso>.</p>
</desc></func>
<func>
<name>attach(Port, Pid) -&gt; Ref</name>
<fsummary>Attach to an OSE process.</fsummary>
<type>
<v>Port = mailbox()</v><v>Pid = mailbox_id()</v><v>Ref = attach_ref()</v></type>
<desc><marker id="attach-2"/>

<p>Attach to an OSE process.</p>
 
  <p>Will send <c>{mailbox_down, Port, Ref, MboxId}</c>  
to the calling process if the OSE process exits.</p>
 
  <p>Returns a reference that can be used to cancel the attachment
  using <seealso marker="#detach-2">detach/2</seealso>.</p>
 
  <p>raises: <c>badarg</c> | <c>enomem</c>
 </p>
</desc></func>
<func>
<name>detach(Port, Ref) -&gt; ok</name>
<fsummary>Remove attachment to an OSE process.</fsummary>
<type>
<v>Port = mailbox()</v><v>Ref = attach_ref()</v></type>
<desc><marker id="detach-2"/>

<p>Remove attachment to an OSE process.</p>
 
  <p>If a message for this monitor has been sent but not received  
by the calling process, it is removed from the message queue.  
Note that this only works of the same process  
that did the attach does the detach.</p>
 
  <p>raises: <c>badarg</c>
 </p>
<p><em>See also:</em> <seealso marker="#attach-2">attach/2</seealso>.</p>
</desc></func>
<func>
<name>send(Port, Pid, SigNo, SigData) -&gt; ok</name>
<fsummary>Send an OSE message.</fsummary>
<type>
<v>Port = mailbox()</v><v>Pid = mailbox_id()</v><v>SigNo = message_number()</v><v>SigData = iodata()</v></type>
<desc><marker id="send-4"/>

<p>Send an OSE message.</p>
 
  <p>The message is sent from the OSE process' own ID that is: <c>get_id(Port)</c>.</p>
 
  <p>raises: <c>badarg</c>
 </p>
<p><em>See also:</em> <seealso marker="#send-5">send/5</seealso>.</p>
</desc></func>
<func>
<name>send(Port, Pid, SenderPid, SigNo, SigData) -&gt; ok</name>
<fsummary>Send an OSE message with different sender.</fsummary>
<type>
<v>Port = mailbox()</v><v>Pid = mailbox_id()</v><v>SenderPid = mailbox_id()</v><v>SigNo = message_number()</v><v>SigData = iodata()</v></type>
<desc><marker id="send-5"/>

<p>Send an OSE message with different sender.</p>
 
  <p>As <seealso marker="#send-4">send/4</seealso> but the sender will be <c>SenderPid</c>.</p>
 
  <p>raises: <c>badarg</c>
 </p>
<p><em>See also:</em> <seealso marker="#send-4">send/4</seealso>.</p>
</desc></func>
<func>
<name>listen(Port, SigNos) -&gt; ok</name>
<fsummary>Start listening for specified OSE signal numbers.</fsummary>
<type>
<v>Port = mailbox()</v><v>SigNos = [message_number()]</v></type>
<desc><marker id="listen-2"/>

<p>Start listening for specified OSE signal numbers.</p>
 
  <p>The mailbox will send <c>{message,Port,{FromMboxId,ToMboxId,MsgNo,MsgData}}</c>
  to the process that created the mailbox when an OSE message with any
  of the specified <c>SigNos</c> arrives.</p>
 
  <p>Repeated calls to listen will replace the current set of signal numbers to  
listen to. i.e</p>
 
  <pre>     1&gt;ose:listen(MsgB,[1234,12345]).
   ok
   2&gt; ose:listen(MsgB,[1234,123456]).
   ok.</pre>
 
  <p>The above will first listen for signals with numbers 1234 and 12345, and then  
replace that with only listening to 1234 and 123456.</p>
 
  <p>With the current implementation it is not possible to listen to all signal  
numbers.</p>
 
  <p>raises: <c>badarg</c> | <c>enomem</c>
 </p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>