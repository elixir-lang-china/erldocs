<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dtls</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dtls.xml</file></header>
<module>dtls</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>ciphers() = [erl_cipher_suite() (see module ssl_cipher)] | string()</c></tag>
<item><marker id="type-ciphers"/> </item>
<tag><c>connect_option() = socket_connect_option() | ssl_option() | transport_option()</c></tag>
<item><marker id="type-connect_option"/> </item>
<tag><c>host() = ip_address() (see module inet) | hostname() (see module inet)</c></tag>
<item><marker id="type-host"/> </item>
<tag><c>listen_option() = socket_listen_option() | ssl_option() | transport_option()</c></tag>
<item><marker id="type-listen_option"/> </item>
<tag><c>path() = string()</c></tag>
<item><marker id="type-path"/> </item>
<tag><c>prf_random() = client_random | server_random</c></tag>
<item><marker id="type-prf_random"/> </item>
<tag><c>reason() = term()</c></tag>
<item><marker id="type-reason"/> </item>
<tag><c>socket_connect_option() = connect_option() (see module gen_tcp)</c></tag>
<item><marker id="type-socket_connect_option"/> </item>
<tag><c>socket_listen_option() = listen_option() (see module gen_tcp)</c></tag>
<item><marker id="type-socket_listen_option"/> </item>
<tag><c>ssl_imp() = new | old</c></tag>
<item><marker id="type-ssl_imp"/> </item>
<tag><c>ssl_option() = {versions, ssl_atom_version() (see module ssl_record)} | {verify, verify_type()} | {verify_fun, {function(), InitialUserState::term()}} | {fail_if_no_peer_cert, boolean()} | {depth, integer()} | {cert, Der::binary()} | {certfile, path()} | {key, Der::binary()} | {keyfile, path()} | {password, string()} | {cacerts, [Der::binary()]} | {cacertfile, path()} | {dh, Der::binary()} | {dhfile, path()} | {user_lookup_fun, {function(), InitialUserState::term()}} | {psk_identity, string()} | {srp_identity, {string(), string()}} | {ciphers, ciphers()} | {ssl_imp, ssl_imp()} | {reuse_sessions, boolean()} | {reuse_session, function()} | {hibernate_after, integer() | undefined} | {next_protocols_advertised, [binary()]} | {client_preferred_next_protocols, binary(), client | server, [binary()]}</c></tag>
<item><marker id="type-ssl_option"/> </item>
<tag><c>sslsocket() = #sslsocket{}</c></tag>
<item><marker id="type-sslsocket"/> </item>
<tag><c>transport_option() = {cb_info, {CallbackModule::atom(), DataTag::atom(), ClosedTag::atom(), ErrTag::atom()}}</c></tag>
<item><marker id="type-transport_option"/> </item>
<tag><c>verify_type() = verify_none | verify_peer</c></tag>
<item><marker id="type-verify_type"/> </item>
</taglist></section>
<funcs>
<func>
<name>connect(Socket::host() | port(), Options::[connect_option()]) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="connect-2"/>
 </desc></func>
<func>
<name>connect(Socket::host() | port(), SslOptions::[connect_option()] | port_number() (see module inet), Timeout::timeout() | list()) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="connect-3"/>
 </desc></func>
<func>
<name>listen(Port::port_number() (see module inet), Options::[listen_option()]) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="listen-2"/>
 </desc></func>
<func>
<name>accept(Sslsocket::#sslsocket{}) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="accept-1"/>
 </desc></func>
<func>
<name>accept(Sslsocket::#sslsocket{}, Timeout::timeout()) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="accept-2"/>
 </desc></func>
<func>
<name>handshake(Sslsocket::#sslsocket{}) -&gt; ok | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="handshake-1"/>
 </desc></func>
<func>
<name>handshake(Sslsocket::#sslsocket{} | port(), Timeout::timeout() | [ssl_option() | transport_option()]) -&gt; ok | {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="handshake-2"/>
 </desc></func>
<func>
<name>handshake(Socket::port(), SslOptions::[ssl_option() | transport_option()], Timeout::timeout()) -&gt; {ok, #sslsocket{}} | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="handshake-3"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>