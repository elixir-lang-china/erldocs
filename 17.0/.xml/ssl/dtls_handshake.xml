<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dtls_handshake</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dtls_handshake.xml</file></header>
<module>dtls_handshake</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>der_cert() = binary()</c></tag>
<item><marker id="type-der_cert"/> </item>
<tag><c>dtls_handshake() = #client_hello{} | #hello_verify_request{} | ssl_handshake() (see module ssl_handshake)</c></tag>
<item><marker id="type-dtls_handshake"/> </item>
<tag><c>host() = ip_address() (see module inet) | hostname() (see module inet)</c></tag>
<item><marker id="type-host"/> </item>
</taglist></section>
<funcs>
<func>
<name>client_hello(Host::host(), Port::port_number() (see module inet), Connection_states::#connection_states{}, Ssl_options::#ssl_options{protocol=undefined | tls | dtls, versions=undefined | [ssl_version() (see module ssl_record)], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded() (see module public_key), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded() (see module public_key)}, password=undefined | string(), cacerts=undefined | [der_encoded() (see module public_key)], cacertfile=undefined | binary(), dh=undefined | der_encoded() (see module public_key), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}, Cache::integer(), CacheCb::atom(), Renegotiation::boolean(), OwnCert::der_cert()) -&gt; #client_hello{}</name>
<fsummary> </fsummary>

<desc><marker id="client_hello-8"/>
 </desc></func>
<func>
<name>client_hello(Host::host(), Port::port_number() (see module inet), Cookie::term(), Connection_states::#connection_states{}, Ssl_options::#ssl_options{protocol=undefined | tls | dtls, versions=undefined | [ssl_version() (see module ssl_record)], verify=undefined | verify_none | verify_peer, verify_fun=any(), fail_if_no_peer_cert=undefined | boolean(), verify_client_once=undefined | boolean(), validate_extensions_fun=any(), depth=undefined | integer(), certfile=undefined | binary(), cert=undefined | der_encoded() (see module public_key), keyfile=undefined | binary(), key=undefined | {'RSAPrivateKey' | 'DSAPrivateKey' | 'ECPrivateKey' | 'PrivateKeyInfo', der_encoded() (see module public_key)}, password=undefined | string(), cacerts=undefined | [der_encoded() (see module public_key)], cacertfile=undefined | binary(), dh=undefined | der_encoded() (see module public_key), dhfile=undefined | binary(), user_lookup_fun=any(), psk_identity=undefined | binary(), srp_identity=any(), ciphers=any(), reuse_session=any(), reuse_sessions=undefined | boolean(), renegotiate_at=any(), secure_renegotiate=any(), hibernate_after=undefined | boolean(), erl_dist=boolean(), next_protocols_advertised=any(), next_protocol_selector=any(), log_alert=undefined | boolean(), server_name_indication=any(), honor_cipher_order=any()}, Cache::integer(), CacheCb::atom(), Renegotiation::boolean(), OwnCert::der_cert()) -&gt; #client_hello{}</name>
<fsummary> </fsummary>

<desc><marker id="client_hello-9"/>
 </desc></func>
<func>
<name>hello(Server_hello, Ssl_options, ConnectionStates0, Renegotiation) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="hello-4"/>
 </desc></func>
<func>
<name>encode_handshake(Handshake, Version, MsgSeq) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="encode_handshake-3"/>
 </desc></func>
<func>
<name>get_dtls_handshake(Ssl_tls::#ssl_tls{}, HsState::#dtls_hs_state{} | binary()) -&gt; {[dtls_handshake()], #dtls_hs_state{}} | {retransmit, #dtls_hs_state{}}</name>
<fsummary> </fsummary>

<desc><marker id="get_dtls_handshake-2"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>