<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>tls_connection</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>tls_connection.xml</file></header>
<module>tls_connection</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>ciphers() = [erl_cipher_suite() (see module ssl_cipher)] | string()</c></tag>
<item><marker id="type-ciphers"/> </item>
<tag><c>connect_option() = socket_connect_option() | ssl_option() | transport_option()</c></tag>
<item><marker id="type-connect_option"/> </item>
<tag><c>host() = ip_address() (see module inet) | hostname() (see module inet)</c></tag>
<item><marker id="type-host"/> </item>
<tag><c>listen_option() = socket_listen_option() | ssl_option() | transport_option()</c></tag>
<item><marker id="type-listen_option"/> </item>
<tag><c>path() = string()</c></tag>
<item><marker id="type-path"/> </item>
<tag><c>prf_random() = client_random | server_random</c></tag>
<item><marker id="type-prf_random"/> </item>
<tag><c>reason() = term()</c></tag>
<item><marker id="type-reason"/> </item>
<tag><c>socket_connect_option() = connect_option() (see module gen_tcp)</c></tag>
<item><marker id="type-socket_connect_option"/> </item>
<tag><c>socket_listen_option() = listen_option() (see module gen_tcp)</c></tag>
<item><marker id="type-socket_listen_option"/> </item>
<tag><c>ssl_imp() = new | old</c></tag>
<item><marker id="type-ssl_imp"/> </item>
<tag><c>ssl_option() = {versions, ssl_atom_version() (see module ssl_record)} | {verify, verify_type()} | {verify_fun, {function(), InitialUserState::term()}} | {fail_if_no_peer_cert, boolean()} | {depth, integer()} | {cert, Der::binary()} | {certfile, path()} | {key, Der::binary()} | {keyfile, path()} | {password, string()} | {cacerts, [Der::binary()]} | {cacertfile, path()} | {dh, Der::binary()} | {dhfile, path()} | {user_lookup_fun, {function(), InitialUserState::term()}} | {psk_identity, string()} | {srp_identity, {string(), string()}} | {ciphers, ciphers()} | {ssl_imp, ssl_imp()} | {reuse_sessions, boolean()} | {reuse_session, function()} | {hibernate_after, integer() | undefined} | {next_protocols_advertised, [binary()]} | {client_preferred_next_protocols, binary(), client | server, [binary()]}</c></tag>
<item><marker id="type-ssl_option"/> </item>
<tag><c>sslsocket() = #sslsocket{}</c></tag>
<item><marker id="type-sslsocket"/> </item>
<tag><c>transport_option() = {cb_info, {CallbackModule::atom(), DataTag::atom(), ClosedTag::atom(), ErrTag::atom()}}</c></tag>
<item><marker id="type-transport_option"/> </item>
<tag><c>verify_type() = verify_none | verify_peer</c></tag>
<item><marker id="type-verify_type"/> </item>
</taglist></section>
<funcs>
<func>
<name>start_fsm(Role, Host, Port, Socket, Opts, User, CbInfo, Timeout) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="start_fsm-8"/>
 </desc></func>
<func>
<name>send_handshake(Handshake, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="send_handshake-2"/>
 </desc></func>
<func>
<name>send_alert(Alert, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="send_alert-2"/>
 </desc></func>
<func>
<name>send_change_cipher(Msg, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="send_change_cipher-2"/>
 </desc></func>
<func>
<name>start_link(Role::atom(), Host::host(), Port::port_number() (see module inet), Socket::port(), Options::list(), User::pid(), CbInfo::tuple()) -&gt; {ok, pid()} | ignore | {error, reason()}</name>
<fsummary> </fsummary>

<desc><marker id="start_link-7"/>
 </desc></func>
<func>
<name>init(X1) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="init-1"/>
 </desc></func>
<func>
<name>hello(Hello, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="hello-2"/>
 </desc></func>
<func>
<name>abbreviated(Msg, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="abbreviated-2"/>
 </desc></func>
<func>
<name>certify(Msg, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="certify-2"/>
 </desc></func>
<func>
<name>cipher(Msg, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="cipher-2"/>
 </desc></func>
<func>
<name>connection(Hello_request, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="connection-2"/>
 </desc></func>
<func>
<name>handle_event(Event, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_event-3"/>
 </desc></func>
<func>
<name>handle_sync_event(Event, From, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_sync_event-4"/>
 </desc></func>
<func>
<name>handle_info(Msg, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_info-3"/>
 </desc></func>
<func>
<name>terminate(Reason, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="terminate-3"/>
 </desc></func>
<func>
<name>code_change(OldVsn, StateName, State, Extra) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="code_change-4"/>
 </desc></func>
<func>
<name>next_state(Current, Next, Alert, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="next_state-4"/>
 </desc></func>
<func>
<name>next_record(State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="next_record-1"/>
 </desc></func>
<func>
<name>next_record_if_active(State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="next_record_if_active-1"/>
 </desc></func>
<func>
<name>next_state_connection(StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="next_state_connection-2"/>
 </desc></func>
<func>
<name>passive_receive(State0, StateName) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="passive_receive-2"/>
 </desc></func>
<func>
<name>read_application_data(Data, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="read_application_data-2"/>
 </desc></func>
<func>
<name>write_application_data(Data0, From, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="write_application_data-3"/>
 </desc></func>
<func>
<name>renegotiate(State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="renegotiate-1"/>
 </desc></func>
<func>
<name>alert_user(Transport, Socket, X3, Opts, Pid, From, Alert, Role) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="alert_user-8"/>
 </desc></func>
<func>
<name>alert_user(Transport, Socket, From, Alert, Role) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="alert_user-5"/>
 </desc></func>
<func>
<name>handle_own_alert(Alert, Version, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_own_alert-4"/>
 </desc></func>
<func>
<name>handle_normal_shutdown(Alert, StateName, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_normal_shutdown-3"/>
 </desc></func>
<func>
<name>handle_unexpected_message(Msg, Info, State) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_unexpected_message-3"/>
 </desc></func>
<func>
<name>handle_close_alert(Data, StateName, State0) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_close_alert-3"/>
 </desc></func>
<func>
<name>workaround_transport_delivery_problems(Socket, Transport) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="workaround_transport_delivery_problems-2"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>