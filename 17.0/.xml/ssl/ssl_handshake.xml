<?xml version="1.0" encoding="utf8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ssl_handshake</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ssl_handshake.xml</file></header>
<module>ssl_handshake</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>certdb_ref() = reference()</c></tag>
<item><marker id="type-certdb_ref"/> </item>
<tag><c>db_handle() = term()</c></tag>
<item><marker id="type-db_handle"/> </item>
<tag><c>der_cert() = binary()</c></tag>
<item><marker id="type-der_cert"/> </item>
<tag><c>oid() = tuple()</c></tag>
<item><marker id="type-oid"/> </item>
<tag><c>public_key_info() = {oid(), #'RSAPublicKey'{} | integer() | #'ECPoint'{}, public_key_params()}</c></tag>
<item><marker id="type-public_key_info"/> </item>
<tag><c>public_key_params() = #'Dss-Parms'{} | {namedCurve, oid()} | #'ECParameters'{} | term()</c></tag>
<item><marker id="type-public_key_params"/> </item>
<tag><c>ssl_handshake() = #server_hello{} | #server_hello_done{} | #certificate{} | #certificate_request{} | #client_key_exchange{} | #finished{} | #certificate_verify{} | #hello_request{} | #next_protocol{}</c></tag>
<item><marker id="type-ssl_handshake"/> </item>
<tag><c>ssl_handshake_history() = {[binary()], [binary()]}</c></tag>
<item><marker id="type-ssl_handshake_history"/> </item>
</taglist></section>
<funcs>
<func>
<name>hello_request() -&gt; #hello_request{}</name>
<fsummary> </fsummary>

<desc><marker id="hello_request-0"/>
 </desc></func>
<func>
<name>server_hello(Session::#session{}, Version::ssl_version() (see module ssl_record), Connection_states::#connection_states{}, Hello_extensions::#hello_extensions{}) -&gt; #server_hello{}</name>
<fsummary> </fsummary>

<desc><marker id="server_hello-4"/>
 </desc></func>
<func>
<name>server_hello_done() -&gt; #server_hello_done{}</name>
<fsummary> </fsummary>

<desc><marker id="server_hello_done-0"/>
 </desc></func>
<func>
<name>client_hello_extensions(Host, Version, CipherSuites, SslOpts, ConnectionStates, Renegotiation) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="client_hello_extensions-6"/>
 </desc></func>
<func>
<name>certificate(OwnCert::der_cert(), CertDbHandle::db_handle(), CertDbRef::certdb_ref(), X4::client | server) -&gt; #certificate{} | #alert{}</name>
<fsummary> </fsummary>

<desc><marker id="certificate-4"/>
 </desc></func>
<func>
<name>next_protocol(SelectedProtocol::binary()) -&gt; #next_protocol{}</name>
<fsummary> </fsummary>

<desc><marker id="next_protocol-1"/>
 </desc></func>
<func>
<name>client_certificate_verify(OwnCert::undefined | der_cert(), MasterSecret::binary(), Version::ssl_version() (see module ssl_record), X4::term(), PrivateKey::private_key() (see module public_key), X6::ssl_handshake_history()) -&gt; #certificate_verify{} | ignore | #alert{}</name>
<fsummary> </fsummary>

<desc><marker id="client_certificate_verify-6"/>
 </desc></func>
<func>
<name>certificate_request(CipherSuite::erl_cipher_suite() (see module ssl_cipher), CertDbHandle::db_handle(), CertDbRef::certdb_ref(), Version::ssl_version() (see module ssl_record)) -&gt; #certificate_request{}</name>
<fsummary> </fsummary>

<desc><marker id="certificate_request-4"/>
 </desc></func>
<func>
<name>key_exchange(X1::client | server, Version::ssl_version() (see module ssl_record), X3::{premaster_secret, binary(), public_key_info()} | {dh, binary()} | {dh, {binary(), binary()}, #'DHParameter'{}, {HashAlgo::atom(), SignAlgo::atom()}, binary(), binary(), private_key() (see module public_key)} | {ecdh, #'ECPrivateKey'{}} | {psk, binary()} | {dhe_psk, binary(), binary()} | {srp, {binary(), binary()}, #srp_user{generator=undefined | binary(), prime=undefined | binary(), salt=undefined | binary(), verifier=undefined | binary()}, {HashAlgo::atom(), SignAlgo::atom()}, binary(), binary(), private_key() (see module public_key)}) -&gt; #client_key_exchange{} | #server_key_exchange{}</name>
<fsummary> </fsummary>

<desc><marker id="key_exchange-3"/>
 </desc></func>
<func>
<name>finished(Version::ssl_version() (see module ssl_record), Role::client | server, PrfAlgo::integer(), MasterSecret::binary(), X5::ssl_handshake_history()) -&gt; #finished{}</name>
<fsummary> </fsummary>

<desc><marker id="finished-5"/>
 </desc></func>
<func>
<name>verify_server_key(Server_key_params, HashSign, ConnectionStates, Version, PubKeyInfo) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="verify_server_key-5"/>
 </desc></func>
<func>
<name>certificate_verify(Signature::binary(), PublicKeyInfo::public_key_info(), Version::ssl_version() (see module ssl_record), HashSign::term(), MasterSecret::binary(), X6::ssl_handshake_history()) -&gt; valid | #alert{}</name>
<fsummary> </fsummary>

<desc><marker id="certificate_verify-6"/>
 </desc></func>
<func>
<name>verify_signature(Version::ssl_version() (see module ssl_record), Hash::binary(), HashAlgo::{term(), term()}, Signature::binary(), X5::public_key_info()) -&gt; true | false</name>
<fsummary> </fsummary>

<desc><marker id="verify_signature-5"/>
 </desc></func>
<func>
<name>certify(Certificate::#certificate{}, CertDbHandle::db_handle(), CertDbRef::certdb_ref(), MaxPathLen::integer() | nolimit, Verify::verify_peer | verify_none, VerifyFunAndState::{function(), term}, Role::client | server) -&gt; {der_cert(), public_key_info()} | #alert{}</name>
<fsummary> </fsummary>

<desc><marker id="certify-7"/>
 </desc></func>
<func>
<name>verify_connection(Version::ssl_version() (see module ssl_record), Finished::#finished{}, Role::client | server, PrfAlgo::integer(), MasterSecret::binary(), X6::ssl_handshake_history()) -&gt; verified | #alert{}</name>
<fsummary> </fsummary>

<desc><marker id="verify_connection-6"/>
 </desc></func>
<func>
<name>init_handshake_history() -&gt; ssl_handshake_history()</name>
<fsummary> </fsummary>

<desc><marker id="init_handshake_history-0"/>
 </desc></func>
<func>
<name>update_handshake_history(Handshake::ssl_handshake_history() (see module ssl_handshake), Data::term()) -&gt; ssl_handshake_history() (see module ssl_handshake)</name>
<fsummary> </fsummary>

<desc><marker id="update_handshake_history-2"/>
 </desc></func>
<func>
<name>premaster_secret(OtherPublicDhKey, MyPrivateKey, DHParameter) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="premaster_secret-3"/>
 </desc></func>
<func>
<name>premaster_secret(Client_dhe_psk_identity, PrivateKey, DHParameter, PSKLookup) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="premaster_secret-4"/>
 </desc></func>
<func>
<name>premaster_secret(Client_psk_identity, PSKLookup) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="premaster_secret-2"/>
 </desc></func>
<func>
<name>server_key_exchange_hash(Hash::md5sha | md5 | sha | sha224 | sha256 | sha384 | sha512, Value::binary()) -&gt; binary()</name>
<fsummary> </fsummary>

<desc><marker id="server_key_exchange_hash-2"/>
 </desc></func>
<func>
<name>prf(X1::ssl_version() (see module ssl_record), Secret::binary(), Label::binary(), Seed::[binary()], WantedLength::non_neg_integer()) -&gt; {ok, binary()} | {error, undefined}</name>
<fsummary> </fsummary>

<desc><marker id="prf-5"/>
 </desc></func>
<func>
<name>select_hashsign(Hash_sign_algos::#hash_sign_algos{} | undefined, Cert::undefined | binary()) -&gt; [{atom(), atom()}] | undefined</name>
<fsummary> </fsummary>

<desc><marker id="select_hashsign-2"/>
 </desc></func>
<func>
<name>select_cert_hashsign(HashSign::#hash_sign_algos{} | undefined, X2::oid(), X3::ssl_version() (see module ssl_record) | {undefined, undefined}) -&gt; {atom(), atom()}</name>
<fsummary> </fsummary>

<desc><marker id="select_cert_hashsign-3"/>
 </desc></func>
<func>
<name>master_secret(RecordCB::atom(), Version::ssl_version() (see module ssl_record), Session::#session{} | binary(), Connection_states::#connection_states{}, Role::client | server) -&gt; {binary(), #connection_states{}} | #alert{}</name>
<fsummary> </fsummary>

<desc><marker id="master_secret-5"/>
 </desc></func>
<func>
<name>encode_handshake(Next_protocol, Version) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="encode_handshake-2"/>
 </desc></func>
<func>
<name>encode_hello_extensions(Hello_extensions) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="encode_hello_extensions-1"/>
 </desc></func>
<func>
<name>decode_client_key(ClientKey::binary(), Type::key_algo() (see module ssl_cipher), Version::ssl_version() (see module ssl_record)) -&gt; #encrypted_premaster_secret{} | #client_diffie_hellman_public{} | #client_ec_diffie_hellman_public{} | #client_psk_identity{} | #client_dhe_psk_identity{} | #client_rsa_psk_identity{} | #client_srp_public{}</name>
<fsummary> </fsummary>

<desc><marker id="decode_client_key-3"/>
 </desc></func>
<func>
<name>decode_server_key(ServerKey::binary(), Type::key_algo() (see module ssl_cipher), Version::ssl_version() (see module ssl_record)) -&gt; #server_key_params{}</name>
<fsummary> </fsummary>

<desc><marker id="decode_server_key-3"/>
 </desc></func>
<func>
<name>encode_client_protocol_negotiation(X1, X2) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="encode_client_protocol_negotiation-2"/>
 </desc></func>
<func>
<name>encode_protocols_advertised_on_server(Protocols) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="encode_protocols_advertised_on_server-1"/>
 </desc></func>
<func>
<name>decode_handshake(Version, X2, Keys) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="decode_handshake-3"/>
 </desc></func>
<func>
<name>decode_hello_extensions(Extensions::{client, binary()} | binary()) -&gt; #hello_extensions{}</name>
<fsummary> </fsummary>

<desc><marker id="decode_hello_extensions-1"/>
 </desc></func>
<func>
<name>decode_suites(X1::'2_bytes' | '3_bytes', Dec::binary()) -&gt; list()</name>
<fsummary> </fsummary>

<desc><marker id="decode_suites-2"/>
 </desc></func>
<func>
<name>available_suites(UserSuites, Version) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="available_suites-2"/>
 </desc></func>
<func>
<name>cipher_suites(Suites, X2) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="cipher_suites-2"/>
 </desc></func>
<func>
<name>select_session(SuggestedSessionId, CipherSuites, Compressions, Port, Session, Version, Ssl_options, Cache, CacheCb, Cert) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="select_session-10"/>
 </desc></func>
<func>
<name>supported_ecc(Version) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="supported_ecc-1"/>
 </desc></func>
<func>
<name>handle_client_hello_extensions(RecordCB, Random, ClientCipherSuites, Hello_extensions, Version, Ssl_options, Session, ConnectionStates0, Renegotiation) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_client_hello_extensions-9"/>
 </desc></func>
<func>
<name>handle_server_hello_extensions(RecordCB, Random, CipherSuite, Compression, Hello_extensions, Version, Ssl_options, ConnectionStates0, Renegotiation) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="handle_server_hello_extensions-9"/>
 </desc></func>
<func>
<name>select_version(RecordCB, ClientVersion, Versions) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="select_version-3"/>
 </desc></func>
<func>
<name>select_curve(Elliptic_curves, Rest) -&gt; term()
</name>
<fsummary> </fsummary>

<desc><marker id="select_curve-2"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>