<module name="ssl_socket">
<type>
  <name>ciphers</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ciphers">ciphers()</marker> = [<seealso marker="ssl_cipher#type-erl_cipher_suite">ssl_cipher:erl_cipher_suite()</seealso>] | string()</typehead></typedecl>
</type>
<type>
  <name>connect_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-connect_option">connect_option()</marker> = <seealso marker="#type-socket_connect_option">socket_connect_option()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-ssl_option">ssl_option()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-transport_option">transport_option()</seealso></typehead></typedecl>
</type>
<type>
  <name>listen_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-listen_option">listen_option()</marker> = <seealso marker="#type-socket_listen_option">socket_listen_option()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-ssl_option">ssl_option()</seealso><br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="#type-transport_option">transport_option()</seealso></typehead></typedecl>
</type>
<type>
  <name>path</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-path">path()</marker> = string()</typehead></typedecl>
</type>
<type>
  <name>prf_random</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-prf_random">prf_random()</marker> = client_random | server_random</typehead></typedecl>
</type>
<type>
  <name>socket_connect_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_connect_option">socket_connect_option()</marker> = <seealso marker="gen_tcp#type-connect_option">gen_tcp:connect_option()</seealso></typehead></typedecl>
</type>
<type>
  <name>socket_listen_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_listen_option">socket_listen_option()</marker> = <seealso marker="gen_tcp#type-listen_option">gen_tcp:listen_option()</seealso></typehead></typedecl>
</type>
<type>
  <name>ssl_imp</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ssl_imp">ssl_imp()</marker> = new | old</typehead></typedecl>
</type>
<type>
  <name>ssl_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ssl_option">ssl_option()</marker> = {versions, <seealso marker="ssl_record#type-ssl_atom_version">ssl_record:ssl_atom_version()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {verify, <seealso marker="#type-verify_type">verify_type()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {verify_fun,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{function(), InitialUserState :: term()}}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {fail_if_no_peer_cert, boolean()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {depth, integer()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {cert, Der :: binary()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {certfile, <seealso marker="#type-path">path()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {key, Der :: binary()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {keyfile, <seealso marker="#type-path">path()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {password, string()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {cacerts, [Der :: binary()]}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {cacertfile, <seealso marker="#type-path">path()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {dh, Der :: binary()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {dhfile, <seealso marker="#type-path">path()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {user_lookup_fun,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{function(), InitialUserState :: term()}}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {psk_identity, string()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {srp_identity, {string(), string()}}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {ciphers, <seealso marker="#type-ciphers">ciphers()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {ssl_imp, <seealso marker="#type-ssl_imp">ssl_imp()</seealso>}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {reuse_sessions, boolean()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {reuse_session, function()}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {hibernate_after, integer() | undefined}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {next_protocols_advertised, [binary()]}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| {client_preferred_next_protocols,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>binary(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>client | server,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[binary()]}</typehead></typedecl>
  <anno>Der</anno>
  <anno>InitialUserState</anno>
</type>
<type>
  <name>sslsocket</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sslsocket">sslsocket()</marker> = #sslsocket{}</typehead></typedecl>
</type>
<type>
  <name>transport_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-transport_option">transport_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{cb_info,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{CallbackModule :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DataTag :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ClosedTag :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ErrTag :: atom()}}</typehead></typedecl>
  <anno>CallbackModule</anno>
  <anno>ClosedTag</anno>
  <anno>DataTag</anno>
  <anno>ErrTag</anno>
</type>
<type>
  <name>verify_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-verify_type">verify_type()</marker> = verify_none | verify_peer</typehead></typedecl>
</type>
<spec>
  <name>getopts</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>peername</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>port</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>setopts</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>socket</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>sockname</name>
  <arity>2</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, May 6 2014, 16:26:18.</timestamp>
</module>