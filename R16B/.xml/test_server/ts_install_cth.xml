<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ts_install_cth</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ts_install_cth.xml</file></header>
<module>ts_install_cth</module>
<modulesummary>TS Installed SCB.</modulesummary>
<description>
<p>TS Installed SCB</p>
  
   This module does what the make parts of the ts:run/x command did,
   but not the Makefile.first parts! So they have to be done by ts or
   manually!!</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>config() = proplist() (see module proplists)</c></tag>
<item><marker id="type-config"/> </item>
<tag><c>reason() = term()</c></tag>
<item><marker id="type-reason"/> </item>
<tag><c>skip_or_fail() = {skip, reason()} | {auto_skip, reason()} | {fail, reason()}</c></tag>
<item><marker id="type-skip_or_fail"/> </item>
</taglist></section>
<funcs>
<func>
<name>id(Opts::term()) -&gt; Id::term()</name>
<fsummary>The id of this SCB.</fsummary>

<desc><marker id="id-1"/>

<p>The id of this SCB</p>
</desc></func>
<func>
<name>init(Id::term(), Opts::proplist() (see module proplists)) -&gt; {ok, State::#state{}}</name>
<fsummary>Always called before any other callback function.</fsummary>

<desc><marker id="init-2"/>

<p>Always called before any other callback function.</p>
</desc></func>
<func>
<name>pre_init_per_suite(Suite::atom(), Config::config(), State::#state{}) -&gt; {config() | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called before init_per_suite is called.</fsummary>

<desc><marker id="pre_init_per_suite-3"/>

<p>Called before init_per_suite is called.</p>
</desc></func>
<func>
<name>post_init_per_suite(Suite::atom(), Config::config(), Return::config() | skip_or_fail(), State::#state{}) -&gt; {config() | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called after init_per_suite.</fsummary>

<desc><marker id="post_init_per_suite-4"/>

<p>Called after init_per_suite.</p>
</desc></func>
<func>
<name>pre_end_per_suite(Suite::atom(), Config::config() | skip_or_fail(), State::#state{}) -&gt; {ok | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called before end_per_suite.</fsummary>

<desc><marker id="pre_end_per_suite-3"/>

<p>Called before end_per_suite.</p>
</desc></func>
<func>
<name>post_end_per_suite(Suite::atom(), Config::config(), Return::term(), State::#state{}) -&gt; {ok | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called after end_per_suite.</fsummary>

<desc><marker id="post_end_per_suite-4"/>

<p>Called after end_per_suite.</p>
</desc></func>
<func>
<name>pre_init_per_group(Group::atom(), Config::config(), State::#state{}) -&gt; {config() | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called before each init_per_group.</fsummary>

<desc><marker id="pre_init_per_group-3"/>

<p>Called before each init_per_group.</p>
</desc></func>
<func>
<name>post_init_per_group(Group::atom(), Config::config(), Return::config() | skip_or_fail(), State::#state{}) -&gt; {config() | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called after each init_per_group.</fsummary>

<desc><marker id="post_init_per_group-4"/>

<p>Called after each init_per_group.</p>
</desc></func>
<func>
<name>pre_end_per_group(Group::atom(), Config::config() | skip_or_fail(), State::#state{}) -&gt; {ok | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called after each end_per_group.</fsummary>

<desc><marker id="pre_end_per_group-3"/>

<p>Called after each end_per_group.</p>
</desc></func>
<func>
<name>post_end_per_group(Group::atom(), Config::config(), Return::term(), State::#state{}) -&gt; {ok | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called after each end_per_group.</fsummary>

<desc><marker id="post_end_per_group-4"/>

<p>Called after each end_per_group.</p>
</desc></func>
<func>
<name>pre_init_per_testcase(TC::atom(), Config::config(), State::#state{}) -&gt; {config() | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called before each test case.</fsummary>

<desc><marker id="pre_init_per_testcase-3"/>

<p>Called before each test case.</p>
</desc></func>
<func>
<name>post_end_per_testcase(TC::atom(), Config::config(), Return::term(), State::#state{}) -&gt; {ok | skip_or_fail(), NewState::#state{}}</name>
<fsummary>Called after each test case.</fsummary>

<desc><marker id="post_end_per_testcase-4"/>

<p>Called after each test case.</p>
</desc></func>
<func>
<name>on_tc_fail(TC::init_per_suite | end_per_suite | init_per_group | end_per_group | atom(), Reason::term(), State::#state{}) -&gt; NewState::#state{}</name>
<fsummary>Called after a test case failed.</fsummary>

<desc><marker id="on_tc_fail-3"/>

<p>Called after a test case failed.</p>
</desc></func>
<func>
<name>on_tc_skip(TC::end_per_suite | init_per_group | end_per_group | atom(), Reason::{tc_auto_skip, {failed, {Mod::atom(), Function::atom(), Reason::term()}}} | {tc_user_skip, {skipped, Reason::term()}}, State::#state{}) -&gt; NewState::#state{}</name>
<fsummary>Called when a test case is skipped.</fsummary>

<desc><marker id="on_tc_skip-3"/>

<p>Called when a test case is skipped.</p>
</desc></func>
<func>
<name>terminate(State::#state{}) -&gt; term()</name>
<fsummary>Called when the scope of the SCB is done.</fsummary>

<desc><marker id="terminate-1"/>

<p>Called when the scope of the SCB is done.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>