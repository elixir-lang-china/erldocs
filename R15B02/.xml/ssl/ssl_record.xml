<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>ssl_record</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>ssl_record.xml</file></header>
<module>ssl_record</module>
<modulesummary/>
<description>
</description>
<funcs>
<func>
<name>init_connection_states(Role::client | server) -&gt; #connection_states{}</name>
<fsummary> </fsummary>

<desc><marker id="init_connection_states-1"/>
 </desc></func>
<func>
<name>current_connection_state(Connection_states::#connection_states{}, X2::read | write) -&gt; #connection_state{}</name>
<fsummary> </fsummary>

<desc><marker id="current_connection_state-2"/>
 </desc></func>
<func>
<name>pending_connection_state(Connection_states::#connection_states{}, X2::read | write) -&gt; #connection_state{}</name>
<fsummary> </fsummary>

<desc><marker id="pending_connection_state-2"/>
 </desc></func>
<func>
<name>update_security_params(Security_parameters::#security_parameters{}, Security_parameters::#security_parameters{}, Connection_states::#connection_states{}) -&gt; #connection_states{}</name>
<fsummary> </fsummary>

<desc><marker id="update_security_params-3"/>
 </desc></func>
<func>
<name>set_mac_secret(ClientWriteMacSecret::binary(), ServerWriteMacSecret::binary(), X3::client | server, Connection_states::#connection_states{}) -&gt; #connection_states{}</name>
<fsummary> </fsummary>

<desc><marker id="set_mac_secret-4"/>
 </desc></func>
<func>
<name>set_master_secret(MasterSecret::binary(), Connection_states::#connection_states{}) -&gt; #connection_states{}</name>
<fsummary> </fsummary>

<desc><marker id="set_master_secret-2"/>
 </desc></func>
<func>
<name>set_renegotiation_flag(Flag::boolean(), Connection_states::#connection_states{}) -&gt; #connection_states{}</name>
<fsummary> </fsummary>

<desc><marker id="set_renegotiation_flag-2"/>
 </desc></func>
<func>
<name>set_client_verify_data(X1::current_read | current_write | current_both, Data::binary(), Connection_states::#connection_states{}) -&gt; #connection_states{}</name>
<fsummary> </fsummary>

<desc><marker id="set_client_verify_data-3"/>
 </desc></func>
<func>
<name>set_server_verify_data(X1::current_read | current_write | current_both, Data::binary(), Connection_states::#connection_states{}) -&gt; #connection_states{}</name>
<fsummary> </fsummary>

<desc><marker id="set_server_verify_data-3"/>
 </desc></func>
<func>
<name>activate_pending_connection_state(Connection_states::#connection_states{}, X2::read | write) -&gt; #connection_states{}</name>
<fsummary> </fsummary>

<desc><marker id="activate_pending_connection_state-2"/>
 </desc></func>
<func>
<name>set_pending_cipher_state(Connection_states::#connection_states{}, Cipher_state::#cipher_state{}, Cipher_state::#cipher_state{}, X4::client | server) -&gt; #connection_states{}</name>
<fsummary> </fsummary>

<desc><marker id="set_pending_cipher_state-4"/>
 </desc></func>
<func>
<name>get_tls_records(Data::binary(), Buffer::binary()) -&gt; {[binary()], binary()} | #alert{}</name>
<fsummary> </fsummary>

<desc><marker id="get_tls_records-2"/>
 </desc></func>
<func>
<name>protocol_version(X1::tls_atom_version() | tls_version()) -&gt; tls_version() | tls_atom_version()</name>
<fsummary> </fsummary>

<desc><marker id="protocol_version-1"/>
 </desc></func>
<func>
<name>lowest_protocol_version(Version::tls_version(), X2::tls_version()) -&gt; tls_version()</name>
<fsummary> </fsummary>

<desc><marker id="lowest_protocol_version-2"/>
 </desc></func>
<func>
<name>highest_protocol_version(Versions::[tls_version()]) -&gt; tls_version()</name>
<fsummary> </fsummary>

<desc><marker id="highest_protocol_version-1"/>
 </desc></func>
<func>
<name>supported_protocol_versions() -&gt; [tls_version()]</name>
<fsummary> </fsummary>

<desc><marker id="supported_protocol_versions-0"/>
 </desc></func>
<func>
<name>is_acceptable_version(X1::tls_version()) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="is_acceptable_version-1"/>
 </desc></func>
<func>
<name>compressions() -&gt; [binary()]</name>
<fsummary> </fsummary>

<desc><marker id="compressions-0"/>
 </desc></func>
<func>
<name>decode_cipher_text(Ssl_tls::#ssl_tls{}, Connection_states::#connection_states{}) -&gt; {#ssl_tls{}, #connection_states{}} | #alert{}</name>
<fsummary> </fsummary>

<desc><marker id="decode_cipher_text-2"/>
 </desc></func>
<func>
<name>encode_data(Frag::binary(), Version::tls_version(), Connection_states::#connection_states{}) -&gt; {iolist(), #connection_states{}}</name>
<fsummary> </fsummary>

<desc><marker id="encode_data-3"/>
 </desc></func>
<func>
<name>encode_handshake(Frag::iolist(), Version::tls_version(), Connection_states::#connection_states{}) -&gt; {iolist(), #connection_states{}}</name>
<fsummary> </fsummary>

<desc><marker id="encode_handshake-3"/>
 </desc></func>
<func>
<name>encode_alert_record(Alert::#alert{}, Version::tls_version(), Connection_states::#connection_states{}) -&gt; {iolist(), #connection_states{}}</name>
<fsummary> </fsummary>

<desc><marker id="encode_alert_record-3"/>
 </desc></func>
<func>
<name>encode_change_cipher_spec(Version::tls_version(), Connection_states::#connection_states{}) -&gt; {iolist(), #connection_states{}}</name>
<fsummary> </fsummary>

<desc><marker id="encode_change_cipher_spec-2"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>