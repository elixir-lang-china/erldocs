<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>xmerl_eventp</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>xmerl_eventp.xml</file></header>
<module>xmerl_eventp</module>
<modulesummary>Simple event-based front-ends to xmerl_scan for processing
  of XML documents in streams and for parsing in SAX style.</modulesummary>
<description>
<p>Simple event-based front-ends to xmerl_scan for processing
  of XML documents in streams and for parsing in SAX style.
  Each contain more elaborate settings of xmerl_scan that makes usage of
  the customization functions.
 </p></description>
<funcs>
<func>
<name>stream(Fname::string(), Options::option_list()) -&gt; xmlElement()</name>
<fsummary>Parse file containing an XML document as a stream, DOM style.</fsummary>

<desc><marker id="stream-2"/>

<p>Parse file containing an XML document as a stream, DOM style.
  Wrapper for a call to the XML parser <c>xmerl_scan</c> with a
  <c>continuation_fun</c> for handling streams of XML data.
  Note that the <c>continuation_fun</c>, <c>acc_fun</c>,
  <c>fetch_fun</c>, <c>rules</c> and <c>close_fun</c>
  options cannot be user defined using this parser.</p>
</desc></func>
<func>
<name>stream_sax(Fname, CallBack::CallBackModule, UserState, Options) -&gt; xmlElement()</name>
<fsummary>Parse file containing an XML document as a stream, SAX style.</fsummary>
<type>
<v>Fname = string()</v><v>CallBackModule = atom()</v><v>Options = option_list()</v></type>
<desc><marker id="stream_sax-4"/>

<p>Parse file containing an XML document as a stream, SAX style.
  Wrapper for a call to the XML parser <c>xmerl_scan</c> with a
  <c>continuation_fun</c> for handling streams of XML data.
  Note that the <c>continuation_fun</c>, <c>acc_fun</c>,
  <c>fetch_fun</c>, <c>rules</c>, <c>hook_fun</c>,
  <c>close_fun</c> and <c>user_state</c> options cannot be user
  defined using this parser.</p>
</desc></func>
<func>
<name>file_sax(Fname::string(), CallBackModule::atom(), UserState, Options::option_list()) -&gt; NewUserState</name>
<fsummary>Parse file containing an XML document, SAX style.</fsummary>

<desc><marker id="file_sax-4"/>

<p>Parse file containing an XML document, SAX style.
  Wrapper for a call to the XML parser <c>xmerl_scan</c> with a
  <c>hook_fun</c> for using xmerl export functionality directly after
  an entity is parsed.</p>
</desc></func>
<func>
<name>string_sax(String::list(), CallBackModule::atom(), UserState, Options::option_list()) -&gt; xmlElement()</name>
<fsummary>Parse file containing an XML document, SAX style.</fsummary>

<desc><marker id="string_sax-4"/>

<p>Parse file containing an XML document, SAX style.
  Wrapper for a call to the XML parser <c>xmerl_scan</c> with a
  <c>hook_fun</c> for using xmerl export functionality directly after
  an entity is parsed.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>