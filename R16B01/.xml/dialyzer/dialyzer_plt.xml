<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>dialyzer_plt</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>dialyzer_plt.xml</file></header>
<module>dialyzer_plt</module>
<modulesummary/>
<description>
</description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><c>arity_patt() = '_' | arity()</c></tag>
<item><marker id="type-arity_patt"/> </item>
<tag><c>check_error() = err_rsn() | {no_file_to_remove, filename() (see module file)}</c></tag>
<item><marker id="type-check_error"/> </item>
<tag><c>err_rsn() = not_valid | no_such_file | read_error</c></tag>
<item><marker id="type-err_rsn"/> </item>
<tag><c>file_md5() = {filename() (see module file), binary()}</c></tag>
<item><marker id="type-file_md5"/> </item>
<tag><c>md5_diff() = [{differ, atom()} | {removed, atom()}]</c></tag>
<item><marker id="type-md5_diff"/> </item>
<tag><c>mfa_patt() = {module(), atom(), arity_patt()}</c></tag>
<item><marker id="type-mfa_patt"/> </item>
<tag><c>mfa_types() = {mfa(), erl_type() (see module erl_types), [erl_type() (see module erl_types)]}</c></tag>
<item><marker id="type-mfa_types"/> </item>
<tag><c>mod_deps() = dict()</c></tag>
<item><marker id="type-mod_deps"/> </item>
<tag><c>plt()</c></tag>
<item><marker id="type-plt"/> </item>
<tag><c>plt_info() = {[file_md5()], dict()}</c></tag>
<item><marker id="type-plt_info"/> </item>
<tag><c>ret_args_types() = {erl_type() (see module erl_types), [erl_type() (see module erl_types)]}</c></tag>
<item><marker id="type-ret_args_types"/> </item>
</taglist></section>
<funcs>
<func>
<name>new() -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="new-0"/>
 </desc></func>
<func>
<name>delete_module(Plt::plt(), Mod::atom()) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="delete_module-2"/>
 </desc></func>
<func>
<name>delete_list(Plt::plt(), List::[mfa() | integer()]) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="delete_list-2"/>
 </desc></func>
<func>
<name>insert_contract_list(Mini_plt::plt(), List::plt_contracts() (see module dialyzer_contracts)) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="insert_contract_list-2"/>
 </desc></func>
<func>
<name>insert_callbacks(Plt::plt(), Codeserver::codeserver() (see module dialyzer_codeserver)) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="insert_callbacks-2"/>
 </desc></func>
<func>
<name>lookup_contract(Mini_plt::plt(), MFA::mfa_patt()) -&gt; none | {value, #contract{}}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_contract-2"/>
 </desc></func>
<func>
<name>lookup_callbacks(Mini_plt::plt(), Mod::module()) -&gt; none | {value, [{mfa(), {{Filename::string(), Line::pos_integer()}, #contract{}}}]}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_callbacks-2"/>
 </desc></func>
<func>
<name>insert_list(Mini_plt::plt(), List::[{mfa() | integer(), ret_args_types()}]) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="insert_list-2"/>
 </desc></func>
<func>
<name>lookup(Plt::plt(), MFA::integer() | mfa_patt()) -&gt; none | {value, ret_args_types()}</name>
<fsummary> </fsummary>

<desc><marker id="lookup-2"/>
 </desc></func>
<func>
<name>insert_types(PLT::plt(), Rec::dict()) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="insert_types-2"/>
 </desc></func>
<func>
<name>insert_exported_types(PLT::plt(), Set::set()) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="insert_exported_types-2"/>
 </desc></func>
<func>
<name>get_types(Plt::plt()) -&gt; dict()</name>
<fsummary> </fsummary>

<desc><marker id="get_types-1"/>
 </desc></func>
<func>
<name>get_exported_types(Plt::plt()) -&gt; set()</name>
<fsummary> </fsummary>

<desc><marker id="get_exported_types-1"/>
 </desc></func>
<func>
<name>lookup_module(Plt::plt(), M::atom()) -&gt; none | {value, [mfa_types()]}</name>
<fsummary> </fsummary>

<desc><marker id="lookup_module-2"/>
 </desc></func>
<func>
<name>all_modules(Plt::plt()) -&gt; set()</name>
<fsummary> </fsummary>

<desc><marker id="all_modules-1"/>
 </desc></func>
<func>
<name>contains_mfa(Plt::plt(), MFA::mfa()) -&gt; boolean()</name>
<fsummary> </fsummary>

<desc><marker id="contains_mfa-2"/>
 </desc></func>
<func>
<name>get_default_plt() -&gt; filename() (see module file)</name>
<fsummary> </fsummary>

<desc><marker id="get_default_plt-0"/>
 </desc></func>
<func>
<name>plt_and_info_from_file(FileName::filename() (see module file)) -&gt; {plt(), plt_info()}</name>
<fsummary> </fsummary>

<desc><marker id="plt_and_info_from_file-1"/>
 </desc></func>
<func>
<name>from_file(FileName::filename() (see module file)) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="from_file-1"/>
 </desc></func>
<func>
<name>included_files(FileName::filename() (see module file)) -&gt; {ok, [filename() (see module file)]} | {error, err_rsn()}</name>
<fsummary> </fsummary>

<desc><marker id="included_files-1"/>
 </desc></func>
<func>
<name>merge_plts(List::[plt()]) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="merge_plts-1"/>
 </desc></func>
<func>
<name>merge_plts_or_report_conflicts(PltFiles::[filename() (see module file)], Plts::[plt()]) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="merge_plts_or_report_conflicts-2"/>
 </desc></func>
<func>
<name>to_file(FileName::filename() (see module file), Plt::plt(), ModDeps::mod_deps(), X4::{[file_md5()], mod_deps()}) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="to_file-4"/>
 </desc></func>
<func>
<name>check_plt(FileName::filename() (see module file), RemoveFiles::[filename() (see module file)], AddFiles::[filename() (see module file)]) -&gt; ok | {error, check_error()} | {differ, [file_md5()], md5_diff(), mod_deps()} | {old_version, [file_md5()]}</name>
<fsummary> </fsummary>

<desc><marker id="check_plt-3"/>
 </desc></func>
<func>
<name>compute_md5_from_files(Files::[filename() (see module file)]) -&gt; [file_md5()]</name>
<fsummary> </fsummary>

<desc><marker id="compute_md5_from_files-1"/>
 </desc></func>
<func>
<name>get_mini_plt(Plt::plt()) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="get_mini_plt-1"/>
 </desc></func>
<func>
<name>restore_full_plt(Mini_plt::plt(), Plt::plt()) -&gt; plt()</name>
<fsummary> </fsummary>

<desc><marker id="restore_full_plt-2"/>
 </desc></func>
<func>
<name>get_specs(Plt::plt()) -&gt; string()</name>
<fsummary> </fsummary>

<desc><marker id="get_specs-1"/>
 </desc></func>
<func>
<name>get_specs(Plt::plt(), M::atom(), F::atom(), A::arity_patt()) -&gt; none | string()</name>
<fsummary> </fsummary>

<desc><marker id="get_specs-4"/>
 </desc></func>
<func>
<name>pp_non_returning() -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="pp_non_returning-0"/>
 </desc></func>
<func>
<name>pp_mod(Mod::atom()) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="pp_mod-1"/>
 </desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>